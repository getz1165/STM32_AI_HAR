
AccKeras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a58c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005bf50  0800a730  0800a730  0001a730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08066680  08066680  00080a64  2**0
                  CONTENTS
  4 .ARM          00000008  08066680  08066680  00076680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08066688  08066688  00080a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08066688  08066688  00076688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806668c  0806668c  0007668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a64  20000000  08066690  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065f4  20000a64  080670f4  00080a64  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20007058  080670f4  00087058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080a64  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bae  00000000  00000000  00080a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002565  00000000  00000000  00092642  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00094ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00095980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a1e  00000000  00000000  00096658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aefe  00000000  00000000  000af076  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009523b  00000000  00000000  000b9f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f1af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  0014f22c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a64 	.word	0x20000a64
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a714 	.word	0x0800a714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a68 	.word	0x20000a68
 80001dc:	0800a714 	.word	0x0800a714

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <lis331dlh_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	72fb      	strb	r3, [r7, #11]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	685c      	ldr	r4, [r3, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6898      	ldr	r0, [r3, #8]
 8000f74:	893b      	ldrh	r3, [r7, #8]
 8000f76:	7af9      	ldrb	r1, [r7, #11]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	47a0      	blx	r4
 8000f7c:	6178      	str	r0, [r7, #20]
  return ret;
 8000f7e:	697b      	ldr	r3, [r7, #20]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <lis331dlh_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	461a      	mov	r2, r3
 8000f94:	460b      	mov	r3, r1
 8000f96:	72fb      	strb	r3, [r7, #11]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681c      	ldr	r4, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6898      	ldr	r0, [r3, #8]
 8000fa4:	893b      	ldrh	r3, [r7, #8]
 8000fa6:	7af9      	ldrb	r1, [r7, #11]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	47a0      	blx	r4
 8000fac:	6178      	str	r0, [r7, #20]
  return ret;
 8000fae:	697b      	ldr	r3, [r7, #20]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}

08000fb8 <lis331dlh_data_rate_set>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  val         change the values of dr in reg CTRL_REG1
  *
  */
int32_t lis331dlh_data_rate_set(stmdev_ctx_t *ctx, lis331dlh_dr_t val)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG1,
 8000fc4:	f107 0208 	add.w	r2, r7, #8
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2120      	movs	r1, #32
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffc3 	bl	8000f58 <lis331dlh_read_reg>
 8000fd2:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1, 1);
  if(ret == 0) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <lis331dlh_data_rate_set+0x54>
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	7a3b      	ldrb	r3, [r7, #8]
 8000fe4:	f362 1347 	bfi	r3, r2, #5, #3
 8000fe8:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.dr = ( (uint8_t)val & 0x30U ) >> 4;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	f362 03c4 	bfi	r3, r2, #3, #2
 8000ffa:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG1,
 8000ffc:	f107 0208 	add.w	r2, r7, #8
 8001000:	2301      	movs	r3, #1
 8001002:	2120      	movs	r1, #32
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffbf 	bl	8000f88 <lis331dlh_write_reg>
 800100a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
 800100c:	68fb      	ldr	r3, [r7, #12]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <lis331dlh_full_scale_set>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  val         change the values of fs in reg CTRL_REG4
  *
  */
int32_t lis331dlh_full_scale_set(stmdev_ctx_t *ctx, lis331dlh_fs_t val)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8001022:	f107 0208 	add.w	r2, r7, #8
 8001026:	2301      	movs	r3, #1
 8001028:	2123      	movs	r1, #35	; 0x23
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff94 	bl	8000f58 <lis331dlh_read_reg>
 8001030:	60f8      	str	r0, [r7, #12]
  if(ret == 0) {
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <lis331dlh_full_scale_set+0x42>
    ctrl_reg4.fs = (uint8_t)val;
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	b2da      	uxtb	r2, r3
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	f362 1305 	bfi	r3, r2, #4, #2
 8001046:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 8001048:	f107 0208 	add.w	r2, r7, #8
 800104c:	2301      	movs	r3, #1
 800104e:	2123      	movs	r1, #35	; 0x23
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff99 	bl	8000f88 <lis331dlh_write_reg>
 8001056:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <lis331dlh_block_data_update_set>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  val         change the values of bdu in reg CTRL_REG4
  *
  */
int32_t lis331dlh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800106e:	f107 0208 	add.w	r2, r7, #8
 8001072:	2301      	movs	r3, #1
 8001074:	2123      	movs	r1, #35	; 0x23
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff6e 	bl	8000f58 <lis331dlh_read_reg>
 800107c:	60f8      	str	r0, [r7, #12]
  if(ret == 0) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10f      	bne.n	80010a4 <lis331dlh_block_data_update_set+0x42>
    ctrl_reg4.bdu = val;
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	7a3b      	ldrb	r3, [r7, #8]
 800108e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001092:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2301      	movs	r3, #1
 800109a:	2123      	movs	r1, #35	; 0x23
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff73 	bl	8000f88 <lis331dlh_write_reg>
 80010a2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
 80010a4:	68fb      	ldr	r3, [r7, #12]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <lis331dlh_status_reg_get>:
  * @param  val         registers STATUS_REG
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t*) val, 1);
 80010b8:	2301      	movs	r3, #1
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	2127      	movs	r1, #39	; 0x27
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff4a 	bl	8000f58 <lis331dlh_read_reg>
 80010c4:	60f8      	str	r0, [r7, #12]
  return ret;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lis331dlh_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
 80010da:	2306      	movs	r3, #6
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	2128      	movs	r1, #40	; 0x28
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff39 	bl	8000f58 <lis331dlh_read_reg>
 80010e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <lis331dlh_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 80010fc:	2301      	movs	r3, #1
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	210f      	movs	r1, #15
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff28 	bl	8000f58 <lis331dlh_read_reg>
 8001108:	60f8      	str	r0, [r7, #12]
  return ret;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lis331dlh_hp_path_set>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  val         change the values of hpen in reg CTRL_REG2
  *
  */
int32_t lis331dlh_hp_path_set(stmdev_ctx_t *ctx, lis331dlh_hpen_t val)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001120:	f107 0208 	add.w	r2, r7, #8
 8001124:	2301      	movs	r3, #1
 8001126:	2121      	movs	r1, #33	; 0x21
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff15 	bl	8000f58 <lis331dlh_read_reg>
 800112e:	60f8      	str	r0, [r7, #12]
  if(ret == 0) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d118      	bne.n	8001168 <lis331dlh_hp_path_set+0x54>
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	b2da      	uxtb	r2, r3
 800113e:	7a3b      	ldrb	r3, [r7, #8]
 8001140:	f362 0383 	bfi	r3, r2, #2, #2
 8001144:	723b      	strb	r3, [r7, #8]
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	7a3b      	ldrb	r3, [r7, #8]
 8001152:	f362 1304 	bfi	r3, r2, #4, #1
 8001156:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG2,
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2301      	movs	r3, #1
 800115e:	2121      	movs	r1, #33	; 0x21
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff11 	bl	8000f88 <lis331dlh_write_reg>
 8001166:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
 8001168:	68fb      	ldr	r3, [r7, #12]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001178:	f6ad 0df4 	subw	sp, sp, #2292	; 0x8f4
 800117c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fe9f 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 fa15 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 fb15 	bl	80017b4 <MX_GPIO_Init>
  MX_CRC_Init();
 800118a:	f000 fa7d 	bl	8001688 <MX_CRC_Init>
  MX_I2C1_Init();
 800118e:	f000 fa8f 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001192:	f000 fabb 	bl	800170c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001196:	f000 fae3 	bl	8001760 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  aiInit();
 800119a:	f003 fd59 	bl	8004c50 <aiInit>
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 800119e:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <main+0x264>)
 80011a0:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
  dev_ctx.read_reg = platform_read;
 80011a4:	4b8d      	ldr	r3, [pc, #564]	; (80013dc <main+0x268>)
 80011a6:	f8c7 3880 	str.w	r3, [r7, #2176]	; 0x880
  dev_ctx.handle = &hi2c1;
 80011aa:	4b8d      	ldr	r3, [pc, #564]	; (80013e0 <main+0x26c>)
 80011ac:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884

  /* Initialize platform specific hardware */
  platform_init();
 80011b0:	f000 fbfd 	bl	80019ae <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 80011b4:	200f      	movs	r0, #15
 80011b6:	f000 fbef 	bl	8001998 <platform_delay>
  /* Check device ID */
  lis331dlh_device_id_get(&dev_ctx, &whoamI);
 80011ba:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 80011be:	4989      	ldr	r1, [pc, #548]	; (80013e4 <main+0x270>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff96 	bl	80010f2 <lis331dlh_device_id_get>
  char buffer[1000];

  sprintf(buffer, "%x", whoamI);
 80011c6:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <main+0x270>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80011d0:	4985      	ldr	r1, [pc, #532]	; (80013e8 <main+0x274>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f007 fafc 	bl	80087d0 <siprintf>

  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000) ;
 80011d8:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80011dc:	4618      	mov	r0, r3
 80011de:	f7fe ffff 	bl	80001e0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f207 4194 	addw	r1, r7, #1172	; 0x494
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	487f      	ldr	r0, [pc, #508]	; (80013ec <main+0x278>)
 80011f0:	f002 fe49 	bl	8003e86 <HAL_UART_Transmit>
 /* HAL_UART_Transmit_IT(&huart1, (uint8_t*)whoamI, 32);*/

  while(whoamI != LIS331DLH_ID)
 80011f4:	e008      	b.n	8001208 <main+0x94>
  {
	  platform_delay(BOOT_TIME);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 fbce 	bl	8001998 <platform_delay>
	  lis331dlh_device_id_get(&dev_ctx, &whoamI);
 80011fc:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001200:	4978      	ldr	r1, [pc, #480]	; (80013e4 <main+0x270>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff75 	bl	80010f2 <lis331dlh_device_id_get>
  while(whoamI != LIS331DLH_ID)
 8001208:	4b76      	ldr	r3, [pc, #472]	; (80013e4 <main+0x270>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b32      	cmp	r3, #50	; 0x32
 800120e:	d1f2      	bne.n	80011f6 <main+0x82>
  }


  /* Enable Block Data Update */
  lis331dlh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001210:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff23 	bl	8001062 <lis331dlh_block_data_update_set>
  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "Debug\n", 12);
 800121c:	220c      	movs	r2, #12
 800121e:	4974      	ldr	r1, [pc, #464]	; (80013f0 <main+0x27c>)
 8001220:	4872      	ldr	r0, [pc, #456]	; (80013ec <main+0x278>)
 8001222:	f002 fec9 	bl	8003fb8 <HAL_UART_Transmit_IT>

  /* Set full scale */
  lis331dlh_full_scale_set(&dev_ctx, LIS331DLH_4g);
 8001226:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fef2 	bl	8001016 <lis331dlh_full_scale_set>

  /* Configure filtering chain */
  /* Accelerometer - High Pass / Slope path */
  lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_DISABLE);
 8001232:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff6b 	bl	8001114 <lis331dlh_hp_path_set>
//  lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_ON_OUT);
//  lis331dlh_hp_reset_get(&dev_ctx);

  /* Set Output Data Rate */
  lis331dlh_data_rate_set(&dev_ctx, LIS331DLH_ODR_50Hz);
 800123e:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001242:	2101      	movs	r1, #1
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff feb7 	bl	8000fb8 <lis331dlh_data_rate_set>
  lis331dlh_reg_t reg;
  	      lis331dlh_status_reg_get(&dev_ctx, &reg.status_reg);
 800124a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800124e:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff2a 	bl	80010ae <lis331dlh_status_reg_get>
  float regs[270];
  int i =0;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894

  sprintf(buffer, "%s", "AT\n");
 8001260:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <main+0x280>)
 8001266:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000) ;
 8001268:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffb7 	bl	80001e0 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f207 4194 	addw	r1, r7, #1172	; 0x494
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	485b      	ldr	r0, [pc, #364]	; (80013ec <main+0x278>)
 8001280:	f002 fe01 	bl	8003e86 <HAL_UART_Transmit>


  const char *positions[6] = {	"Downstairs",
 8001284:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001288:	4a5b      	ldr	r2, [pc, #364]	; (80013f8 <main+0x284>)
 800128a:	461c      	mov	r4, r3
 800128c:	4615      	mov	r5, r2
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001296:	e884 0003 	stmia.w	r4, {r0, r1}

    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "Hello World\n", 8);


	      if (reg.status_reg.zyxda)
 800129a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f7      	beq.n	800129a <main+0x126>
	      {
	    	  HAL_Delay(50);
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f000 fe7a 	bl	8001fa4 <HAL_Delay>
	        /* Read acceleration data */
	        memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 80012b0:	2206      	movs	r2, #6
 80012b2:	2100      	movs	r1, #0
 80012b4:	4851      	ldr	r0, [pc, #324]	; (80013fc <main+0x288>)
 80012b6:	f006 fd56 	bl	8007d66 <memset>
	        lis331dlh_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 80012ba:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 80012be:	494f      	ldr	r1, [pc, #316]	; (80013fc <main+0x288>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff05 	bl	80010d0 <lis331dlh_acceleration_raw_get>

	        acceleration_mg[2] =
	          LIS331DLH_FROM_FS_4g_TO_mg(data_raw_acceleration.i16bit[0])/1000.0f*9.8f;
 80012c6:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <main+0x288>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	111b      	asrs	r3, r3, #4
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012dc:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001400 <main+0x28c>
 80012e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001404 <main+0x290>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
	        acceleration_mg[2] =
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <main+0x294>)
 80012ee:	edc3 7a02 	vstr	s15, [r3, #8]
	        acceleration_mg[1] =
	          LIS331DLH_FROM_FS_4g_TO_mg(data_raw_acceleration.i16bit[1])/1000.0f*9.8f;
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <main+0x288>)
 80012f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f8:	111b      	asrs	r3, r3, #4
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001304:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001308:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001400 <main+0x28c>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001404 <main+0x290>
 8001314:	ee67 7a87 	vmul.f32	s15, s15, s14
	        acceleration_mg[1] =
 8001318:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <main+0x294>)
 800131a:	edc3 7a01 	vstr	s15, [r3, #4]
	        acceleration_mg[0] =
	          LIS331DLH_FROM_FS_4g_TO_mg(data_raw_acceleration.i16bit[2])/1000.0f*9.8f;
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <main+0x288>)
 8001320:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001324:	111b      	asrs	r3, r3, #4
 8001326:	b21b      	sxth	r3, r3
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001334:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001400 <main+0x28c>
 8001338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001404 <main+0x290>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
	        acceleration_mg[0] =
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <main+0x294>)
 8001346:	edc3 7a00 	vstr	s15, [r3]

	        regs[i] = acceleration_mg[2];
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <main+0x294>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001352:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	601a      	str	r2, [r3, #0]
			i++;
 800135c:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 8001360:	3301      	adds	r3, #1
 8001362:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
			regs[i] = acceleration_mg[1];
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <main+0x294>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800136e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	601a      	str	r2, [r3, #0]
			i++;
 8001378:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
			regs[i] = acceleration_mg[0];
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <main+0x294>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800138a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	601a      	str	r2, [r3, #0]
			i++;
 8001394:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 8001398:	3301      	adds	r3, #1
 800139a:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894

//	       sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
//	                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
//	        tx_com(tx_buffer, strlen((char const*)tx_buffer));
	        if(i>269){i=0;
 800139e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 80013a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80013a6:	f6ff af78 	blt.w	800129a <main+0x126>
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
	        	float out_data[6];
	        	aiRun(&regs, out_data);
 80013b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fcb6 	bl	8004d2c <aiRun>

	        	float max = -10000;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <main+0x298>)
 80013c2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80013c6:	6013      	str	r3, [r2, #0]
	        	int maxi = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888
	        	for(int k = 0; k< 6; k++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 80013d4:	e068      	b.n	80014a8 <main+0x334>
 80013d6:	bf00      	nop
 80013d8:	080018d5 	.word	0x080018d5
 80013dc:	08001925 	.word	0x08001925
 80013e0:	20006f34 	.word	0x20006f34
 80013e4:	20000a94 	.word	0x20000a94
 80013e8:	0800a730 	.word	0x0800a730
 80013ec:	20006f90 	.word	0x20006f90
 80013f0:	0800a734 	.word	0x0800a734
 80013f4:	000a5441 	.word	0x000a5441
 80013f8:	0800a7d8 	.word	0x0800a7d8
 80013fc:	20000a80 	.word	0x20000a80
 8001400:	447a0000 	.word	0x447a0000
 8001404:	411ccccd 	.word	0x411ccccd
 8001408:	20000a88 	.word	0x20000a88
 800140c:	c61c4000 	.word	0xc61c4000
	        		if (out_data[k]>max){
 8001410:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001414:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8001424:	ed93 7a00 	vldr	s14, [r3]
 8001428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	d50d      	bpl.n	800144e <main+0x2da>
	        			max = out_data[k];
 8001432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001436:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8001444:	6013      	str	r3, [r2, #0]
	        			maxi = k;
 8001446:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 800144a:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888
	        		}
	        		sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
	        			                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <main+0x428>)
 8001450:	681b      	ldr	r3, [r3, #0]
	        		sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f880 	bl	8000558 <__aeabi_f2d>
 8001458:	4680      	mov	r8, r0
 800145a:	4689      	mov	r9, r1
	        			                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <main+0x428>)
 800145e:	685b      	ldr	r3, [r3, #4]
	        		sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f879 	bl	8000558 <__aeabi_f2d>
 8001466:	4604      	mov	r4, r0
 8001468:	460d      	mov	r5, r1
	        			                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <main+0x428>)
 800146c:	689b      	ldr	r3, [r3, #8]
	        		sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f872 	bl	8000558 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800147c:	e9cd 4500 	strd	r4, r5, [sp]
 8001480:	4642      	mov	r2, r8
 8001482:	464b      	mov	r3, r9
 8001484:	4946      	ldr	r1, [pc, #280]	; (80015a0 <main+0x42c>)
 8001486:	4847      	ldr	r0, [pc, #284]	; (80015a4 <main+0x430>)
 8001488:	f007 f9a2 	bl	80087d0 <siprintf>
	        			        tx_com(tx_buffer, strlen((char const*)tx_buffer));
 800148c:	4845      	ldr	r0, [pc, #276]	; (80015a4 <main+0x430>)
 800148e:	f7fe fea7 	bl	80001e0 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29b      	uxth	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4842      	ldr	r0, [pc, #264]	; (80015a4 <main+0x430>)
 800149a:	f000 fa69 	bl	8001970 <tx_com>
	        	for(int k = 0; k< 6; k++){
 800149e:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 80014a2:	3301      	adds	r3, #1
 80014a4:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 80014a8:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	ddaf      	ble.n	8001410 <main+0x29c>
	        	}

	            /* 3 - Post-process the predictions */
//	        	sprintf(buffer, "%s\n", positions[maxi]);

	        	sprintf(buffer,"begin\n %s-%f\n %s-%f\n %s-%f\n %s-%f\n %s-%f\n %s-%f\n end\n", positions[0], out_data[0], positions[1], out_data[1], positions[2], out_data[2], positions[3], out_data[3], positions[4], out_data[4], positions[5], out_data[5]);
 80014b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f84a 	bl	8000558 <__aeabi_f2d>
 80014c4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80014c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	6239      	str	r1, [r7, #32]
 80014d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f83e 	bl	8000558 <__aeabi_f2d>
 80014dc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80014e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e4:	689c      	ldr	r4, [r3, #8]
 80014e6:	60fc      	str	r4, [r7, #12]
 80014e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f832 	bl	8000558 <__aeabi_f2d>
 80014f4:	e9c7 0100 	strd	r0, r1, [r7]
 80014f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fc:	68dd      	ldr	r5, [r3, #12]
 80014fe:	60bd      	str	r5, [r7, #8]
 8001500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f826 	bl	8000558 <__aeabi_f2d>
 800150c:	4682      	mov	sl, r0
 800150e:	468b      	mov	fp, r1
 8001510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001514:	691e      	ldr	r6, [r3, #16]
 8001516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f81b 	bl	8000558 <__aeabi_f2d>
 8001522:	4680      	mov	r8, r0
 8001524:	4689      	mov	r9, r1
 8001526:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800152a:	695d      	ldr	r5, [r3, #20]
 800152c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4603      	mov	r3, r0
 800153a:	460c      	mov	r4, r1
 800153c:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8001540:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8001544:	9512      	str	r5, [sp, #72]	; 0x48
 8001546:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800154a:	960e      	str	r6, [sp, #56]	; 0x38
 800154c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001550:	68bd      	ldr	r5, [r7, #8]
 8001552:	950a      	str	r5, [sp, #40]	; 0x28
 8001554:	ed97 7b00 	vldr	d7, [r7]
 8001558:	ed8d 7b08 	vstr	d7, [sp, #32]
 800155c:	68fc      	ldr	r4, [r7, #12]
 800155e:	9406      	str	r4, [sp, #24]
 8001560:	ed97 7b04 	vldr	d7, [r7, #16]
 8001564:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001568:	6a39      	ldr	r1, [r7, #32]
 800156a:	9102      	str	r1, [sp, #8]
 800156c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001570:	ed8d 7b00 	vstr	d7, [sp]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	490c      	ldr	r1, [pc, #48]	; (80015a8 <main+0x434>)
 8001578:	f007 f92a 	bl	80087d0 <siprintf>

//	        	sprintf(buffer,"%4.2f\t%4.2f\t%4.2f\t%4.2f\t%4.2f\t%4.2f\t", out_data[0], out_data[1], out_data[2], out_data[3], out_data[4], out_data[5]);
	        	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000) ;
 800157c:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fe2d 	bl	80001e0 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	f207 4194 	addw	r1, r7, #1172	; 0x494
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <main+0x438>)
 8001594:	f002 fc77 	bl	8003e86 <HAL_UART_Transmit>
	      if (reg.status_reg.zyxda)
 8001598:	e67f      	b.n	800129a <main+0x126>
 800159a:	bf00      	nop
 800159c:	20000a88 	.word	0x20000a88
 80015a0:	0800a73c 	.word	0x0800a73c
 80015a4:	20000a98 	.word	0x20000a98
 80015a8:	0800a764 	.word	0x0800a764
 80015ac:	20006f90 	.word	0x20006f90

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	; 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	; 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f006 fbd1 	bl	8007d66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <SystemClock_Config+0xd0>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <SystemClock_Config+0xd0>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <SystemClock_Config+0xd0>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <SystemClock_Config+0xd4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <SystemClock_Config+0xd4>)
 80015fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SystemClock_Config+0xd4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001618:	2310      	movs	r3, #16
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161c:	2302      	movs	r3, #2
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001624:	2310      	movs	r3, #16
 8001626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001628:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800162c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800162e:	2304      	movs	r3, #4
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001632:	2307      	movs	r3, #7
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	4618      	mov	r0, r3
 800163c:	f001 ff74 	bl	8003528 <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001646:	f000 f9b9 	bl	80019bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164e:	2302      	movs	r3, #2
 8001650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2102      	movs	r1, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f002 f9ce 	bl	8003a08 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001672:	f000 f9a3 	bl	80019bc <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3750      	adds	r7, #80	; 0x50
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_CRC_Init+0x20>)
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <MX_CRC_Init+0x24>)
 8001690:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_CRC_Init+0x20>)
 8001694:	f000 fdb9 	bl	800220a <HAL_CRC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800169e:	f000 f98d 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20006f88 	.word	0x20006f88
 80016ac:	40023000 	.word	0x40023000

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 48;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2230      	movs	r2, #48	; 0x30
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f000 ff67 	bl	80025c0 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f960 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20006f34 	.word	0x20006f34
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f002 fb52 	bl	8003dec <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f935 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20006f90 	.word	0x20006f90
 800175c:	40011000 	.word	0x40011000

08001760 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART6_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001798:	f002 fb28 	bl	8003dec <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f90b 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20006fd0 	.word	0x20006fd0
 80017b0:	40011400 	.word	0x40011400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <MX_GPIO_Init+0x10c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_GPIO_Init+0x10c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2120      	movs	r1, #32
 800185a:	481a      	ldr	r0, [pc, #104]	; (80018c4 <MX_GPIO_Init+0x110>)
 800185c:	f000 fe96 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_GPIO_Init+0x114>)
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4815      	ldr	r0, [pc, #84]	; (80018cc <MX_GPIO_Init+0x118>)
 8001876:	f000 fd07 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800187a:	2320      	movs	r3, #32
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_GPIO_Init+0x110>)
 8001892:	f000 fcf9 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001896:	2304      	movs	r3, #4
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018a6:	230c      	movs	r3, #12
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_GPIO_Init+0x11c>)
 80018b2:	f000 fce9 	bl	8002288 <HAL_GPIO_Init>

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00

080018d4 <platform_write>:

/* USER CODE BEGIN 4 */

static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af04      	add	r7, sp, #16
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	461a      	mov	r2, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	72fb      	strb	r3, [r7, #11]
 80018e4:	4613      	mov	r3, r2
 80018e6:	813b      	strh	r3, [r7, #8]
  if (handle == &hi2c1)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <platform_write+0x4c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <platform_write+0x40>
  {
    /* Write multiple command */
    reg |= 0x80;
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f6:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	893b      	ldrh	r3, [r7, #8]
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	2131      	movs	r1, #49	; 0x31
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 ff8e 	bl	8002830 <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }
  return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20006f34 	.word	0x20006f34

08001924 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af04      	add	r7, sp, #16
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	72fb      	strb	r3, [r7, #11]
 8001934:	4613      	mov	r3, r2
 8001936:	813b      	strh	r3, [r7, #8]
  if (handle == &hi2c1)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <platform_read+0x48>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d110      	bne.n	8001962 <platform_read+0x3e>
  {
    /* Read multiple command */
    reg |= 0x80;
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001946:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	b29a      	uxth	r2, r3
 800194c:	230a      	movs	r3, #10
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	893b      	ldrh	r3, [r7, #8]
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	2131      	movs	r1, #49	; 0x31
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f001 f861 	bl	8002a24 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 10);
  }
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20006f34 	.word	0x20006f34

08001970 <tx_com>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <tx_com+0x24>)
 8001986:	f002 fa7e 	bl	8003e86 <HAL_UART_Transmit>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20006f90 	.word	0x20006f90

08001998 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 faff 	bl	8001fa4 <HAL_Delay>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_MspInit+0x4c>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a0a:	2007      	movs	r0, #7
 8001a0c:	f000 fbbc 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_CRC_MspInit+0x3c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10d      	bne.n	8001a4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_CRC_MspInit+0x40>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_CRC_MspInit+0x40>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_CRC_MspInit+0x40>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023000 	.word	0x40023000
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0x84>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d12b      	bne.n	8001ada <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9e:	23c0      	movs	r3, #192	; 0xc0
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa2:	2312      	movs	r3, #18
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <HAL_I2C_MspInit+0x8c>)
 8001aba:	f000 fbe5 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020400 	.word	0x40020400

08001af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08e      	sub	sp, #56	; 0x38
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a53      	ldr	r2, [pc, #332]	; (8001c5c <HAL_UART_MspInit+0x16c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d135      	bne.n	8001b7e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a4a      	ldr	r2, [pc, #296]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b48      	ldr	r3, [pc, #288]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	483f      	ldr	r0, [pc, #252]	; (8001c64 <HAL_UART_MspInit+0x174>)
 8001b68:	f000 fb8e 	bl	8002288 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2025      	movs	r0, #37	; 0x25
 8001b72:	f000 fb14 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b76:	2025      	movs	r0, #37	; 0x25
 8001b78:	f000 fb2d 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b7c:	e06a      	b.n	8001c54 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <HAL_UART_MspInit+0x178>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d134      	bne.n	8001bf2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4822      	ldr	r0, [pc, #136]	; (8001c64 <HAL_UART_MspInit+0x174>)
 8001bdc:	f000 fb54 	bl	8002288 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2026      	movs	r0, #38	; 0x26
 8001be6:	f000 fada 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bea:	2026      	movs	r0, #38	; 0x26
 8001bec:	f000 faf3 	bl	80021d6 <HAL_NVIC_EnableIRQ>
}
 8001bf0:	e030      	b.n	8001c54 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_UART_MspInit+0x17c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d12b      	bne.n	8001c54 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6313      	str	r3, [r2, #48]	; 0x30
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_UART_MspInit+0x170>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c44:	2308      	movs	r3, #8
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4808      	ldr	r0, [pc, #32]	; (8001c70 <HAL_UART_MspInit+0x180>)
 8001c50:	f000 fb1a 	bl	8002288 <HAL_GPIO_Init>
}
 8001c54:	bf00      	nop
 8001c56:	3738      	adds	r7, #56	; 0x38
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	40020800 	.word	0x40020800

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc8:	f000 f94c 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <USART1_IRQHandler+0x10>)
 8001cd6:	f002 f9b5 	bl	8004044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20006f90 	.word	0x20006f90

08001ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <USART2_IRQHandler+0x10>)
 8001cea:	f002 f9ab 	bl	8004044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20007010 	.word	0x20007010

08001cf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
	}

return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
	}
	return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f005 ff72 	bl	8007cec <__errno>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20018000 	.word	0x20018000
 8001e34:	00000800 	.word	0x00000800
 8001e38:	20000e80 	.word	0x20000e80
 8001e3c:	20007058 	.word	0x20007058

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <SystemInit+0x28>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemInit+0x28>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SystemInit+0x28>)
 8001e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e72:	e003      	b.n	8001e7c <LoopCopyDataInit>

08001e74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e7a:	3104      	adds	r1, #4

08001e7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e84:	d3f6      	bcc.n	8001e74 <CopyDataInit>
  ldr  r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e88:	e002      	b.n	8001e90 <LoopFillZerobss>

08001e8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e8c:	f842 3b04 	str.w	r3, [r2], #4

08001e90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e94:	d3f9      	bcc.n	8001e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e96:	f7ff ffd3 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f005 ff2d 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff f969 	bl	8001174 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ea8:	08066690 	.word	0x08066690
  ldr  r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001eb0:	20000a64 	.word	0x20000a64
  ldr  r2, =_sbss
 8001eb4:	20000a64 	.word	0x20000a64
  ldr  r3, = _ebss
 8001eb8:	20007058 	.word	0x20007058

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f94d 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fd6a 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f965 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f40:	f000 f92d 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20007050 	.word	0x20007050

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20007050 	.word	0x20007050

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_Delay+0x40>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000008 	.word	0x20000008

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00e      	b.n	800223a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	795b      	ldrb	r3, [r3, #5]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fbf5 	bl	8001a1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d004      	beq.n	8002260 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00c      	b.n	800227a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2205      	movs	r2, #5
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e159      	b.n	8002558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8148 	bne.w	8002552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d00b      	beq.n	80022e2 <HAL_GPIO_Init+0x5a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d6:	2b11      	cmp	r3, #17
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b12      	cmp	r3, #18
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0xfc>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b12      	cmp	r3, #18
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a2 	beq.w	8002552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_GPIO_Init+0x2e4>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_GPIO_Init+0x2e4>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_GPIO_Init+0x2e4>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a51      	ldr	r2, [pc, #324]	; (8002570 <HAL_GPIO_Init+0x2e8>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2ec>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x202>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_GPIO_Init+0x2f0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x1fe>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_GPIO_Init+0x2f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x1fa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <HAL_GPIO_Init+0x2f8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x1f6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a44      	ldr	r2, [pc, #272]	; (8002584 <HAL_GPIO_Init+0x2fc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x1f2>
 8002476:	2304      	movs	r3, #4
 8002478:	e008      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247a:	2307      	movs	r3, #7
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247e:	2303      	movs	r3, #3
 8002480:	e004      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002482:	2302      	movs	r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_GPIO_Init+0x204>
 800248a:	2300      	movs	r3, #0
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f002 0203 	and.w	r2, r2, #3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4093      	lsls	r3, r2
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249c:	4934      	ldr	r1, [pc, #208]	; (8002570 <HAL_GPIO_Init+0x2e8>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <HAL_GPIO_Init+0x300>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ce:	4a2e      	ldr	r2, [pc, #184]	; (8002588 <HAL_GPIO_Init+0x300>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_GPIO_Init+0x300>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_GPIO_Init+0x300>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_GPIO_Init+0x300>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_GPIO_Init+0x300>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_GPIO_Init+0x300>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_GPIO_Init+0x300>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	f67f aea2 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002560:	bf00      	nop
 8002562:	3724      	adds	r7, #36	; 0x24
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40023800 	.word	0x40023800
 8002570:	40013800 	.word	0x40013800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a8:	e003      	b.n	80025b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e11f      	b.n	8002812 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fa3a 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002624:	f001 fbba 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a7b      	ldr	r2, [pc, #492]	; (800281c <HAL_I2C_Init+0x25c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d807      	bhi.n	8002644 <HAL_I2C_Init+0x84>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_I2C_Init+0x260>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e006      	b.n	8002652 <HAL_I2C_Init+0x92>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a77      	ldr	r2, [pc, #476]	; (8002824 <HAL_I2C_Init+0x264>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0db      	b.n	8002812 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a72      	ldr	r2, [pc, #456]	; (8002828 <HAL_I2C_Init+0x268>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a64      	ldr	r2, [pc, #400]	; (800281c <HAL_I2C_Init+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d802      	bhi.n	8002694 <HAL_I2C_Init+0xd4>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	e009      	b.n	80026a8 <HAL_I2C_Init+0xe8>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_I2C_Init+0x26c>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4956      	ldr	r1, [pc, #344]	; (800281c <HAL_I2C_Init+0x25c>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d80d      	bhi.n	80026e4 <HAL_I2C_Init+0x124>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e59      	subs	r1, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	2b04      	cmp	r3, #4
 80026de:	bf38      	it	cc
 80026e0:	2304      	movcc	r3, #4
 80026e2:	e04f      	b.n	8002784 <HAL_I2C_Init+0x1c4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d111      	bne.n	8002710 <HAL_I2C_Init+0x150>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e012      	b.n	8002736 <HAL_I2C_Init+0x176>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	0099      	lsls	r1, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Init+0x17e>
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <HAL_I2C_Init+0x1c4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10e      	bne.n	8002764 <HAL_I2C_Init+0x1a4>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e58      	subs	r0, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	440b      	add	r3, r1
 8002754:	fbb0 f3f3 	udiv	r3, r0, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Init+0x1c4>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	6809      	ldr	r1, [r1, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6911      	ldr	r1, [r2, #16]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	000186a0 	.word	0x000186a0
 8002820:	001e847f 	.word	0x001e847f
 8002824:	003d08ff 	.word	0x003d08ff
 8002828:	431bde83 	.word	0x431bde83
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284a:	f7ff fb9f 	bl	8001f8c <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	f040 80d9 	bne.w	8002a10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2319      	movs	r3, #25
 8002864:	2201      	movs	r2, #1
 8002866:	496d      	ldr	r1, [pc, #436]	; (8002a1c <HAL_I2C_Mem_Write+0x1ec>)
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fc7f 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
 8002876:	e0cc      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Mem_Write+0x56>
 8002882:	2302      	movs	r3, #2
 8002884:	e0c5      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d007      	beq.n	80028ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2221      	movs	r2, #33	; 0x21
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a4d      	ldr	r2, [pc, #308]	; (8002a20 <HAL_I2C_Mem_Write+0x1f0>)
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ee:	88f8      	ldrh	r0, [r7, #6]
 80028f0:	893a      	ldrh	r2, [r7, #8]
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4603      	mov	r3, r0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fab6 	bl	8002e70 <I2C_RequestMemoryWrite>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d052      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e081      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fd00 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b04      	cmp	r3, #4
 8002924:	d107      	bne.n	8002936 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06b      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d11b      	bne.n	80029b0 <HAL_I2C_Mem_Write+0x180>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d017      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1aa      	bne.n	800290e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fcec 	bl	800339a <I2C_WaitOnBTFFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d107      	bne.n	80029e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e016      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	00100002 	.word	0x00100002
 8002a20:	ffff0000 	.word	0xffff0000

08002a24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3e:	f7ff faa5 	bl	8001f8c <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 8208 	bne.w	8002e62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2319      	movs	r3, #25
 8002a58:	2201      	movs	r2, #1
 8002a5a:	497b      	ldr	r1, [pc, #492]	; (8002c48 <HAL_I2C_Mem_Read+0x224>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb85 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e1fb      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Mem_Read+0x56>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e1f4      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d007      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2222      	movs	r2, #34	; 0x22
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_I2C_Mem_Read+0x228>)
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae2:	88f8      	ldrh	r0, [r7, #6]
 8002ae4:	893a      	ldrh	r2, [r7, #8]
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa52 	bl	8002f9c <I2C_RequestMemoryRead>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1b0      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e184      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d11b      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e164      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d11b      	bne.n	8002bb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	e144      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bc8:	e138      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	f200 80f1 	bhi.w	8002db6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d123      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fc1b 	bl	800341c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e139      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c22:	e10b      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d14e      	bne.n	8002cca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	2200      	movs	r2, #0
 8002c34:	4906      	ldr	r1, [pc, #24]	; (8002c50 <HAL_I2C_Mem_Read+0x22c>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa98 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e10e      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
 8002c46:	bf00      	nop
 8002c48:	00100002 	.word	0x00100002
 8002c4c:	ffff0000 	.word	0xffff0000
 8002c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc8:	e0b8      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4966      	ldr	r1, [pc, #408]	; (8002e6c <HAL_I2C_Mem_Read+0x448>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fa49 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0bf      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	494f      	ldr	r1, [pc, #316]	; (8002e6c <HAL_I2C_Mem_Read+0x448>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fa1b 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e091      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db4:	e042      	b.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fb2e 	bl	800341c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e04c      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d118      	bne.n	8002e3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f aec2 	bne.w	8002bca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3728      	adds	r7, #40	; 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	00010004 	.word	0x00010004

08002e70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	817b      	strh	r3, [r7, #10]
 8002e82:	460b      	mov	r3, r1
 8002e84:	813b      	strh	r3, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f960 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec0:	d103      	bne.n	8002eca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e05f      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	492d      	ldr	r1, [pc, #180]	; (8002f98 <I2C_RequestMemoryWrite+0x128>)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f998 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e04c      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fa02 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e02b      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3c:	893b      	ldrh	r3, [r7, #8]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]
 8002f46:	e021      	b.n	8002f8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f9dc 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e005      	b.n	8002f8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	00010002 	.word	0x00010002

08002f9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8c2 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffc:	d103      	bne.n	8003006 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0aa      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003018:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	4952      	ldr	r1, [pc, #328]	; (8003168 <I2C_RequestMemoryRead+0x1cc>)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8fa 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e097      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f964 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b04      	cmp	r3, #4
 800305c:	d107      	bne.n	800306e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e076      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e021      	b.n	80030c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003084:	893b      	ldrh	r3, [r7, #8]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	b29b      	uxth	r3, r3
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f93e 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e050      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030be:	893b      	ldrh	r3, [r7, #8]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ca:	6a39      	ldr	r1, [r7, #32]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f923 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e035      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003102:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2200      	movs	r2, #0
 800310c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f82b 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312a:	d103      	bne.n	8003134 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e013      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	6a3a      	ldr	r2, [r7, #32]
 800314c:	4906      	ldr	r1, [pc, #24]	; (8003168 <I2C_RequestMemoryRead+0x1cc>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f863 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	00010002 	.word	0x00010002

0800316c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	e025      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003184:	d021      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe ff01 	bl	8001f8c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e023      	b.n	8003212 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10d      	bne.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	e00c      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0b6      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003228:	e051      	b.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d123      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003252:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e046      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003288:	d021      	beq.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe fe7f 	bl	8001f8c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d116      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e020      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10c      	bne.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e00b      	b.n	800330a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d18d      	bne.n	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003324:	e02d      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f8ce 	bl	80034c8 <I2C_IsAcknowledgeFailed>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02d      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800333c:	d021      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fe25 	bl	8001f8c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e007      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d1ca      	bne.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a6:	e02d      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f88d 	bl	80034c8 <I2C_IsAcknowledgeFailed>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e02d      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033be:	d021      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fe fde4 	bl	8001f8c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d1ca      	bne.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003428:	e042      	b.n	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b10      	cmp	r3, #16
 8003436:	d119      	bne.n	800346c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e029      	b.n	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7fe fd8e 	bl	8001f8c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e007      	b.n	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d1b5      	bne.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d11b      	bne.n	8003518 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e25b      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d075      	beq.n	8003632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003546:	4ba3      	ldr	r3, [pc, #652]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00c      	beq.n	800356c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4ba0      	ldr	r3, [pc, #640]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b9d      	ldr	r3, [pc, #628]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b99      	ldr	r3, [pc, #612]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05b      	beq.n	8003630 <HAL_RCC_OscConfig+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d157      	bne.n	8003630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e236      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x74>
 800358e:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a90      	ldr	r2, [pc, #576]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a8a      	ldr	r2, [pc, #552]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 80035c0:	4b84      	ldr	r3, [pc, #528]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a83      	ldr	r2, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a80      	ldr	r2, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe fcd4 	bl	8001f8c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fe fcd0 	bl	8001f8c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1fb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xc0>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fcc0 	bl	8001f8c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fcbc 	bl	8001f8c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1e7      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0xe8>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b5c      	ldr	r3, [pc, #368]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1bb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4952      	ldr	r1, [pc, #328]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e03a      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x2b0>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe fc75 	bl	8001f8c <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fc71 	bl	8001f8c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e19c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4940      	ldr	r1, [pc, #256]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x2b0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe fc54 	bl	8001f8c <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fe fc50 	bl	8001f8c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e17b      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d030      	beq.n	8003774 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCC_OscConfig+0x2b4>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fc34 	bl	8001f8c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7fe fc30 	bl	8001f8c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e15b      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x200>
 8003746:	e015      	b.n	8003774 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x2b4>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fc1d 	bl	8001f8c <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7fe fc19 	bl	8001f8c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e144      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a0 	beq.w	80038c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d121      	bne.n	8003802 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fe fbdf 	bl	8001f8c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e011      	b.n	80037f6 <HAL_RCC_OscConfig+0x2ce>
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	42470000 	.word	0x42470000
 80037dc:	42470e80 	.word	0x42470e80
 80037e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fe fbd2 	bl	8001f8c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0fd      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCC_OscConfig+0x4d4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x2f0>
 800380a:	4b7d      	ldr	r3, [pc, #500]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a7c      	ldr	r2, [pc, #496]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x32a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 8003820:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x32a>
 800383a:	4b71      	ldr	r3, [pc, #452]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a70      	ldr	r2, [pc, #448]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a6d      	ldr	r2, [pc, #436]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fe fb97 	bl	8001f8c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fb93 	bl	8001f8c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0bc      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b61      	ldr	r3, [pc, #388]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x33a>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe fb81 	bl	8001f8c <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe fb7d 	bl	8001f8c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0a6      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b52      	ldr	r3, [pc, #328]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8092 	beq.w	80039f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038cc:	4b4c      	ldr	r3, [pc, #304]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d05c      	beq.n	8003992 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d141      	bne.n	8003964 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCC_OscConfig+0x4dc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fb51 	bl	8001f8c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe fb4d 	bl	8001f8c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e078      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003900:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	019b      	lsls	r3, r3, #6
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	4933      	ldr	r1, [pc, #204]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <HAL_RCC_OscConfig+0x4dc>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fb26 	bl	8001f8c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fb22 	bl	8001f8c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e04d      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x41c>
 8003962:	e045      	b.n	80039f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCC_OscConfig+0x4dc>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe fb0f 	bl	8001f8c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe fb0b 	bl	8001f8c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e036      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x44a>
 8003990:	e02e      	b.n	80039f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e029      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d11c      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d115      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10d      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40007000 	.word	0x40007000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	42470060 	.word	0x42470060

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fe fa48 	bl	8001f8c <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fe fa44 	bl	8001f8c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe f9a8 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800a8b8 	.word	0x0800a8b8
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bea:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d007      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x32>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x38>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 80b4 	bne.w	8003d68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c02:	60bb      	str	r3, [r7, #8]
       break;
 8003c04:	e0b3      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c08:	60bb      	str	r3, [r7, #8]
      break;
 8003c0a:	e0b0      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c16:	4b58      	ldr	r3, [pc, #352]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04a      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	ea03 0501 	and.w	r5, r3, r1
 8003c38:	ea04 0602 	and.w	r6, r4, r2
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4632      	mov	r2, r6
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	0154      	lsls	r4, r2, #5
 8003c4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c4e:	014b      	lsls	r3, r1, #5
 8003c50:	4619      	mov	r1, r3
 8003c52:	4622      	mov	r2, r4
 8003c54:	1b49      	subs	r1, r1, r5
 8003c56:	eb62 0206 	sbc.w	r2, r2, r6
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	f04f 0400 	mov.w	r4, #0
 8003c62:	0194      	lsls	r4, r2, #6
 8003c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c68:	018b      	lsls	r3, r1, #6
 8003c6a:	1a5b      	subs	r3, r3, r1
 8003c6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	00e2      	lsls	r2, r4, #3
 8003c7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c7e:	00d9      	lsls	r1, r3, #3
 8003c80:	460b      	mov	r3, r1
 8003c82:	4614      	mov	r4, r2
 8003c84:	195b      	adds	r3, r3, r5
 8003c86:	eb44 0406 	adc.w	r4, r4, r6
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	0262      	lsls	r2, r4, #9
 8003c94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c98:	0259      	lsls	r1, r3, #9
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fc ffd4 	bl	8000c58 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e049      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	099b      	lsrs	r3, r3, #6
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	ea03 0501 	and.w	r5, r3, r1
 8003cce:	ea04 0602 	and.w	r6, r4, r2
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	0154      	lsls	r4, r2, #5
 8003ce0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ce4:	014b      	lsls	r3, r1, #5
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4622      	mov	r2, r4
 8003cea:	1b49      	subs	r1, r1, r5
 8003cec:	eb62 0206 	sbc.w	r2, r2, r6
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	0194      	lsls	r4, r2, #6
 8003cfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cfe:	018b      	lsls	r3, r1, #6
 8003d00:	1a5b      	subs	r3, r3, r1
 8003d02:	eb64 0402 	sbc.w	r4, r4, r2
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d14:	00d9      	lsls	r1, r3, #3
 8003d16:	460b      	mov	r3, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	195b      	adds	r3, r3, r5
 8003d1c:	eb44 0406 	adc.w	r4, r4, r6
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	02a2      	lsls	r2, r4, #10
 8003d2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d2e:	0299      	lsls	r1, r3, #10
 8003d30:	460b      	mov	r3, r1
 8003d32:	4614      	mov	r4, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	4621      	mov	r1, r4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f04f 0400 	mov.w	r4, #0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4623      	mov	r3, r4
 8003d42:	f7fc ff89 	bl	8000c58 <__aeabi_uldivmod>
 8003d46:	4603      	mov	r3, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d6a:	60bb      	str	r3, [r7, #8]
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400
 8003d80:	007a1200 	.word	0x007a1200

08003d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000000 	.word	0x20000000

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da4:	4601      	mov	r1, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	0800a8c8 	.word	0x0800a8c8

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc8:	f7ff ffdc 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0800a8c8 	.word	0x0800a8c8

08003dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e03f      	b.n	8003e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd fe6c 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	; 0x24
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fb91 	bl	8004558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b088      	sub	sp, #32
 8003e8a:	af02      	add	r7, sp, #8
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	f040 8083 	bne.w	8003fae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_UART_Transmit+0x2e>
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e07b      	b.n	8003fb0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Transmit+0x40>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e074      	b.n	8003fb0 <HAL_UART_Transmit+0x12a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2221      	movs	r2, #33	; 0x21
 8003ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003edc:	f7fe f856 	bl	8001f8c <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ef6:	e042      	b.n	8003f7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d122      	bne.n	8003f56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9b0 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e042      	b.n	8003fb0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3302      	adds	r3, #2
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	e017      	b.n	8003f7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	e013      	b.n	8003f7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f98d 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e01f      	b.n	8003fb0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	60ba      	str	r2, [r7, #8]
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1b7      	bne.n	8003ef8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f974 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e006      	b.n	8003fb0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d130      	bne.n	8004034 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_Transmit_IT+0x26>
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e029      	b.n	8004036 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Transmit_IT+0x38>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e022      	b.n	8004036 <HAL_UART_Transmit_IT+0x7e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2221      	movs	r2, #33	; 0x21
 8004014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800402e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x52>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9e0 	bl	8004454 <UART_Receive_IT>
      return;
 8004094:	e0d1      	b.n	800423a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80b0 	beq.w	80041fe <HAL_UART_IRQHandler+0x1ba>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_UART_IRQHandler+0x70>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a5 	beq.w	80041fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_UART_IRQHandler+0x90>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_UART_IRQHandler+0xb0>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	f043 0202 	orr.w	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_UART_IRQHandler+0xd0>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	f043 0204 	orr.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00f      	beq.n	800413e <HAL_UART_IRQHandler+0xfa>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <HAL_UART_IRQHandler+0xee>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d078      	beq.n	8004238 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_UART_IRQHandler+0x11c>
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f97a 	bl	8004454 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_UART_IRQHandler+0x144>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d031      	beq.n	80041ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8c3 	bl	8004314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d123      	bne.n	80041e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	4a21      	ldr	r2, [pc, #132]	; (8004240 <HAL_UART_IRQHandler+0x1fc>)
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe f83e 	bl	8002242 <HAL_DMA_Abort_IT>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d016      	beq.n	80041fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041d6:	4610      	mov	r0, r2
 80041d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041da:	e00e      	b.n	80041fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f845 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e2:	e00a      	b.n	80041fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f841 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ea:	e006      	b.n	80041fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f83d 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041f8:	e01e      	b.n	8004238 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fa:	bf00      	nop
    return;
 80041fc:	e01c      	b.n	8004238 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_UART_IRQHandler+0x1d6>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8b0 	bl	8004378 <UART_Transmit_IT>
    return;
 8004218:	e00f      	b.n	800423a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_UART_IRQHandler+0x1f6>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8f8 	bl	8004424 <UART_EndTransmit_IT>
    return;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004238:	bf00      	nop
  }
}
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	08004351 	.word	0x08004351

08004244 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004290:	e02c      	b.n	80042ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d028      	beq.n	80042ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a0:	f7fd fe74 	bl	8001f8c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d21d      	bcs.n	80042ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e00f      	b.n	800430c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d0c3      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800432a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff7e 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d144      	bne.n	8004416 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d11a      	bne.n	80043cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]
 80043be:	e00e      	b.n	80043de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]
 80043ca:	e008      	b.n	80043de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	1c59      	adds	r1, r3, #1
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6211      	str	r1, [r2, #32]
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	4619      	mov	r1, r3
 80043ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004400:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004410:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fefd 	bl	8004244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b22      	cmp	r3, #34	; 0x22
 8004466:	d171      	bne.n	800454c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d123      	bne.n	80044ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10e      	bne.n	800449e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	e029      	b.n	80044f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
 80044b8:	e01b      	b.n	80044f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6858      	ldr	r0, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	1c59      	adds	r1, r3, #1
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6291      	str	r1, [r2, #40]	; 0x28
 80044d2:	b2c2      	uxtb	r2, r0
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e00c      	b.n	80044f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	1c58      	adds	r0, r3, #1
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	6288      	str	r0, [r1, #40]	; 0x28
 80044ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	4619      	mov	r1, r3
 8004500:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004502:	2b00      	cmp	r3, #0
 8004504:	d120      	bne.n	8004548 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0220 	bic.w	r2, r2, #32
 8004514:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fe8a 	bl	8004258 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e002      	b.n	800454e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e000      	b.n	800454e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800459a:	f023 030c 	bic.w	r3, r3, #12
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c6:	f040 818b 	bne.w	80048e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4ac1      	ldr	r2, [pc, #772]	; (80048d4 <UART_SetConfig+0x37c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d005      	beq.n	80045e0 <UART_SetConfig+0x88>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4abf      	ldr	r2, [pc, #764]	; (80048d8 <UART_SetConfig+0x380>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	f040 80bd 	bne.w	800475a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7ff fbf0 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 80045e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	461d      	mov	r5, r3
 80045ea:	f04f 0600 	mov.w	r6, #0
 80045ee:	46a8      	mov	r8, r5
 80045f0:	46b1      	mov	r9, r6
 80045f2:	eb18 0308 	adds.w	r3, r8, r8
 80045f6:	eb49 0409 	adc.w	r4, r9, r9
 80045fa:	4698      	mov	r8, r3
 80045fc:	46a1      	mov	r9, r4
 80045fe:	eb18 0805 	adds.w	r8, r8, r5
 8004602:	eb49 0906 	adc.w	r9, r9, r6
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800461a:	4688      	mov	r8, r1
 800461c:	4691      	mov	r9, r2
 800461e:	eb18 0005 	adds.w	r0, r8, r5
 8004622:	eb49 0106 	adc.w	r1, r9, r6
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	461d      	mov	r5, r3
 800462c:	f04f 0600 	mov.w	r6, #0
 8004630:	196b      	adds	r3, r5, r5
 8004632:	eb46 0406 	adc.w	r4, r6, r6
 8004636:	461a      	mov	r2, r3
 8004638:	4623      	mov	r3, r4
 800463a:	f7fc fb0d 	bl	8000c58 <__aeabi_uldivmod>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	461a      	mov	r2, r3
 8004644:	4ba5      	ldr	r3, [pc, #660]	; (80048dc <UART_SetConfig+0x384>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	461d      	mov	r5, r3
 8004654:	f04f 0600 	mov.w	r6, #0
 8004658:	46a9      	mov	r9, r5
 800465a:	46b2      	mov	sl, r6
 800465c:	eb19 0309 	adds.w	r3, r9, r9
 8004660:	eb4a 040a 	adc.w	r4, sl, sl
 8004664:	4699      	mov	r9, r3
 8004666:	46a2      	mov	sl, r4
 8004668:	eb19 0905 	adds.w	r9, r9, r5
 800466c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004684:	4689      	mov	r9, r1
 8004686:	4692      	mov	sl, r2
 8004688:	eb19 0005 	adds.w	r0, r9, r5
 800468c:	eb4a 0106 	adc.w	r1, sl, r6
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	461d      	mov	r5, r3
 8004696:	f04f 0600 	mov.w	r6, #0
 800469a:	196b      	adds	r3, r5, r5
 800469c:	eb46 0406 	adc.w	r4, r6, r6
 80046a0:	461a      	mov	r2, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	f7fc fad8 	bl	8000c58 <__aeabi_uldivmod>
 80046a8:	4603      	mov	r3, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b8b      	ldr	r3, [pc, #556]	; (80048dc <UART_SetConfig+0x384>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a86      	ldr	r2, [pc, #536]	; (80048dc <UART_SetConfig+0x384>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046d0:	4498      	add	r8, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	461d      	mov	r5, r3
 80046d6:	f04f 0600 	mov.w	r6, #0
 80046da:	46a9      	mov	r9, r5
 80046dc:	46b2      	mov	sl, r6
 80046de:	eb19 0309 	adds.w	r3, r9, r9
 80046e2:	eb4a 040a 	adc.w	r4, sl, sl
 80046e6:	4699      	mov	r9, r3
 80046e8:	46a2      	mov	sl, r4
 80046ea:	eb19 0905 	adds.w	r9, r9, r5
 80046ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004702:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004706:	4689      	mov	r9, r1
 8004708:	4692      	mov	sl, r2
 800470a:	eb19 0005 	adds.w	r0, r9, r5
 800470e:	eb4a 0106 	adc.w	r1, sl, r6
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	461d      	mov	r5, r3
 8004718:	f04f 0600 	mov.w	r6, #0
 800471c:	196b      	adds	r3, r5, r5
 800471e:	eb46 0406 	adc.w	r4, r6, r6
 8004722:	461a      	mov	r2, r3
 8004724:	4623      	mov	r3, r4
 8004726:	f7fc fa97 	bl	8000c58 <__aeabi_uldivmod>
 800472a:	4603      	mov	r3, r0
 800472c:	460c      	mov	r4, r1
 800472e:	461a      	mov	r2, r3
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <UART_SetConfig+0x384>)
 8004732:	fba3 1302 	umull	r1, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2164      	movs	r1, #100	; 0x64
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	3332      	adds	r3, #50	; 0x32
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <UART_SetConfig+0x384>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	f003 0207 	and.w	r2, r3, #7
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4442      	add	r2, r8
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	e26f      	b.n	8004c3a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7ff fb1f 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 800475e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	461d      	mov	r5, r3
 8004764:	f04f 0600 	mov.w	r6, #0
 8004768:	46a8      	mov	r8, r5
 800476a:	46b1      	mov	r9, r6
 800476c:	eb18 0308 	adds.w	r3, r8, r8
 8004770:	eb49 0409 	adc.w	r4, r9, r9
 8004774:	4698      	mov	r8, r3
 8004776:	46a1      	mov	r9, r4
 8004778:	eb18 0805 	adds.w	r8, r8, r5
 800477c:	eb49 0906 	adc.w	r9, r9, r6
 8004780:	f04f 0100 	mov.w	r1, #0
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800478c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004790:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004794:	4688      	mov	r8, r1
 8004796:	4691      	mov	r9, r2
 8004798:	eb18 0005 	adds.w	r0, r8, r5
 800479c:	eb49 0106 	adc.w	r1, r9, r6
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	461d      	mov	r5, r3
 80047a6:	f04f 0600 	mov.w	r6, #0
 80047aa:	196b      	adds	r3, r5, r5
 80047ac:	eb46 0406 	adc.w	r4, r6, r6
 80047b0:	461a      	mov	r2, r3
 80047b2:	4623      	mov	r3, r4
 80047b4:	f7fc fa50 	bl	8000c58 <__aeabi_uldivmod>
 80047b8:	4603      	mov	r3, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	461a      	mov	r2, r3
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <UART_SetConfig+0x384>)
 80047c0:	fba3 2302 	umull	r2, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	461d      	mov	r5, r3
 80047ce:	f04f 0600 	mov.w	r6, #0
 80047d2:	46a9      	mov	r9, r5
 80047d4:	46b2      	mov	sl, r6
 80047d6:	eb19 0309 	adds.w	r3, r9, r9
 80047da:	eb4a 040a 	adc.w	r4, sl, sl
 80047de:	4699      	mov	r9, r3
 80047e0:	46a2      	mov	sl, r4
 80047e2:	eb19 0905 	adds.w	r9, r9, r5
 80047e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80047ea:	f04f 0100 	mov.w	r1, #0
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047fe:	4689      	mov	r9, r1
 8004800:	4692      	mov	sl, r2
 8004802:	eb19 0005 	adds.w	r0, r9, r5
 8004806:	eb4a 0106 	adc.w	r1, sl, r6
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	461d      	mov	r5, r3
 8004810:	f04f 0600 	mov.w	r6, #0
 8004814:	196b      	adds	r3, r5, r5
 8004816:	eb46 0406 	adc.w	r4, r6, r6
 800481a:	461a      	mov	r2, r3
 800481c:	4623      	mov	r3, r4
 800481e:	f7fc fa1b 	bl	8000c58 <__aeabi_uldivmod>
 8004822:	4603      	mov	r3, r0
 8004824:	460c      	mov	r4, r1
 8004826:	461a      	mov	r2, r3
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <UART_SetConfig+0x384>)
 800482a:	fba3 1302 	umull	r1, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2164      	movs	r1, #100	; 0x64
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	3332      	adds	r3, #50	; 0x32
 800483c:	4a27      	ldr	r2, [pc, #156]	; (80048dc <UART_SetConfig+0x384>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800484a:	4498      	add	r8, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	461d      	mov	r5, r3
 8004850:	f04f 0600 	mov.w	r6, #0
 8004854:	46a9      	mov	r9, r5
 8004856:	46b2      	mov	sl, r6
 8004858:	eb19 0309 	adds.w	r3, r9, r9
 800485c:	eb4a 040a 	adc.w	r4, sl, sl
 8004860:	4699      	mov	r9, r3
 8004862:	46a2      	mov	sl, r4
 8004864:	eb19 0905 	adds.w	r9, r9, r5
 8004868:	eb4a 0a06 	adc.w	sl, sl, r6
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004878:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800487c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004880:	4689      	mov	r9, r1
 8004882:	4692      	mov	sl, r2
 8004884:	eb19 0005 	adds.w	r0, r9, r5
 8004888:	eb4a 0106 	adc.w	r1, sl, r6
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	461d      	mov	r5, r3
 8004892:	f04f 0600 	mov.w	r6, #0
 8004896:	196b      	adds	r3, r5, r5
 8004898:	eb46 0406 	adc.w	r4, r6, r6
 800489c:	461a      	mov	r2, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	f7fc f9da 	bl	8000c58 <__aeabi_uldivmod>
 80048a4:	4603      	mov	r3, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <UART_SetConfig+0x384>)
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	2164      	movs	r1, #100	; 0x64
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	3332      	adds	r3, #50	; 0x32
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <UART_SetConfig+0x384>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	f003 0207 	and.w	r2, r3, #7
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4442      	add	r2, r8
 80048d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048d2:	e1b2      	b.n	8004c3a <UART_SetConfig+0x6e2>
 80048d4:	40011000 	.word	0x40011000
 80048d8:	40011400 	.word	0x40011400
 80048dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4ad7      	ldr	r2, [pc, #860]	; (8004c44 <UART_SetConfig+0x6ec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d005      	beq.n	80048f6 <UART_SetConfig+0x39e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4ad6      	ldr	r2, [pc, #856]	; (8004c48 <UART_SetConfig+0x6f0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f040 80d1 	bne.w	8004a98 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f6:	f7ff fa65 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 80048fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	469a      	mov	sl, r3
 8004900:	f04f 0b00 	mov.w	fp, #0
 8004904:	46d0      	mov	r8, sl
 8004906:	46d9      	mov	r9, fp
 8004908:	eb18 0308 	adds.w	r3, r8, r8
 800490c:	eb49 0409 	adc.w	r4, r9, r9
 8004910:	4698      	mov	r8, r3
 8004912:	46a1      	mov	r9, r4
 8004914:	eb18 080a 	adds.w	r8, r8, sl
 8004918:	eb49 090b 	adc.w	r9, r9, fp
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004928:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800492c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004930:	4688      	mov	r8, r1
 8004932:	4691      	mov	r9, r2
 8004934:	eb1a 0508 	adds.w	r5, sl, r8
 8004938:	eb4b 0609 	adc.w	r6, fp, r9
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	f04f 0400 	mov.w	r4, #0
 800494e:	0094      	lsls	r4, r2, #2
 8004950:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004954:	008b      	lsls	r3, r1, #2
 8004956:	461a      	mov	r2, r3
 8004958:	4623      	mov	r3, r4
 800495a:	4628      	mov	r0, r5
 800495c:	4631      	mov	r1, r6
 800495e:	f7fc f97b 	bl	8000c58 <__aeabi_uldivmod>
 8004962:	4603      	mov	r3, r0
 8004964:	460c      	mov	r4, r1
 8004966:	461a      	mov	r2, r3
 8004968:	4bb8      	ldr	r3, [pc, #736]	; (8004c4c <UART_SetConfig+0x6f4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	469b      	mov	fp, r3
 8004978:	f04f 0c00 	mov.w	ip, #0
 800497c:	46d9      	mov	r9, fp
 800497e:	46e2      	mov	sl, ip
 8004980:	eb19 0309 	adds.w	r3, r9, r9
 8004984:	eb4a 040a 	adc.w	r4, sl, sl
 8004988:	4699      	mov	r9, r3
 800498a:	46a2      	mov	sl, r4
 800498c:	eb19 090b 	adds.w	r9, r9, fp
 8004990:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049a8:	4689      	mov	r9, r1
 80049aa:	4692      	mov	sl, r2
 80049ac:	eb1b 0509 	adds.w	r5, fp, r9
 80049b0:	eb4c 060a 	adc.w	r6, ip, sl
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	f04f 0400 	mov.w	r4, #0
 80049c6:	0094      	lsls	r4, r2, #2
 80049c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049cc:	008b      	lsls	r3, r1, #2
 80049ce:	461a      	mov	r2, r3
 80049d0:	4623      	mov	r3, r4
 80049d2:	4628      	mov	r0, r5
 80049d4:	4631      	mov	r1, r6
 80049d6:	f7fc f93f 	bl	8000c58 <__aeabi_uldivmod>
 80049da:	4603      	mov	r3, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	461a      	mov	r2, r3
 80049e0:	4b9a      	ldr	r3, [pc, #616]	; (8004c4c <UART_SetConfig+0x6f4>)
 80049e2:	fba3 1302 	umull	r1, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2164      	movs	r1, #100	; 0x64
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	3332      	adds	r3, #50	; 0x32
 80049f4:	4a95      	ldr	r2, [pc, #596]	; (8004c4c <UART_SetConfig+0x6f4>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	4498      	add	r8, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	469b      	mov	fp, r3
 8004a06:	f04f 0c00 	mov.w	ip, #0
 8004a0a:	46d9      	mov	r9, fp
 8004a0c:	46e2      	mov	sl, ip
 8004a0e:	eb19 0309 	adds.w	r3, r9, r9
 8004a12:	eb4a 040a 	adc.w	r4, sl, sl
 8004a16:	4699      	mov	r9, r3
 8004a18:	46a2      	mov	sl, r4
 8004a1a:	eb19 090b 	adds.w	r9, r9, fp
 8004a1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a36:	4689      	mov	r9, r1
 8004a38:	4692      	mov	sl, r2
 8004a3a:	eb1b 0509 	adds.w	r5, fp, r9
 8004a3e:	eb4c 060a 	adc.w	r6, ip, sl
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	0094      	lsls	r4, r2, #2
 8004a56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a5a:	008b      	lsls	r3, r1, #2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4623      	mov	r3, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	4631      	mov	r1, r6
 8004a64:	f7fc f8f8 	bl	8000c58 <__aeabi_uldivmod>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	; 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	3332      	adds	r3, #50	; 0x32
 8004a82:	4a72      	ldr	r2, [pc, #456]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4442      	add	r2, r8
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	e0d0      	b.n	8004c3a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7ff f980 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 8004a9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	f04f 0b00 	mov.w	fp, #0
 8004aa6:	46d0      	mov	r8, sl
 8004aa8:	46d9      	mov	r9, fp
 8004aaa:	eb18 0308 	adds.w	r3, r8, r8
 8004aae:	eb49 0409 	adc.w	r4, r9, r9
 8004ab2:	4698      	mov	r8, r3
 8004ab4:	46a1      	mov	r9, r4
 8004ab6:	eb18 080a 	adds.w	r8, r8, sl
 8004aba:	eb49 090b 	adc.w	r9, r9, fp
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004aca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ace:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ad2:	4688      	mov	r8, r1
 8004ad4:	4691      	mov	r9, r2
 8004ad6:	eb1a 0508 	adds.w	r5, sl, r8
 8004ada:	eb4b 0609 	adc.w	r6, fp, r9
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f04f 0400 	mov.w	r4, #0
 8004af0:	0094      	lsls	r4, r2, #2
 8004af2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004af6:	008b      	lsls	r3, r1, #2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	4631      	mov	r1, r6
 8004b00:	f7fc f8aa 	bl	8000c58 <__aeabi_uldivmod>
 8004b04:	4603      	mov	r3, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	469b      	mov	fp, r3
 8004b1a:	f04f 0c00 	mov.w	ip, #0
 8004b1e:	46d9      	mov	r9, fp
 8004b20:	46e2      	mov	sl, ip
 8004b22:	eb19 0309 	adds.w	r3, r9, r9
 8004b26:	eb4a 040a 	adc.w	r4, sl, sl
 8004b2a:	4699      	mov	r9, r3
 8004b2c:	46a2      	mov	sl, r4
 8004b2e:	eb19 090b 	adds.w	r9, r9, fp
 8004b32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	4692      	mov	sl, r2
 8004b4e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b52:	eb4c 060a 	adc.w	r6, ip, sl
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	0094      	lsls	r4, r2, #2
 8004b6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4623      	mov	r3, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	4631      	mov	r1, r6
 8004b78:	f7fc f86e 	bl	8000c58 <__aeabi_uldivmod>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2164      	movs	r1, #100	; 0x64
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba2:	4498      	add	r8, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	469b      	mov	fp, r3
 8004ba8:	f04f 0c00 	mov.w	ip, #0
 8004bac:	46d9      	mov	r9, fp
 8004bae:	46e2      	mov	sl, ip
 8004bb0:	eb19 0309 	adds.w	r3, r9, r9
 8004bb4:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb8:	4699      	mov	r9, r3
 8004bba:	46a2      	mov	sl, r4
 8004bbc:	eb19 090b 	adds.w	r9, r9, fp
 8004bc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd8:	4689      	mov	r9, r1
 8004bda:	4692      	mov	sl, r2
 8004bdc:	eb1b 0509 	adds.w	r5, fp, r9
 8004be0:	eb4c 060a 	adc.w	r6, ip, sl
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4619      	mov	r1, r3
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	f04f 0400 	mov.w	r4, #0
 8004bf6:	0094      	lsls	r4, r2, #2
 8004bf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4623      	mov	r3, r4
 8004c02:	4628      	mov	r0, r5
 8004c04:	4631      	mov	r1, r6
 8004c06:	f7fc f827 	bl	8000c58 <__aeabi_uldivmod>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004c12:	fba3 1302 	umull	r1, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2164      	movs	r1, #100	; 0x64
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 020f 	and.w	r2, r3, #15
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4442      	add	r2, r8
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	e7ff      	b.n	8004c3a <UART_SetConfig+0x6e2>
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c44:	40011000 	.word	0x40011000
 8004c48:	40011400 	.word	0x40011400
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <aiInit>:
/* static ai_u8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES]; */

/*
 * Bootstrap code
 */
int aiInit(void) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08e      	sub	sp, #56	; 0x38
 8004c54:	af00      	add	r7, sp, #0
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG /* or NULL */);
 8004c56:	2100      	movs	r1, #0
 8004c58:	482d      	ldr	r0, [pc, #180]	; (8004d10 <aiInit+0xc0>)
 8004c5a:	f000 f9d9 	bl	8005010 <ai_network_create>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
  if (err.type != AI_ERROR_NONE) {
 8004c62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <aiInit+0x34>
    printf("E: AI ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8004c6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c72:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004c76:	461a      	mov	r2, r3
 8004c78:	4826      	ldr	r0, [pc, #152]	; (8004d14 <aiInit+0xc4>)
 8004c7a:	f003 fd81 	bl	8008780 <iprintf>
    return -1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c82:	e040      	b.n	8004d06 <aiInit+0xb6>
    };

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <aiInit+0xc8>)
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	2301      	movs	r3, #1
 8004c8a:	813b      	strh	r3, [r7, #8]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	817b      	strh	r3, [r7, #10]
 8004c90:	2301      	movs	r3, #1
 8004c92:	81bb      	strh	r3, [r7, #12]
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <aiInit+0xcc>)
 8004c96:	613b      	str	r3, [r7, #16]
      AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8004c98:	f000 fa20 	bl	80050dc <ai_network_data_weights_get>
 8004c9c:	4603      	mov	r3, r0
  const ai_network_params params = {
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <aiInit+0xd0>)
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	843b      	strh	r3, [r7, #32]
 8004cac:	2301      	movs	r3, #1
 8004cae:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cb4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <aiInit+0xd4>)
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
      AI_NETWORK_DATA_ACTIVATIONS(activations) };

  if (!ai_network_init(network, &params)) {
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <aiInit+0xc0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1d3a      	adds	r2, r7, #4
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f9b6 	bl	800503c <ai_network_init>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f083 0301 	eor.w	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <aiInit+0xb4>
      err = ai_network_get_error(network);
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <aiInit+0xc0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f989 	bl	8004ff8 <ai_network_get_error>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
      printf("E: AI ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 8004cea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	480b      	ldr	r0, [pc, #44]	; (8004d28 <aiInit+0xd8>)
 8004cfa:	f003 fd41 	bl	8008780 <iprintf>
      return -1;
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d02:	e000      	b.n	8004d06 <aiInit+0xb6>
    }

  return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3738      	adds	r7, #56	; 0x38
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000e84 	.word	0x20000e84
 8004d14:	0800a7f0 	.word	0x0800a7f0
 8004d18:	40040440 	.word	0x40040440
 8004d1c:	0005ba98 	.word	0x0005ba98
 8004d20:	00040440 	.word	0x00040440
 8004d24:	20000e88 	.word	0x20000e88
 8004d28:	0800a824 	.word	0x0800a824

08004d2c <aiRun>:

/*
 * Run inference code
 */
int aiRun(const void *in_data, void *out_data)
{
 8004d2c:	b5b0      	push	{r4, r5, r7, lr}
 8004d2e:	b090      	sub	sp, #64	; 0x40
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;
  ai_error err;

  /* 1 - Create the AI buffer IO handlers with the default definition */
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN ;
 8004d36:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <aiRun+0x90>)
 8004d38:	f107 0420 	add.w	r4, r7, #32
 8004d3c:	461d      	mov	r5, r3
 8004d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d46:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT ;
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <aiRun+0x94>)
 8004d4c:	f107 0408 	add.w	r4, r7, #8
 8004d50:	461d      	mov	r5, r3
 8004d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d5a:	e884 0003 	stmia.w	r4, {r0, r1}

  /* 2 - Update IO handlers with the data payload */
  ai_input[0].n_batches = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	84bb      	strh	r3, [r7, #36]	; 0x24
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
  ai_output[0].n_batches = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	81bb      	strh	r3, [r7, #12]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	61bb      	str	r3, [r7, #24]

  /* 3 - Perform the inference */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <aiRun+0x98>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f107 0208 	add.w	r2, r7, #8
 8004d76:	f107 0120 	add.w	r1, r7, #32
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f99d 	bl	80050ba <ai_network_run>
 8004d80:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (n_batch != 1) {
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d013      	beq.n	8004db0 <aiRun+0x84>
      err = ai_network_get_error(network);
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <aiRun+0x98>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f933 	bl	8004ff8 <ai_network_get_error>
 8004d92:	4603      	mov	r3, r0
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
      printf("E: AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8004d96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004da2:	461a      	mov	r2, r3
 8004da4:	4808      	ldr	r0, [pc, #32]	; (8004dc8 <aiRun+0x9c>)
 8004da6:	f003 fceb 	bl	8008780 <iprintf>
      return -1;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dae:	e000      	b.n	8004db2 <aiRun+0x86>
  };

  return 0;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3740      	adds	r7, #64	; 0x40
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	0800a884 	.word	0x0800a884
 8004dc0:	0800a89c 	.word	0x0800a89c
 8004dc4:	20000e84 	.word	0x20000e84
 8004dc8:	0800a854 	.word	0x0800a854

08004dcc <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	3303      	adds	r3, #3
 8004ddc:	f023 0303 	bic.w	r3, r3, #3
 8004de0:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_1_scratch0_array.data = AI_PTR(activations + 0);
 8004de2:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <network_configure_activations+0xa8>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(activations + 0);
 8004de8:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <network_configure_activations+0xa8>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <network_configure_activations+0xac>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <network_configure_activations+0xac>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 2048);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e00:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <network_configure_activations+0xb0>)
 8004e02:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 2048);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <network_configure_activations+0xb0>)
 8004e0c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <network_configure_activations+0xb4>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8004e14:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <network_configure_activations+0xb4>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 512);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <network_configure_activations+0xb8>)
 8004e22:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 512);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e2a:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <network_configure_activations+0xb8>)
 8004e2c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 8004e2e:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <network_configure_activations+0xbc>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 8004e34:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <network_configure_activations+0xbc>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(activations + 512);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <network_configure_activations+0xc0>)
 8004e42:	6093      	str	r3, [r2, #8]
    dense_2_nl_output_array.data_start = AI_PTR(activations + 512);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <network_configure_activations+0xc0>)
 8004e4c:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 8004e4e:	4a10      	ldr	r2, [pc, #64]	; (8004e90 <network_configure_activations+0xc4>)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 8004e54:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <network_configure_activations+0xc4>)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(NULL);
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <network_configure_activations+0xc8>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	609a      	str	r2, [r3, #8]
    dense_3_nl_output_array.data_start = AI_PTR(NULL);
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <network_configure_activations+0xc8>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004e66:	2301      	movs	r3, #1
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	2000006c 	.word	0x2000006c
 8004e78:	200000fc 	.word	0x200000fc
 8004e7c:	2000010c 	.word	0x2000010c
 8004e80:	2000011c 	.word	0x2000011c
 8004e84:	2000012c 	.word	0x2000012c
 8004e88:	2000013c 	.word	0x2000013c
 8004e8c:	2000014c 	.word	0x2000014c
 8004e90:	2000015c 	.word	0x2000015c
 8004e94:	2000016c 	.word	0x2000016c

08004e98 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ea8:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <network_configure_weights+0x140>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb0:	4a49      	ldr	r2, [pc, #292]	; (8004fd8 <network_configure_weights+0x140>)
 8004eb2:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 375424);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 23b7 	add.w	r3, r3, #374784	; 0x5b800
 8004eba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ebe:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <network_configure_weights+0x140>)
 8004ec0:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 375424);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 23b7 	add.w	r3, r3, #374784	; 0x5b800
 8004ec8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ecc:	4a42      	ldr	r2, [pc, #264]	; (8004fd8 <network_configure_weights+0x140>)
 8004ece:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ed0:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <network_configure_weights+0x144>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed8:	4a40      	ldr	r2, [pc, #256]	; (8004fdc <network_configure_weights+0x144>)
 8004eda:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 372352);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 23b5 	add.w	r3, r3, #370688	; 0x5a800
 8004ee2:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8004ee6:	4a3d      	ldr	r2, [pc, #244]	; (8004fdc <network_configure_weights+0x144>)
 8004ee8:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 372352);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 23b5 	add.w	r3, r3, #370688	; 0x5a800
 8004ef0:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8004ef4:	4a39      	ldr	r2, [pc, #228]	; (8004fdc <network_configure_weights+0x144>)
 8004ef6:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <network_configure_weights+0x148>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f00:	4a37      	ldr	r2, [pc, #220]	; (8004fe0 <network_configure_weights+0x148>)
 8004f02:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 371840);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 23b5 	add.w	r3, r3, #370688	; 0x5a800
 8004f0a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004f0e:	4a34      	ldr	r2, [pc, #208]	; (8004fe0 <network_configure_weights+0x148>)
 8004f10:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 371840);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 23b5 	add.w	r3, r3, #370688	; 0x5a800
 8004f18:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004f1c:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <network_configure_weights+0x148>)
 8004f1e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f20:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <network_configure_weights+0x14c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f28:	4a2e      	ldr	r2, [pc, #184]	; (8004fe4 <network_configure_weights+0x14c>)
 8004f2a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 363648);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 23b1 	add.w	r3, r3, #362496	; 0x58800
 8004f32:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004f36:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <network_configure_weights+0x14c>)
 8004f38:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 363584);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 23b1 	add.w	r3, r3, #362496	; 0x58800
 8004f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <network_configure_weights+0x14c>)
 8004f46:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <network_configure_weights+0x150>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <network_configure_weights+0x150>)
 8004f52:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 363072);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 23b1 	add.w	r3, r3, #362496	; 0x58800
 8004f5a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004f5e:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <network_configure_weights+0x150>)
 8004f60:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 363072);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 23b1 	add.w	r3, r3, #362496	; 0x58800
 8004f68:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <network_configure_weights+0x150>)
 8004f6e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <network_configure_weights+0x154>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <network_configure_weights+0x154>)
 8004f7a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 2624);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8004f82:	4a1a      	ldr	r2, [pc, #104]	; (8004fec <network_configure_weights+0x154>)
 8004f84:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 2560);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <network_configure_weights+0x154>)
 8004f8e:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <network_configure_weights+0x158>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <network_configure_weights+0x158>)
 8004f9a:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 2048);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <network_configure_weights+0x158>)
 8004fa4:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 2048);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fac:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <network_configure_weights+0x158>)
 8004fae:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <network_configure_weights+0x15c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <network_configure_weights+0x15c>)
 8004fba:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <network_configure_weights+0x15c>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 8004fc2:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <network_configure_weights+0x15c>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004fc8:	2301      	movs	r3, #1
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	2000007c 	.word	0x2000007c
 8004fdc:	2000008c 	.word	0x2000008c
 8004fe0:	2000009c 	.word	0x2000009c
 8004fe4:	200000ac 	.word	0x200000ac
 8004fe8:	200000bc 	.word	0x200000bc
 8004fec:	200000cc 	.word	0x200000cc
 8004ff0:	200000dc 	.word	0x200000dc
 8004ff4:	200000ec 	.word	0x200000ec

08004ff8 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f895 	bl	8005130 <ai_platform_network_get_error>
 8005006:	4603      	mov	r3, r0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800501a:	2300      	movs	r3, #0
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	2303      	movs	r3, #3
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2301      	movs	r3, #1
 8005024:	4a04      	ldr	r2, [pc, #16]	; (8005038 <ai_network_create+0x28>)
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8b3 	bl	8005194 <ai_platform_network_create>
 800502e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	2000000c 	.word	0x2000000c

0800503c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f8fb 	bl	8005244 <ai_platform_network_init>
 800504e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <ai_network_init+0x1e>
 8005056:	2300      	movs	r3, #0
 8005058:	e02b      	b.n	80050b2 <ai_network_init+0x76>

  ai_bool ok = true;
 800505a:	2301      	movs	r3, #1
 800505c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff18 	bl	8004e98 <network_configure_weights>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3318      	adds	r3, #24
 800507e:	4619      	mov	r1, r3
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff fea3 	bl	8004dcc <network_configure_activations>
 8005086:	4603      	mov	r3, r0
 8005088:	461a      	mov	r2, r3
 800508a:	7afb      	ldrb	r3, [r7, #11]
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f951 	bl	8005340 <ai_platform_network_post_init>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	7afb      	ldrb	r3, [r7, #11]
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	72fb      	strb	r3, [r7, #11]

  return ok;
 80050b0:	7afb      	ldrb	r3, [r7, #11]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f980 	bl	80053d0 <ai_platform_network_process>
 80050d0:	4603      	mov	r3, r0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
    0x87, 0xd6, 0x80, 0x3e, 0xa2, 0x72, 0x82, 0x3e, 0x5a, 0x88,
    0x41, 0xbf, 0xc6, 0x7d, 0x69, 0x3e, 0x18, 0x87, 0x37,
    0xbe, 0x83, 0x63, 0x0f, 0x3f, 0x51, 0xa1, 0xdd, 0xbe
  };

  return AI_HANDLE_PTR(s_network_weights);
 80050e0:	4b02      	ldr	r3, [pc, #8]	; (80050ec <ai_network_data_weights_get+0x10>)

}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	0800a908 	.word	0x0800a908

080050f0 <_platform_network_state_setup.isra.1>:
 80050f0:	b430      	push	{r4, r5}
 80050f2:	68dd      	ldr	r5, [r3, #12]
 80050f4:	695c      	ldr	r4, [r3, #20]
 80050f6:	68ed      	ldr	r5, [r5, #12]
 80050f8:	68e4      	ldr	r4, [r4, #12]
 80050fa:	fb04 f405 	mul.w	r4, r4, r5
 80050fe:	6084      	str	r4, [r0, #8]
 8005100:	8809      	ldrh	r1, [r1, #0]
 8005102:	fb04 f401 	mul.w	r4, r4, r1
 8005106:	60c4      	str	r4, [r0, #12]
 8005108:	6811      	ldr	r1, [r2, #0]
 800510a:	6041      	str	r1, [r0, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	4414      	add	r4, r2
 8005110:	6004      	str	r4, [r0, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	6814      	ldr	r4, [r2, #0]
 8005116:	00a4      	lsls	r4, r4, #2
 8005118:	d407      	bmi.n	800512a <_platform_network_state_setup.isra.1+0x3a>
 800511a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800511e:	1b64      	subs	r4, r4, r5
 8005120:	4421      	add	r1, r4
 8005122:	6091      	str	r1, [r2, #8]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	6842      	ldr	r2, [r0, #4]
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	bc30      	pop	{r4, r5}
 800512c:	4770      	bx	lr
	...

08005130 <ai_platform_network_get_error>:
 8005130:	b410      	push	{r4}
 8005132:	b120      	cbz	r0, 800513e <ai_platform_network_get_error+0xe>
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <ai_platform_network_get_error+0x4c>)
 8005136:	6802      	ldr	r2, [r0, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	bf18      	it	ne
 800513c:	2000      	movne	r0, #0
 800513e:	4910      	ldr	r1, [pc, #64]	; (8005180 <ai_platform_network_get_error+0x50>)
 8005140:	4a10      	ldr	r2, [pc, #64]	; (8005184 <ai_platform_network_get_error+0x54>)
 8005142:	680b      	ldr	r3, [r1, #0]
 8005144:	2401      	movs	r4, #1
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	600b      	str	r3, [r1, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	6014      	str	r4, [r2, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	2a00      	cmp	r2, #0
 8005154:	d1fc      	bne.n	8005150 <ai_platform_network_get_error+0x20>
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <ai_platform_network_get_error+0x58>)
 8005158:	4a0c      	ldr	r2, [pc, #48]	; (800518c <ai_platform_network_get_error+0x5c>)
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <ai_platform_network_get_error+0x60>)
 8005160:	429a      	cmp	r2, r3
 8005162:	d000      	beq.n	8005166 <ai_platform_network_get_error+0x36>
 8005164:	e7fe      	b.n	8005164 <ai_platform_network_get_error+0x34>
 8005166:	b120      	cbz	r0, 8005172 <ai_platform_network_get_error+0x42>
 8005168:	3010      	adds	r0, #16
 800516a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516e:	f000 bb3b 	b.w	80057e8 <core_get_error>
 8005172:	f241 0010 	movw	r0, #4112	; 0x1010
 8005176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	a1c00100 	.word	0xa1c00100
 8005180:	e0002000 	.word	0xe0002000
 8005184:	40023008 	.word	0x40023008
 8005188:	40023000 	.word	0x40023000
 800518c:	f407a5c2 	.word	0xf407a5c2
 8005190:	b5e8b5cd 	.word	0xb5e8b5cd

08005194 <ai_platform_network_create>:
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	4e23      	ldr	r6, [pc, #140]	; (8005228 <ai_platform_network_create+0x94>)
 800519a:	4924      	ldr	r1, [pc, #144]	; (800522c <ai_platform_network_create+0x98>)
 800519c:	6835      	ldr	r5, [r6, #0]
 800519e:	b082      	sub	sp, #8
 80051a0:	f025 0501 	bic.w	r5, r5, #1
 80051a4:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80051a8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80051ac:	6035      	str	r5, [r6, #0]
 80051ae:	2501      	movs	r5, #1
 80051b0:	600d      	str	r5, [r1, #0]
 80051b2:	680d      	ldr	r5, [r1, #0]
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	d1fc      	bne.n	80051b2 <ai_platform_network_create+0x1e>
 80051b8:	491d      	ldr	r1, [pc, #116]	; (8005230 <ai_platform_network_create+0x9c>)
 80051ba:	4e1e      	ldr	r6, [pc, #120]	; (8005234 <ai_platform_network_create+0xa0>)
 80051bc:	600e      	str	r6, [r1, #0]
 80051be:	680e      	ldr	r6, [r1, #0]
 80051c0:	491d      	ldr	r1, [pc, #116]	; (8005238 <ai_platform_network_create+0xa4>)
 80051c2:	428e      	cmp	r6, r1
 80051c4:	d000      	beq.n	80051c8 <ai_platform_network_create+0x34>
 80051c6:	e7fe      	b.n	80051c6 <ai_platform_network_create+0x32>
 80051c8:	b1d0      	cbz	r0, 8005200 <ai_platform_network_create+0x6c>
 80051ca:	4698      	mov	r8, r3
 80051cc:	4613      	mov	r3, r2
 80051ce:	4a1b      	ldr	r2, [pc, #108]	; (800523c <ai_platform_network_create+0xa8>)
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	6003      	str	r3, [r0, #0]
 80051d4:	4606      	mov	r6, r0
 80051d6:	f000 fb05 	bl	80057e4 <core_init>
 80051da:	b1b0      	cbz	r0, 800520a <ai_platform_network_create+0x76>
 80051dc:	0223      	lsls	r3, r4, #8
 80051de:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80051e2:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80051e6:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80051ea:	d910      	bls.n	800520e <ai_platform_network_create+0x7a>
 80051ec:	2201      	movs	r2, #1
 80051ee:	2300      	movs	r3, #0
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	2310      	movs	r3, #16
 80051f4:	2000      	movs	r0, #0
 80051f6:	f362 0007 	bfi	r0, r2, #0, #8
 80051fa:	f363 201f 	bfi	r0, r3, #8, #24
 80051fe:	e001      	b.n	8005204 <ai_platform_network_create+0x70>
 8005200:	f241 0010 	movw	r0, #4112	; 0x1010
 8005204:	b002      	add	sp, #8
 8005206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520a:	2230      	movs	r2, #48	; 0x30
 800520c:	e7ef      	b.n	80051ee <ai_platform_network_create+0x5a>
 800520e:	a802      	add	r0, sp, #8
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <ai_platform_network_create+0xac>)
 8005212:	f840 3d04 	str.w	r3, [r0, #-4]!
 8005216:	f002 fb3d 	bl	8007894 <ai_check_custom_types>
 800521a:	b110      	cbz	r0, 8005222 <ai_platform_network_create+0x8e>
 800521c:	462b      	mov	r3, r5
 800521e:	462a      	mov	r2, r5
 8005220:	e7e8      	b.n	80051f4 <ai_platform_network_create+0x60>
 8005222:	2202      	movs	r2, #2
 8005224:	e7e3      	b.n	80051ee <ai_platform_network_create+0x5a>
 8005226:	bf00      	nop
 8005228:	e0002000 	.word	0xe0002000
 800522c:	40023008 	.word	0x40023008
 8005230:	40023000 	.word	0x40023000
 8005234:	f407a5c2 	.word	0xf407a5c2
 8005238:	b5e8b5cd 	.word	0xb5e8b5cd
 800523c:	a1c00100 	.word	0xa1c00100
 8005240:	84048403 	.word	0x84048403

08005244 <ai_platform_network_init>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	460c      	mov	r4, r1
 8005248:	4605      	mov	r5, r0
 800524a:	b120      	cbz	r0, 8005256 <ai_platform_network_init+0x12>
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <ai_platform_network_init+0xe4>)
 800524e:	6802      	ldr	r2, [r0, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	bf18      	it	ne
 8005254:	2500      	movne	r5, #0
 8005256:	4935      	ldr	r1, [pc, #212]	; (800532c <ai_platform_network_init+0xe8>)
 8005258:	4a35      	ldr	r2, [pc, #212]	; (8005330 <ai_platform_network_init+0xec>)
 800525a:	680b      	ldr	r3, [r1, #0]
 800525c:	2001      	movs	r0, #1
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	600b      	str	r3, [r1, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	6010      	str	r0, [r2, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2a00      	cmp	r2, #0
 800526c:	d1fc      	bne.n	8005268 <ai_platform_network_init+0x24>
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <ai_platform_network_init+0xf0>)
 8005270:	4a31      	ldr	r2, [pc, #196]	; (8005338 <ai_platform_network_init+0xf4>)
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <ai_platform_network_init+0xf8>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d000      	beq.n	800527e <ai_platform_network_init+0x3a>
 800527c:	e7fe      	b.n	800527c <ai_platform_network_init+0x38>
 800527e:	b33d      	cbz	r5, 80052d0 <ai_platform_network_init+0x8c>
 8005280:	b344      	cbz	r4, 80052d4 <ai_platform_network_init+0x90>
 8005282:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005284:	6926      	ldr	r6, [r4, #16]
 8005286:	2f00      	cmp	r7, #0
 8005288:	d03d      	beq.n	8005306 <ai_platform_network_init+0xc2>
 800528a:	b35e      	cbz	r6, 80052e4 <ai_platform_network_init+0xa0>
 800528c:	4627      	mov	r7, r4
 800528e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005290:	f105 0618 	add.w	r6, r5, #24
 8005294:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005296:	e897 0003 	ldmia.w	r7, {r0, r1}
 800529a:	e886 0003 	stmia.w	r6, {r0, r1}
 800529e:	3418      	adds	r4, #24
 80052a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80052a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80052a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052ac:	e886 0003 	stmia.w	r6, {r0, r1}
 80052b0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80052b2:	2303      	movs	r3, #3
 80052b4:	60eb      	str	r3, [r5, #12]
 80052b6:	b15a      	cbz	r2, 80052d0 <ai_platform_network_init+0x8c>
 80052b8:	68d3      	ldr	r3, [r2, #12]
 80052ba:	6095      	str	r5, [r2, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d007      	beq.n	80052d0 <ai_platform_network_init+0x8c>
 80052c0:	b133      	cbz	r3, 80052d0 <ai_platform_network_init+0x8c>
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	609d      	str	r5, [r3, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d002      	beq.n	80052d0 <ai_platform_network_init+0x8c>
 80052ca:	4613      	mov	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f8      	bne.n	80052c2 <ai_platform_network_init+0x7e>
 80052d0:	4628      	mov	r0, r5
 80052d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d4:	f105 0010 	add.w	r0, r5, #16
 80052d8:	2211      	movs	r2, #17
 80052da:	2110      	movs	r1, #16
 80052dc:	f000 fa8a 	bl	80057f4 <core_set_error>
 80052e0:	4625      	mov	r5, r4
 80052e2:	e7f5      	b.n	80052d0 <ai_platform_network_init+0x8c>
 80052e4:	8921      	ldrh	r1, [r4, #8]
 80052e6:	88e2      	ldrh	r2, [r4, #6]
 80052e8:	68e3      	ldr	r3, [r4, #12]
 80052ea:	fb02 f201 	mul.w	r2, r2, r1
 80052ee:	fb03 f302 	mul.w	r3, r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ca      	beq.n	800528c <ai_platform_network_init+0x48>
 80052f6:	f105 0010 	add.w	r0, r5, #16
 80052fa:	2212      	movs	r2, #18
 80052fc:	2110      	movs	r1, #16
 80052fe:	f000 fa79 	bl	80057f4 <core_set_error>
 8005302:	4635      	mov	r5, r6
 8005304:	e7e4      	b.n	80052d0 <ai_platform_network_init+0x8c>
 8005306:	8c21      	ldrh	r1, [r4, #32]
 8005308:	8be2      	ldrh	r2, [r4, #30]
 800530a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530c:	fb02 f201 	mul.w	r2, r2, r1
 8005310:	fb03 f302 	mul.w	r3, r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0b8      	beq.n	800528a <ai_platform_network_init+0x46>
 8005318:	f105 0010 	add.w	r0, r5, #16
 800531c:	2213      	movs	r2, #19
 800531e:	2110      	movs	r1, #16
 8005320:	f000 fa68 	bl	80057f4 <core_set_error>
 8005324:	463d      	mov	r5, r7
 8005326:	e7d3      	b.n	80052d0 <ai_platform_network_init+0x8c>
 8005328:	a1c00100 	.word	0xa1c00100
 800532c:	e0002000 	.word	0xe0002000
 8005330:	40023008 	.word	0x40023008
 8005334:	40023000 	.word	0x40023000
 8005338:	f407a5c2 	.word	0xf407a5c2
 800533c:	b5e8b5cd 	.word	0xb5e8b5cd

08005340 <ai_platform_network_post_init>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4604      	mov	r4, r0
 8005344:	b120      	cbz	r0, 8005350 <ai_platform_network_post_init+0x10>
 8005346:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <ai_platform_network_post_init+0x78>)
 8005348:	6802      	ldr	r2, [r0, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	bf18      	it	ne
 800534e:	2400      	movne	r4, #0
 8005350:	491a      	ldr	r1, [pc, #104]	; (80053bc <ai_platform_network_post_init+0x7c>)
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <ai_platform_network_post_init+0x80>)
 8005354:	680b      	ldr	r3, [r1, #0]
 8005356:	2001      	movs	r0, #1
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	600b      	str	r3, [r1, #0]
 800535e:	4613      	mov	r3, r2
 8005360:	6010      	str	r0, [r2, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2a00      	cmp	r2, #0
 8005366:	d1fc      	bne.n	8005362 <ai_platform_network_post_init+0x22>
 8005368:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <ai_platform_network_post_init+0x84>)
 800536a:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <ai_platform_network_post_init+0x88>)
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b16      	ldr	r3, [pc, #88]	; (80053cc <ai_platform_network_post_init+0x8c>)
 8005372:	429a      	cmp	r2, r3
 8005374:	d000      	beq.n	8005378 <ai_platform_network_post_init+0x38>
 8005376:	e7fe      	b.n	8005376 <ai_platform_network_post_init+0x36>
 8005378:	b1a4      	cbz	r4, 80053a4 <ai_platform_network_post_init+0x64>
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	f013 0502 	ands.w	r5, r3, #2
 8005380:	d012      	beq.n	80053a8 <ai_platform_network_post_init+0x68>
 8005382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005384:	b163      	cbz	r3, 80053a0 <ai_platform_network_post_init+0x60>
 8005386:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8005388:	b91d      	cbnz	r5, 8005392 <ai_platform_network_post_init+0x52>
 800538a:	e009      	b.n	80053a0 <ai_platform_network_post_init+0x60>
 800538c:	461d      	mov	r5, r3
 800538e:	b13b      	cbz	r3, 80053a0 <ai_platform_network_post_init+0x60>
 8005390:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005392:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005394:	4629      	mov	r1, r5
 8005396:	2000      	movs	r0, #0
 8005398:	4798      	blx	r3
 800539a:	68eb      	ldr	r3, [r5, #12]
 800539c:	42ab      	cmp	r3, r5
 800539e:	d1f5      	bne.n	800538c <ai_platform_network_post_init+0x4c>
 80053a0:	2001      	movs	r0, #1
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	4620      	mov	r0, r4
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	f104 0010 	add.w	r0, r4, #16
 80053ac:	2210      	movs	r2, #16
 80053ae:	2111      	movs	r1, #17
 80053b0:	f000 fa20 	bl	80057f4 <core_set_error>
 80053b4:	4628      	mov	r0, r5
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	a1c00100 	.word	0xa1c00100
 80053bc:	e0002000 	.word	0xe0002000
 80053c0:	40023008 	.word	0x40023008
 80053c4:	40023000 	.word	0x40023000
 80053c8:	f407a5c2 	.word	0xf407a5c2
 80053cc:	b5e8b5cd 	.word	0xb5e8b5cd

080053d0 <ai_platform_network_process>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	b083      	sub	sp, #12
 80053d6:	4604      	mov	r4, r0
 80053d8:	9201      	str	r2, [sp, #4]
 80053da:	b120      	cbz	r0, 80053e6 <ai_platform_network_process+0x16>
 80053dc:	4ba5      	ldr	r3, [pc, #660]	; (8005674 <ai_platform_network_process+0x2a4>)
 80053de:	6802      	ldr	r2, [r0, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	bf18      	it	ne
 80053e4:	2400      	movne	r4, #0
 80053e6:	48a4      	ldr	r0, [pc, #656]	; (8005678 <ai_platform_network_process+0x2a8>)
 80053e8:	4ba4      	ldr	r3, [pc, #656]	; (800567c <ai_platform_network_process+0x2ac>)
 80053ea:	6802      	ldr	r2, [r0, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	6002      	str	r2, [r0, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1fc      	bne.n	80053f6 <ai_platform_network_process+0x26>
 80053fc:	4ba0      	ldr	r3, [pc, #640]	; (8005680 <ai_platform_network_process+0x2b0>)
 80053fe:	4aa1      	ldr	r2, [pc, #644]	; (8005684 <ai_platform_network_process+0x2b4>)
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4ba0      	ldr	r3, [pc, #640]	; (8005688 <ai_platform_network_process+0x2b8>)
 8005406:	429a      	cmp	r2, r3
 8005408:	d000      	beq.n	800540c <ai_platform_network_process+0x3c>
 800540a:	e7fe      	b.n	800540a <ai_platform_network_process+0x3a>
 800540c:	2c00      	cmp	r4, #0
 800540e:	d066      	beq.n	80054de <ai_platform_network_process+0x10e>
 8005410:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8005414:	b107      	cbz	r7, 8005418 <ai_platform_network_process+0x48>
 8005416:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8005418:	68e3      	ldr	r3, [r4, #12]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2600      	movs	r6, #0
 8005420:	2b03      	cmp	r3, #3
 8005422:	6166      	str	r6, [r4, #20]
 8005424:	f040 80fe 	bne.w	8005624 <ai_platform_network_process+0x254>
 8005428:	2900      	cmp	r1, #0
 800542a:	d07f      	beq.n	800552c <ai_platform_network_process+0x15c>
 800542c:	2f00      	cmp	r7, #0
 800542e:	d07d      	beq.n	800552c <ai_platform_network_process+0x15c>
 8005430:	883b      	ldrh	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d07a      	beq.n	800552c <ai_platform_network_process+0x15c>
 8005436:	460d      	mov	r5, r1
 8005438:	46a0      	mov	r8, r4
 800543a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800543e:	429e      	cmp	r6, r3
 8005440:	d27d      	bcs.n	800553e <ai_platform_network_process+0x16e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d07a      	beq.n	800553e <ai_platform_network_process+0x16e>
 8005448:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800544c:	2c00      	cmp	r4, #0
 800544e:	d076      	beq.n	800553e <ai_platform_network_process+0x16e>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8005458:	d067      	beq.n	800552a <ai_platform_network_process+0x15a>
 800545a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800545e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005462:	69a0      	ldr	r0, [r4, #24]
 8005464:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005468:	6841      	ldr	r1, [r0, #4]
 800546a:	fb0b f30e 	mul.w	r3, fp, lr
 800546e:	fb0c f303 	mul.w	r3, ip, r3
 8005472:	4299      	cmp	r1, r3
 8005474:	d350      	bcc.n	8005518 <ai_platform_network_process+0x148>
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	455a      	cmp	r2, fp
 800547c:	d14c      	bne.n	8005518 <ai_platform_network_process+0x148>
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	4572      	cmp	r2, lr
 8005482:	d149      	bne.n	8005518 <ai_platform_network_process+0x148>
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	459c      	cmp	ip, r3
 8005488:	d146      	bne.n	8005518 <ai_platform_network_process+0x148>
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	f002 fab2 	bl	80079f4 <ai_array_get_byte_size>
 8005490:	68e2      	ldr	r2, [r4, #12]
 8005492:	6963      	ldr	r3, [r4, #20]
 8005494:	68d2      	ldr	r2, [r2, #12]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	fb03 f302 	mul.w	r3, r3, r2
 800549c:	4298      	cmp	r0, r3
 800549e:	d33b      	bcc.n	8005518 <ai_platform_network_process+0x148>
 80054a0:	69a3      	ldr	r3, [r4, #24]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	f002 fa5a 	bl	800795c <ai_array_to_buffer_fmt>
 80054a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80054ac:	4043      	eors	r3, r0
 80054ae:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80054b2:	d128      	bne.n	8005506 <ai_platform_network_process+0x136>
 80054b4:	68eb      	ldr	r3, [r5, #12]
 80054b6:	b1f3      	cbz	r3, 80054f6 <ai_platform_network_process+0x126>
 80054b8:	f8b5 b000 	ldrh.w	fp, [r5]
 80054bc:	f1bb 0f00 	cmp.w	fp, #0
 80054c0:	d012      	beq.n	80054e8 <ai_platform_network_process+0x118>
 80054c2:	4623      	mov	r3, r4
 80054c4:	f105 020c 	add.w	r2, r5, #12
 80054c8:	4629      	mov	r1, r5
 80054ca:	4650      	mov	r0, sl
 80054cc:	f7ff fe10 	bl	80050f0 <_platform_network_state_setup.isra.1>
 80054d0:	45d9      	cmp	r9, fp
 80054d2:	883b      	ldrh	r3, [r7, #0]
 80054d4:	bf38      	it	cc
 80054d6:	46d9      	movcc	r9, fp
 80054d8:	3601      	adds	r6, #1
 80054da:	3518      	adds	r5, #24
 80054dc:	e7af      	b.n	800543e <ai_platform_network_process+0x6e>
 80054de:	46a3      	mov	fp, r4
 80054e0:	4658      	mov	r0, fp
 80054e2:	b003      	add	sp, #12
 80054e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e8:	f108 0010 	add.w	r0, r8, #16
 80054ec:	2221      	movs	r2, #33	; 0x21
 80054ee:	2112      	movs	r1, #18
 80054f0:	f000 f980 	bl	80057f4 <core_set_error>
 80054f4:	e7f4      	b.n	80054e0 <ai_platform_network_process+0x110>
 80054f6:	f108 0010 	add.w	r0, r8, #16
 80054fa:	2217      	movs	r2, #23
 80054fc:	2112      	movs	r1, #18
 80054fe:	469b      	mov	fp, r3
 8005500:	f000 f978 	bl	80057f4 <core_set_error>
 8005504:	e7ec      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005506:	f108 0010 	add.w	r0, r8, #16
 800550a:	2219      	movs	r2, #25
 800550c:	2112      	movs	r1, #18
 800550e:	f000 f971 	bl	80057f4 <core_set_error>
 8005512:	f04f 0b00 	mov.w	fp, #0
 8005516:	e7e3      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005518:	f108 0010 	add.w	r0, r8, #16
 800551c:	2218      	movs	r2, #24
 800551e:	2112      	movs	r1, #18
 8005520:	f000 f968 	bl	80057f4 <core_set_error>
 8005524:	f04f 0b00 	mov.w	fp, #0
 8005528:	e7da      	b.n	80054e0 <ai_platform_network_process+0x110>
 800552a:	4644      	mov	r4, r8
 800552c:	f104 0010 	add.w	r0, r4, #16
 8005530:	2217      	movs	r2, #23
 8005532:	2112      	movs	r1, #18
 8005534:	f000 f95e 	bl	80057f4 <core_set_error>
 8005538:	f04f 0b00 	mov.w	fp, #0
 800553c:	e7d0      	b.n	80054e0 <ai_platform_network_process+0x110>
 800553e:	9a01      	ldr	r2, [sp, #4]
 8005540:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8005544:	4644      	mov	r4, r8
 8005546:	2a00      	cmp	r2, #0
 8005548:	f000 80a4 	beq.w	8005694 <ai_platform_network_process+0x2c4>
 800554c:	2b01      	cmp	r3, #1
 800554e:	f240 8140 	bls.w	80057d2 <ai_platform_network_process+0x402>
 8005552:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8005556:	f118 0f0c 	cmn.w	r8, #12
 800555a:	f000 813a 	beq.w	80057d2 <ai_platform_network_process+0x402>
 800555e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8135 	beq.w	80057d2 <ai_platform_network_process+0x402>
 8005568:	3204      	adds	r2, #4
 800556a:	4615      	mov	r5, r2
 800556c:	2700      	movs	r7, #0
 800556e:	429f      	cmp	r7, r3
 8005570:	f080 808c 	bcs.w	800568c <ai_platform_network_process+0x2bc>
 8005574:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8087 	beq.w	800568c <ai_platform_network_process+0x2bc>
 800557e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005582:	2e00      	cmp	r6, #0
 8005584:	f000 8082 	beq.w	800568c <ai_platform_network_process+0x2bc>
 8005588:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8005592:	d067      	beq.n	8005664 <ai_platform_network_process+0x294>
 8005594:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005598:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800559c:	69b0      	ldr	r0, [r6, #24]
 800559e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80055a2:	6841      	ldr	r1, [r0, #4]
 80055a4:	fb0b f30e 	mul.w	r3, fp, lr
 80055a8:	fb0c f303 	mul.w	r3, ip, r3
 80055ac:	4299      	cmp	r1, r3
 80055ae:	f0c0 8110 	bcc.w	80057d2 <ai_platform_network_process+0x402>
 80055b2:	68f3      	ldr	r3, [r6, #12]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	455a      	cmp	r2, fp
 80055b8:	f040 810b 	bne.w	80057d2 <ai_platform_network_process+0x402>
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	4572      	cmp	r2, lr
 80055c0:	f040 8107 	bne.w	80057d2 <ai_platform_network_process+0x402>
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	459c      	cmp	ip, r3
 80055c8:	f040 8103 	bne.w	80057d2 <ai_platform_network_process+0x402>
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f002 fa11 	bl	80079f4 <ai_array_get_byte_size>
 80055d2:	68f2      	ldr	r2, [r6, #12]
 80055d4:	6973      	ldr	r3, [r6, #20]
 80055d6:	68d2      	ldr	r2, [r2, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	fb03 f302 	mul.w	r3, r3, r2
 80055de:	4298      	cmp	r0, r3
 80055e0:	f0c0 80f7 	bcc.w	80057d2 <ai_platform_network_process+0x402>
 80055e4:	69b3      	ldr	r3, [r6, #24]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	f002 f9b8 	bl	800795c <ai_array_to_buffer_fmt>
 80055ec:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80055f0:	4043      	eors	r3, r0
 80055f2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80055f6:	d12c      	bne.n	8005652 <ai_platform_network_process+0x282>
 80055f8:	68eb      	ldr	r3, [r5, #12]
 80055fa:	b313      	cbz	r3, 8005642 <ai_platform_network_process+0x272>
 80055fc:	f8b5 b000 	ldrh.w	fp, [r5]
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	d016      	beq.n	8005634 <ai_platform_network_process+0x264>
 8005606:	4633      	mov	r3, r6
 8005608:	f105 020c 	add.w	r2, r5, #12
 800560c:	4629      	mov	r1, r5
 800560e:	4650      	mov	r0, sl
 8005610:	f7ff fd6e 	bl	80050f0 <_platform_network_state_setup.isra.1>
 8005614:	45d9      	cmp	r9, fp
 8005616:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800561a:	bf38      	it	cc
 800561c:	46d9      	movcc	r9, fp
 800561e:	3701      	adds	r7, #1
 8005620:	3518      	adds	r5, #24
 8005622:	e7a4      	b.n	800556e <ai_platform_network_process+0x19e>
 8005624:	f104 0010 	add.w	r0, r4, #16
 8005628:	2230      	movs	r2, #48	; 0x30
 800562a:	2111      	movs	r1, #17
 800562c:	f000 f8e2 	bl	80057f4 <core_set_error>
 8005630:	46b3      	mov	fp, r6
 8005632:	e755      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005634:	f104 0010 	add.w	r0, r4, #16
 8005638:	2221      	movs	r2, #33	; 0x21
 800563a:	2113      	movs	r1, #19
 800563c:	f000 f8da 	bl	80057f4 <core_set_error>
 8005640:	e74e      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005642:	f104 0010 	add.w	r0, r4, #16
 8005646:	2217      	movs	r2, #23
 8005648:	2113      	movs	r1, #19
 800564a:	469b      	mov	fp, r3
 800564c:	f000 f8d2 	bl	80057f4 <core_set_error>
 8005650:	e746      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005652:	f104 0010 	add.w	r0, r4, #16
 8005656:	2219      	movs	r2, #25
 8005658:	2113      	movs	r1, #19
 800565a:	f000 f8cb 	bl	80057f4 <core_set_error>
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	e73d      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005664:	f104 0010 	add.w	r0, r4, #16
 8005668:	2217      	movs	r2, #23
 800566a:	2113      	movs	r1, #19
 800566c:	f000 f8c2 	bl	80057f4 <core_set_error>
 8005670:	46d3      	mov	fp, sl
 8005672:	e735      	b.n	80054e0 <ai_platform_network_process+0x110>
 8005674:	a1c00100 	.word	0xa1c00100
 8005678:	e0002000 	.word	0xe0002000
 800567c:	40023008 	.word	0x40023008
 8005680:	40023000 	.word	0x40023000
 8005684:	f407a5c2 	.word	0xf407a5c2
 8005688:	b5e8b5cd 	.word	0xb5e8b5cd
 800568c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005690:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8099 	beq.w	80057cc <ai_platform_network_process+0x3fc>
 800569a:	2b01      	cmp	r3, #1
 800569c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800569e:	f240 8093 	bls.w	80057c8 <ai_platform_network_process+0x3f8>
 80056a2:	f105 070c 	add.w	r7, r5, #12
 80056a6:	8ae0      	ldrh	r0, [r4, #22]
 80056a8:	8aa3      	ldrh	r3, [r4, #20]
 80056aa:	4283      	cmp	r3, r0
 80056ac:	d977      	bls.n	800579e <ai_platform_network_process+0x3ce>
 80056ae:	46a3      	mov	fp, r4
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	d032      	beq.n	800571a <ai_platform_network_process+0x34a>
 80056b4:	882b      	ldrh	r3, [r5, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02f      	beq.n	800571a <ai_platform_network_process+0x34a>
 80056ba:	686b      	ldr	r3, [r5, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02c      	beq.n	800571a <ai_platform_network_process+0x34a>
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f04f 0800 	mov.w	r8, #0
 80056c6:	b343      	cbz	r3, 800571a <ai_platform_network_process+0x34a>
 80056c8:	68a9      	ldr	r1, [r5, #8]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	f8d1 a000 	ldr.w	sl, [r1]
 80056d0:	6814      	ldr	r4, [r2, #0]
 80056d2:	6890      	ldr	r0, [r2, #8]
 80056d4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80056d8:	eb0a 0609 	add.w	r6, sl, r9
 80056dc:	00a4      	lsls	r4, r4, #2
 80056de:	6871      	ldr	r1, [r6, #4]
 80056e0:	d45f      	bmi.n	80057a2 <ai_platform_network_process+0x3d2>
 80056e2:	68d4      	ldr	r4, [r2, #12]
 80056e4:	1b00      	subs	r0, r0, r4
 80056e6:	4401      	add	r1, r0
 80056e8:	6091      	str	r1, [r2, #8]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	6872      	ldr	r2, [r6, #4]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80056f4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80056f8:	440b      	add	r3, r1
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bf24      	itt	cs
 80056fe:	68f3      	ldrcs	r3, [r6, #12]
 8005700:	1ad3      	subcs	r3, r2, r3
 8005702:	6073      	str	r3, [r6, #4]
 8005704:	882b      	ldrh	r3, [r5, #0]
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	4598      	cmp	r8, r3
 800570c:	d205      	bcs.n	800571a <ai_platform_network_process+0x34a>
 800570e:	686b      	ldr	r3, [r5, #4]
 8005710:	b11b      	cbz	r3, 800571a <ai_platform_network_process+0x34a>
 8005712:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1d6      	bne.n	80056c8 <ai_platform_network_process+0x2f8>
 800571a:	4658      	mov	r0, fp
 800571c:	f002 f8e4 	bl	80078e8 <ai_layers_forward_all>
 8005720:	2f00      	cmp	r7, #0
 8005722:	d032      	beq.n	800578a <ai_platform_network_process+0x3ba>
 8005724:	883b      	ldrh	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02f      	beq.n	800578a <ai_platform_network_process+0x3ba>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	b36b      	cbz	r3, 800578a <ai_platform_network_process+0x3ba>
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	b358      	cbz	r0, 800578a <ai_platform_network_process+0x3ba>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6981      	ldr	r1, [r0, #24]
 800573a:	f8d3 a000 	ldr.w	sl, [r3]
 800573e:	680c      	ldr	r4, [r1, #0]
 8005740:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005744:	eb0a 0609 	add.w	r6, sl, r9
 8005748:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800574c:	00a4      	lsls	r4, r4, #2
 800574e:	eb0c 0302 	add.w	r3, ip, r2
 8005752:	d42a      	bmi.n	80057aa <ai_platform_network_process+0x3da>
 8005754:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005758:	4293      	cmp	r3, r2
 800575a:	bf24      	itt	cs
 800575c:	68f3      	ldrcs	r3, [r6, #12]
 800575e:	1ad3      	subcs	r3, r2, r3
 8005760:	6073      	str	r3, [r6, #4]
 8005762:	6981      	ldr	r1, [r0, #24]
 8005764:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005768:	1b12      	subs	r2, r2, r4
 800576a:	4413      	add	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
 800576e:	6983      	ldr	r3, [r0, #24]
 8005770:	6872      	ldr	r2, [r6, #4]
 8005772:	60da      	str	r2, [r3, #12]
 8005774:	883b      	ldrh	r3, [r7, #0]
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	4598      	cmp	r8, r3
 800577c:	d205      	bcs.n	800578a <ai_platform_network_process+0x3ba>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	b11b      	cbz	r3, 800578a <ai_platform_network_process+0x3ba>
 8005782:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005786:	2800      	cmp	r0, #0
 8005788:	d1d5      	bne.n	8005736 <ai_platform_network_process+0x366>
 800578a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800578e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005792:	3001      	adds	r0, #1
 8005794:	b280      	uxth	r0, r0
 8005796:	4283      	cmp	r3, r0
 8005798:	f8ab 0016 	strh.w	r0, [fp, #22]
 800579c:	d888      	bhi.n	80056b0 <ai_platform_network_process+0x2e0>
 800579e:	4683      	mov	fp, r0
 80057a0:	e69e      	b.n	80054e0 <ai_platform_network_process+0x110>
 80057a2:	68b2      	ldr	r2, [r6, #8]
 80057a4:	f002 fad4 	bl	8007d50 <memcpy>
 80057a8:	e7a2      	b.n	80056f0 <ai_platform_network_process+0x320>
 80057aa:	6889      	ldr	r1, [r1, #8]
 80057ac:	4660      	mov	r0, ip
 80057ae:	f002 facf 	bl	8007d50 <memcpy>
 80057b2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80057b6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80057ba:	440b      	add	r3, r1
 80057bc:	4293      	cmp	r3, r2
 80057be:	bf24      	itt	cs
 80057c0:	68f3      	ldrcs	r3, [r6, #12]
 80057c2:	1ad3      	subcs	r3, r2, r3
 80057c4:	6073      	str	r3, [r6, #4]
 80057c6:	e7d5      	b.n	8005774 <ai_platform_network_process+0x3a4>
 80057c8:	2700      	movs	r7, #0
 80057ca:	e76c      	b.n	80056a6 <ai_platform_network_process+0x2d6>
 80057cc:	461d      	mov	r5, r3
 80057ce:	461f      	mov	r7, r3
 80057d0:	e769      	b.n	80056a6 <ai_platform_network_process+0x2d6>
 80057d2:	f104 0010 	add.w	r0, r4, #16
 80057d6:	2218      	movs	r2, #24
 80057d8:	2113      	movs	r1, #19
 80057da:	f000 f80b 	bl	80057f4 <core_set_error>
 80057de:	f04f 0b00 	mov.w	fp, #0
 80057e2:	e67d      	b.n	80054e0 <ai_platform_network_process+0x110>

080057e4 <core_init>:
 80057e4:	2001      	movs	r0, #1
 80057e6:	4770      	bx	lr

080057e8 <core_get_error>:
 80057e8:	4603      	mov	r3, r0
 80057ea:	2200      	movs	r2, #0
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <core_set_error>:
 80057f4:	7803      	ldrb	r3, [r0, #0]
 80057f6:	b933      	cbnz	r3, 8005806 <core_set_error+0x12>
 80057f8:	7001      	strb	r1, [r0, #0]
 80057fa:	6803      	ldr	r3, [r0, #0]
 80057fc:	f362 231f 	bfi	r3, r2, #8, #24
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	2001      	movs	r0, #1
 8005804:	4770      	bx	lr
 8005806:	2000      	movs	r0, #0
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop

0800580c <func_dummy>:
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <ai_dict8_dot_array_f32>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005818:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800581c:	f000 80c0 	beq.w	80059a0 <ai_dict8_dot_array_f32+0x190>
 8005820:	f101 0408 	add.w	r4, r1, #8
 8005824:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005828:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80059a8 <ai_dict8_dot_array_f32+0x198>
 800582c:	eb04 0e09 	add.w	lr, r4, r9
 8005830:	f103 0520 	add.w	r5, r3, #32
 8005834:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005838:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800583c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005840:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005844:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005848:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800584c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005850:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005854:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005858:	ed55 5a02 	vldr	s11, [r5, #-8]
 800585c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005860:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005864:	edd6 7a00 	vldr	s15, [r6]
 8005868:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800586c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005870:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005874:	ed9a 3a00 	vldr	s6, [sl]
 8005878:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800587c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005880:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005884:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005888:	ed97 3a00 	vldr	s6, [r7]
 800588c:	ed96 5a00 	vldr	s10, [r6]
 8005890:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005894:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005898:	eee3 7a04 	vfma.f32	s15, s6, s8
 800589c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80058a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80058a4:	ed9a 3a00 	vldr	s6, [sl]
 80058a8:	ed96 4a00 	vldr	s8, [r6]
 80058ac:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80058b0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80058b4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80058b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80058bc:	ed97 5a00 	vldr	s10, [r7]
 80058c0:	ed96 6a00 	vldr	s12, [r6]
 80058c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80058c8:	3408      	adds	r4, #8
 80058ca:	45a6      	cmp	lr, r4
 80058cc:	f105 0520 	add.w	r5, r5, #32
 80058d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80058d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80058d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80058dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058e0:	d1a8      	bne.n	8005834 <ai_dict8_dot_array_f32+0x24>
 80058e2:	4449      	add	r1, r9
 80058e4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80058e8:	f01c 0c07 	ands.w	ip, ip, #7
 80058ec:	d050      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 80058ee:	780c      	ldrb	r4, [r1, #0]
 80058f0:	edd3 6a00 	vldr	s13, [r3]
 80058f4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80058f8:	edd4 7a00 	vldr	s15, [r4]
 80058fc:	f1bc 0f01 	cmp.w	ip, #1
 8005900:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005904:	d044      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 8005906:	784c      	ldrb	r4, [r1, #1]
 8005908:	edd3 6a01 	vldr	s13, [r3, #4]
 800590c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005910:	edd4 7a00 	vldr	s15, [r4]
 8005914:	f1bc 0f02 	cmp.w	ip, #2
 8005918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800591c:	d038      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 800591e:	788c      	ldrb	r4, [r1, #2]
 8005920:	edd3 6a02 	vldr	s13, [r3, #8]
 8005924:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005928:	edd4 7a00 	vldr	s15, [r4]
 800592c:	f1bc 0f03 	cmp.w	ip, #3
 8005930:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005934:	d02c      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 8005936:	78cc      	ldrb	r4, [r1, #3]
 8005938:	edd3 6a03 	vldr	s13, [r3, #12]
 800593c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005940:	edd4 7a00 	vldr	s15, [r4]
 8005944:	f1bc 0f04 	cmp.w	ip, #4
 8005948:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800594c:	d020      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 800594e:	790c      	ldrb	r4, [r1, #4]
 8005950:	edd3 6a04 	vldr	s13, [r3, #16]
 8005954:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005958:	edd4 7a00 	vldr	s15, [r4]
 800595c:	f1bc 0f05 	cmp.w	ip, #5
 8005960:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005964:	d014      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 8005966:	794c      	ldrb	r4, [r1, #5]
 8005968:	edd3 6a05 	vldr	s13, [r3, #20]
 800596c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005970:	edd4 7a00 	vldr	s15, [r4]
 8005974:	f1bc 0f06 	cmp.w	ip, #6
 8005978:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800597c:	d008      	beq.n	8005990 <ai_dict8_dot_array_f32+0x180>
 800597e:	7989      	ldrb	r1, [r1, #6]
 8005980:	edd3 7a06 	vldr	s15, [r3, #24]
 8005984:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005988:	edd2 6a00 	vldr	s13, [r2]
 800598c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005990:	edd0 7a00 	vldr	s15, [r0]
 8005994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005998:	ed80 7a00 	vstr	s14, [r0]
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80059a8 <ai_dict8_dot_array_f32+0x198>
 80059a4:	e7a0      	b.n	80058e8 <ai_dict8_dot_array_f32+0xd8>
 80059a6:	bf00      	nop
 80059a8:	00000000 	.word	0x00000000

080059ac <ai_dict4_dot_array_f32>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059b2:	f027 0c01 	bic.w	ip, r7, #1
 80059b6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80059ba:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80059be:	f000 80ae 	beq.w	8005b1e <ai_dict4_dot_array_f32+0x172>
 80059c2:	1d0d      	adds	r5, r1, #4
 80059c4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80059c8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005b24 <ai_dict4_dot_array_f32+0x178>
 80059cc:	eb05 0e09 	add.w	lr, r5, r9
 80059d0:	f103 0420 	add.w	r4, r3, #32
 80059d4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80059d8:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80059dc:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80059e0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80059e4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80059e8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80059ec:	ed14 5a04 	vldr	s10, [r4, #-16]
 80059f0:	ed54 5a03 	vldr	s11, [r4, #-12]
 80059f4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80059f8:	ed54 6a01 	vldr	s13, [r4, #-4]
 80059fc:	f006 0a0f 	and.w	sl, r6, #15
 8005a00:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005a04:	edda 7a00 	vldr	s15, [sl]
 8005a08:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005a0c:	0936      	lsrs	r6, r6, #4
 8005a0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a12:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005a16:	ed96 3a00 	vldr	s6, [r6]
 8005a1a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8005a1e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005a22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a26:	f00b 0b0f 	and.w	fp, fp, #15
 8005a2a:	edd6 3a00 	vldr	s7, [r6]
 8005a2e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8005a32:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005a36:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005a3a:	3504      	adds	r5, #4
 8005a3c:	ed9b 4a00 	vldr	s8, [fp]
 8005a40:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005a44:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005a48:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005a4c:	f00a 0a0f 	and.w	sl, sl, #15
 8005a50:	eddb 4a00 	vldr	s9, [fp]
 8005a54:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005a58:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005a5c:	45ae      	cmp	lr, r5
 8005a5e:	ed9a 5a00 	vldr	s10, [sl]
 8005a62:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005a66:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005a6a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005a6e:	f006 060f 	and.w	r6, r6, #15
 8005a72:	edda 5a00 	vldr	s11, [sl]
 8005a76:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a7e:	f104 0420 	add.w	r4, r4, #32
 8005a82:	ed96 6a00 	vldr	s12, [r6]
 8005a86:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a8e:	d1a1      	bne.n	80059d4 <ai_dict4_dot_array_f32+0x28>
 8005a90:	4449      	add	r1, r9
 8005a92:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005a96:	459c      	cmp	ip, r3
 8005a98:	d92d      	bls.n	8005af6 <ai_dict4_dot_array_f32+0x14a>
 8005a9a:	f10c 0c07 	add.w	ip, ip, #7
 8005a9e:	f103 0508 	add.w	r5, r3, #8
 8005aa2:	ebac 0c05 	sub.w	ip, ip, r5
 8005aa6:	f02c 0407 	bic.w	r4, ip, #7
 8005aaa:	f103 0810 	add.w	r8, r3, #16
 8005aae:	44a0      	add	r8, r4
 8005ab0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8005ab4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005ab8:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005abc:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005ac0:	f004 060f 	and.w	r6, r4, #15
 8005ac4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ac8:	0924      	lsrs	r4, r4, #4
 8005aca:	edd6 7a00 	vldr	s15, [r6]
 8005ace:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005ad2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005ad6:	ed94 6a00 	vldr	s12, [r4]
 8005ada:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ade:	3508      	adds	r5, #8
 8005ae0:	45a8      	cmp	r8, r5
 8005ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ae6:	d1e5      	bne.n	8005ab4 <ai_dict4_dot_array_f32+0x108>
 8005ae8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005aec:	f10c 0c01 	add.w	ip, ip, #1
 8005af0:	4461      	add	r1, ip
 8005af2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005af6:	07fc      	lsls	r4, r7, #31
 8005af8:	d509      	bpl.n	8005b0e <ai_dict4_dot_array_f32+0x162>
 8005afa:	7809      	ldrb	r1, [r1, #0]
 8005afc:	edd3 7a00 	vldr	s15, [r3]
 8005b00:	090b      	lsrs	r3, r1, #4
 8005b02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005b06:	edd2 6a00 	vldr	s13, [r2]
 8005b0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b0e:	edd0 7a00 	vldr	s15, [r0]
 8005b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b16:	ed80 7a00 	vstr	s14, [r0]
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005b24 <ai_dict4_dot_array_f32+0x178>
 8005b22:	e7b8      	b.n	8005a96 <ai_dict4_dot_array_f32+0xea>
 8005b24:	00000000 	.word	0x00000000

08005b28 <ai_dict_decompress_f32>:
 8005b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b2c:	9f08      	ldr	r7, [sp, #32]
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005b34:	d00e      	beq.n	8005b54 <ai_dict_decompress_f32+0x2c>
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d10a      	bne.n	8005b50 <ai_dict_decompress_f32+0x28>
 8005b3a:	42b8      	cmp	r0, r7
 8005b3c:	d208      	bcs.n	8005b50 <ai_dict_decompress_f32+0x28>
 8005b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f840 3b04 	str.w	r3, [r0], #4
 8005b4c:	4287      	cmp	r7, r0
 8005b4e:	d8f6      	bhi.n	8005b3e <ai_dict_decompress_f32+0x16>
 8005b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b54:	9b07      	ldr	r3, [sp, #28]
 8005b56:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8005b5a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8005b5e:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8005b62:	f003 0e01 	and.w	lr, r3, #1
 8005b66:	42b8      	cmp	r0, r7
 8005b68:	d2f2      	bcs.n	8005b50 <ai_dict_decompress_f32+0x28>
 8005b6a:	f1bc 0f00 	cmp.w	ip, #0
 8005b6e:	d01a      	beq.n	8005ba6 <ai_dict_decompress_f32+0x7e>
 8005b70:	f100 0508 	add.w	r5, r0, #8
 8005b74:	1e4c      	subs	r4, r1, #1
 8005b76:	eb01 0608 	add.w	r6, r1, r8
 8005b7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f845 3c08 	str.w	r3, [r5, #-8]
 8005b8c:	7823      	ldrb	r3, [r4, #0]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b96:	f105 0508 	add.w	r5, r5, #8
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8005ba0:	d1eb      	bne.n	8005b7a <ai_dict_decompress_f32+0x52>
 8005ba2:	4461      	add	r1, ip
 8005ba4:	4448      	add	r0, r9
 8005ba6:	f1be 0f00 	cmp.w	lr, #0
 8005baa:	d103      	bne.n	8005bb4 <ai_dict_decompress_f32+0x8c>
 8005bac:	4287      	cmp	r7, r0
 8005bae:	d8dc      	bhi.n	8005b6a <ai_dict_decompress_f32+0x42>
 8005bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bb4:	780b      	ldrb	r3, [r1, #0]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bbc:	3101      	adds	r1, #1
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6003      	str	r3, [r0, #0]
 8005bc2:	3004      	adds	r0, #4
 8005bc4:	e7cf      	b.n	8005b66 <ai_dict_decompress_f32+0x3e>
 8005bc6:	bf00      	nop

08005bc8 <forward_conv2d_nl_pool>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	ed2d 8b10 	vpush	{d8-d15}
 8005bd0:	b0e1      	sub	sp, #388	; 0x184
 8005bd2:	6943      	ldr	r3, [r0, #20]
 8005bd4:	af0a      	add	r7, sp, #40	; 0x28
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	f001 8106 	beq.w	8006dee <forward_conv2d_nl_pool+0x1226>
 8005be2:	685c      	ldr	r4, [r3, #4]
 8005be4:	6862      	ldr	r2, [r4, #4]
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	f001 80fe 	beq.w	8006de8 <forward_conv2d_nl_pool+0x1220>
 8005bec:	f8d2 c000 	ldr.w	ip, [r2]
 8005bf0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005bf4:	2a01      	cmp	r2, #1
 8005bf6:	f241 80f4 	bls.w	8006de2 <forward_conv2d_nl_pool+0x121a>
 8005bfa:	6922      	ldr	r2, [r4, #16]
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	f001 80eb 	beq.w	8006dd8 <forward_conv2d_nl_pool+0x1210>
 8005c02:	f8d2 9000 	ldr.w	r9, [r2]
 8005c06:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005c0a:	2a02      	cmp	r2, #2
 8005c0c:	f001 80e9 	beq.w	8006de2 <forward_conv2d_nl_pool+0x121a>
 8005c10:	69e6      	ldr	r6, [r4, #28]
 8005c12:	2e00      	cmp	r6, #0
 8005c14:	f001 80d9 	beq.w	8006dca <forward_conv2d_nl_pool+0x1202>
 8005c18:	f114 0218 	adds.w	r2, r4, #24
 8005c1c:	6835      	ldr	r5, [r6, #0]
 8005c1e:	d004      	beq.n	8005c2a <forward_conv2d_nl_pool+0x62>
 8005c20:	8b22      	ldrh	r2, [r4, #24]
 8005c22:	2a01      	cmp	r2, #1
 8005c24:	f241 80e6 	bls.w	8006df4 <forward_conv2d_nl_pool+0x122c>
 8005c28:	6872      	ldr	r2, [r6, #4]
 8005c2a:	68b4      	ldr	r4, [r6, #8]
 8005c2c:	f8dc b018 	ldr.w	fp, [ip, #24]
 8005c30:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8005c34:	f8db 1008 	ldr.w	r1, [fp, #8]
 8005c38:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c40:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8005c44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8005c48:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005c4c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005c50:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8005c54:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8005c58:	f8de 1004 	ldr.w	r1, [lr, #4]
 8005c5c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8005c5e:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8005c62:	f8de 100c 	ldr.w	r1, [lr, #12]
 8005c66:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8005c6a:	f8de 1008 	ldr.w	r1, [lr, #8]
 8005c6e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005c72:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8005c76:	6831      	ldr	r1, [r6, #0]
 8005c78:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8005c7c:	6871      	ldr	r1, [r6, #4]
 8005c7e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8005c82:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005c86:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8005c8a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8005c8e:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8005c92:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005c94:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8005c98:	6809      	ldr	r1, [r1, #0]
 8005c9a:	68b6      	ldr	r6, [r6, #8]
 8005c9c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005ca0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005ca2:	6849      	ldr	r1, [r1, #4]
 8005ca4:	6479      	str	r1, [r7, #68]	; 0x44
 8005ca6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005caa:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8005cae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005cb0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8005cb4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005cb6:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8005cba:	6981      	ldr	r1, [r0, #24]
 8005cbc:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8005cc0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005cc2:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005cc4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005cc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cc8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005cca:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8005cce:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	f001 806c 	beq.w	8006db0 <forward_conv2d_nl_pool+0x11e8>
 8005cd8:	6992      	ldr	r2, [r2, #24]
 8005cda:	6892      	ldr	r2, [r2, #8]
 8005cdc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	69c2      	ldr	r2, [r0, #28]
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	f001 8058 	beq.w	8006d9a <forward_conv2d_nl_pool+0x11d2>
 8005cea:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8005cee:	6892      	ldr	r2, [r2, #8]
 8005cf0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f001 fe79 	bl	80079f4 <ai_array_get_byte_size>
 8005d02:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005d06:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8005d0a:	881a      	ldrh	r2, [r3, #0]
 8005d0c:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8005d10:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005d14:	f8b7 0144 	ldrh.w	r0, [r7, #324]	; 0x144
 8005d18:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 8005d1c:	6439      	str	r1, [r7, #64]	; 0x40
 8005d1e:	fa10 f586 	uxtah	r5, r0, r6
 8005d22:	f8dc 1000 	ldr.w	r1, [ip]
 8005d26:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8005d2a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005d2e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005d32:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d36:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 8005d3a:	1e44      	subs	r4, r0, #1
 8005d3c:	f3c1 5041 	ubfx	r0, r1, #21, #2
 8005d40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d44:	fa1f f28b 	uxth.w	r2, fp
 8005d48:	eb05 0e01 	add.w	lr, r5, r1
 8005d4c:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8005d50:	f8dc 1000 	ldr.w	r1, [ip]
 8005d54:	3a01      	subs	r2, #1
 8005d56:	fb04 5402 	mla	r4, r4, r2, r5
 8005d5a:	fa1f f28a 	uxth.w	r2, sl
 8005d5e:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 8005d62:	1e54      	subs	r4, r2, #1
 8005d64:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8005d68:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8005d6c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005d70:	f8d7 5154 	ldr.w	r5, [r7, #340]	; 0x154
 8005d74:	fa46 f000 	asr.w	r0, r6, r0
 8005d78:	f3c1 4643 	ubfx	r6, r1, #17, #4
 8005d7c:	f8b7 114c 	ldrh.w	r1, [r7, #332]	; 0x14c
 8005d80:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8005d84:	ebae 0202 	sub.w	r2, lr, r2
 8005d88:	fbb2 f2f1 	udiv	r2, r2, r1
 8005d8c:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8005d90:	3d01      	subs	r5, #1
 8005d92:	fb05 1104 	mla	r1, r5, r4, r1
 8005d96:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005d9a:	1c51      	adds	r1, r2, #1
 8005d9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005da0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005da4:	497c      	ldr	r1, [pc, #496]	; (8005f98 <forward_conv2d_nl_pool+0x3d0>)
 8005da6:	4614      	mov	r4, r2
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	bf08      	it	eq
 8005dac:	460c      	moveq	r4, r1
 8005dae:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8005db2:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8005db6:	2e04      	cmp	r6, #4
 8005db8:	b280      	uxth	r0, r0
 8005dba:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8005dbe:	f000 8382 	beq.w	80064c6 <forward_conv2d_nl_pool+0x8fe>
 8005dc2:	2e08      	cmp	r6, #8
 8005dc4:	f000 837f 	beq.w	80064c6 <forward_conv2d_nl_pool+0x8fe>
 8005dc8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8005dcc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005dd0:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8005dd4:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005dd8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005ddc:	2a03      	cmp	r2, #3
 8005dde:	f241 8000 	bls.w	8006de2 <forward_conv2d_nl_pool+0x121a>
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 836b 	beq.w	80064c2 <forward_conv2d_nl_pool+0x8fa>
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005dfa:	6899      	ldr	r1, [r3, #8]
 8005dfc:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8005e00:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005e04:	6896      	ldr	r6, [r2, #8]
 8005e06:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8005e0a:	4249      	negs	r1, r1
 8005e0c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f000 82e1 	beq.w	80063d8 <forward_conv2d_nl_pool+0x810>
 8005e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e1a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8005e1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005e22:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 8005e26:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8005f9c <forward_conv2d_nl_pool+0x3d4>
 8005e2a:	fb03 f200 	mul.w	r2, r3, r0
 8005e2e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8005e32:	008c      	lsls	r4, r1, #2
 8005e34:	fb04 f000 	mul.w	r0, r4, r0
 8005e38:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8005e3c:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8005e40:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8005e44:	fb01 fc02 	mul.w	ip, r1, r2
 8005e48:	00a2      	lsls	r2, r4, #2
 8005e4a:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8005e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e52:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8005e56:	00ab      	lsls	r3, r5, #2
 8005e58:	4694      	mov	ip, r2
 8005e5a:	fb0c f204 	mul.w	r2, ip, r4
 8005e5e:	fb04 f303 	mul.w	r3, r4, r3
 8005e62:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8005e66:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8005e6a:	00a4      	lsls	r4, r4, #2
 8005e6c:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
 8005e70:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8005e74:	f04f 0c00 	mov.w	ip, #0
 8005e78:	fa0f f58a 	sxth.w	r5, sl
 8005e7c:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 8005e80:	46a4      	mov	ip, r4
 8005e82:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8005e86:	f8c7 50f4 	str.w	r5, [r7, #244]	; 0xf4
 8005e8a:	fa0f f58b 	sxth.w	r5, fp
 8005e8e:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
 8005e92:	fb0c fc04 	mul.w	ip, ip, r4
 8005e96:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8005e9a:	fb06 fc03 	mul.w	ip, r6, r3
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea2:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8005ea6:	4240      	negs	r0, r0
 8005ea8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005eac:	469c      	mov	ip, r3
 8005eae:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb6:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8005eba:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8005ebe:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 8005ec2:	fb00 f303 	mul.w	r3, r0, r3
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	fb0c fc04 	mul.w	ip, ip, r4
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ece:	fb04 f305 	mul.w	r3, r4, r5
 8005ed2:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8005ed6:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ee0:	46a6      	mov	lr, r4
 8005ee2:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8005ee6:	fb05 f503 	mul.w	r5, r5, r3
 8005eea:	667d      	str	r5, [r7, #100]	; 0x64
 8005eec:	4625      	mov	r5, r4
 8005eee:	fb05 f503 	mul.w	r5, r5, r3
 8005ef2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ef6:	66bd      	str	r5, [r7, #104]	; 0x68
 8005ef8:	fb00 f101 	mul.w	r1, r0, r1
 8005efc:	fb03 f306 	mul.w	r3, r3, r6
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	008b      	lsls	r3, r1, #2
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
 8005f06:	0093      	lsls	r3, r2, #2
 8005f08:	653b      	str	r3, [r7, #80]	; 0x50
 8005f0a:	0083      	lsls	r3, r0, #2
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f12:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005f16:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005f1a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8005f1e:	2400      	movs	r4, #0
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f22:	4603      	mov	r3, r0
 8005f24:	fb03 f301 	mul.w	r3, r3, r1
 8005f28:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8005f2c:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8005f30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f34:	00d1      	lsls	r1, r2, #3
 8005f36:	0113      	lsls	r3, r2, #4
 8005f38:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8005f3c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005f40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005f44:	fb00 f004 	mul.w	r0, r0, r4
 8005f48:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f4c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8005f4e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005f52:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8005f56:	469a      	mov	sl, r3
 8005f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f340 81d5 	ble.w	800630c <forward_conv2d_nl_pool+0x744>
 8005f62:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005f66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005f6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005f72:	2900      	cmp	r1, #0
 8005f74:	441a      	add	r2, r3
 8005f76:	bfb4      	ite	lt
 8005f78:	2100      	movlt	r1, #0
 8005f7a:	2300      	movge	r3, #0
 8005f7c:	4282      	cmp	r2, r0
 8005f7e:	bf28      	it	cs
 8005f80:	4602      	movcs	r2, r0
 8005f82:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005f86:	2801      	cmp	r0, #1
 8005f88:	f000 840c 	beq.w	80067a4 <forward_conv2d_nl_pool+0xbdc>
 8005f8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005f90:	4281      	cmp	r1, r0
 8005f92:	f000 82c6 	beq.w	8006522 <forward_conv2d_nl_pool+0x95a>
 8005f96:	e003      	b.n	8005fa0 <forward_conv2d_nl_pool+0x3d8>
 8005f98:	0800580d 	.word	0x0800580d
 8005f9c:	00000000 	.word	0x00000000
 8005fa0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	f000 81a4 	beq.w	80062f2 <forward_conv2d_nl_pool+0x72a>
 8005faa:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8005fae:	fb93 f1f0 	sdiv	r1, r3, r0
 8005fb2:	fb00 3111 	mls	r1, r0, r1, r3
 8005fb6:	1a41      	subs	r1, r0, r1
 8005fb8:	1ad2      	subs	r2, r2, r3
 8005fba:	fb91 f5f0 	sdiv	r5, r1, r0
 8005fbe:	fb00 1515 	mls	r5, r0, r5, r1
 8005fc2:	1b52      	subs	r2, r2, r5
 8005fc4:	4601      	mov	r1, r0
 8005fc6:	4402      	add	r2, r0
 8005fc8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005fcc:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8005fd0:	f8c7 a010 	str.w	sl, [r7, #16]
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005fda:	fbb4 f4f0 	udiv	r4, r4, r0
 8005fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe0:	f8c7 b018 	str.w	fp, [r7, #24]
 8005fe4:	3a01      	subs	r2, #1
 8005fe6:	fb92 f8f1 	sdiv	r8, r2, r1
 8005fea:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005fee:	eba0 0c04 	sub.w	ip, r0, r4
 8005ff2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8005ff6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006000:	fbb4 f2f2 	udiv	r2, r4, r2
 8006004:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8006008:	663a      	str	r2, [r7, #96]	; 0x60
 800600a:	441d      	add	r5, r3
 800600c:	fb0e f000 	mul.w	r0, lr, r0
 8006010:	440b      	add	r3, r1
 8006012:	eba6 0608 	sub.w	r6, r6, r8
 8006016:	fb04 f505 	mul.w	r5, r4, r5
 800601a:	3b01      	subs	r3, #1
 800601c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8006020:	fb93 f3f4 	sdiv	r3, r3, r4
 8006024:	fb00 f406 	mul.w	r4, r0, r6
 8006028:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800602c:	677d      	str	r5, [r7, #116]	; 0x74
 800602e:	0091      	lsls	r1, r2, #2
 8006030:	fb00 f003 	mul.w	r0, r0, r3
 8006034:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8006038:	65f8      	str	r0, [r7, #92]	; 0x5c
 800603a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800603e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8006042:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8006046:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800604a:	1ac3      	subs	r3, r0, r3
 800604c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8006050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006054:	008b      	lsls	r3, r1, #2
 8006056:	633b      	str	r3, [r7, #48]	; 0x30
 8006058:	00d3      	lsls	r3, r2, #3
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006068:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800606c:	2300      	movs	r3, #0
 800606e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8006072:	67bb      	str	r3, [r7, #120]	; 0x78
 8006074:	46c2      	mov	sl, r8
 8006076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800607a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800607e:	eb03 0c02 	add.w	ip, r3, r2
 8006082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006086:	2b00      	cmp	r3, #0
 8006088:	f2c0 811f 	blt.w	80062ca <forward_conv2d_nl_pool+0x702>
 800608c:	2000      	movs	r0, #0
 800608e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8006090:	f8d7 80f4 	ldr.w	r8, [r7, #244]	; 0xf4
 8006094:	4605      	mov	r5, r0
 8006096:	4606      	mov	r6, r0
 8006098:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800609c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80060a0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80060a4:	4413      	add	r3, r2
 80060a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80060aa:	440a      	add	r2, r1
 80060ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf94      	ite	ls
 80060b4:	ebc6 0303 	rsbls	r3, r6, r3
 80060b8:	ebc6 0301 	rsbhi	r3, r6, r1
 80060bc:	4415      	add	r5, r2
 80060be:	1a1b      	subs	r3, r3, r0
 80060c0:	00a4      	lsls	r4, r4, #2
 80060c2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80060c6:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 80060ca:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80060ce:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 80060d0:	4602      	mov	r2, r0
 80060d2:	2800      	cmp	r0, #0
 80060d4:	bf08      	it	eq
 80060d6:	4662      	moveq	r2, ip
 80060d8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80060dc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80060e0:	fb91 f1f0 	sdiv	r1, r1, r0
 80060e4:	4429      	add	r1, r5
 80060e6:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 80060ea:	fb0e 5501 	mla	r5, lr, r1, r5
 80060ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80060f2:	4403      	add	r3, r0
 80060f4:	fb01 6104 	mla	r1, r1, r4, r6
 80060f8:	3b01      	subs	r3, #1
 80060fa:	fb93 f6f0 	sdiv	r6, r3, r0
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8006104:	fb06 3110 	mls	r1, r6, r0, r3
 8006108:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800610c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006110:	4562      	cmp	r2, ip
 8006112:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006116:	bf08      	it	eq
 8006118:	eeb0 6a48 	vmoveq.f32	s12, s16
 800611c:	1b9b      	subs	r3, r3, r6
 800611e:	2800      	cmp	r0, #0
 8006120:	d070      	beq.n	8006204 <forward_conv2d_nl_pool+0x63c>
 8006122:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8006126:	fb0e f803 	mul.w	r8, lr, r3
 800612a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612c:	fb01 fb00 	mul.w	fp, r1, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d067      	beq.n	8006204 <forward_conv2d_nl_pool+0x63c>
 8006134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006138:	18d3      	adds	r3, r2, r3
 800613a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800613e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006146:	2300      	movs	r3, #0
 8006148:	673b      	str	r3, [r7, #112]	; 0x70
 800614a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	4413      	add	r3, r2
 8006152:	65bb      	str	r3, [r7, #88]	; 0x58
 8006154:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	4413      	add	r3, r2
 800615c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006160:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006164:	ecf3 7a01 	vldmia	r3!, {s15}
 8006168:	f1ba 0f00 	cmp.w	sl, #0
 800616c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006170:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006174:	f340 80a7 	ble.w	80062c6 <forward_conv2d_nl_pool+0x6fe>
 8006178:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800617c:	f04f 0c00 	mov.w	ip, #0
 8006180:	2e00      	cmp	r6, #0
 8006182:	dd19      	ble.n	80061b8 <forward_conv2d_nl_pool+0x5f0>
 8006184:	2100      	movs	r1, #0
 8006186:	eb00 040e 	add.w	r4, r0, lr
 800618a:	4284      	cmp	r4, r0
 800618c:	d910      	bls.n	80061b0 <forward_conv2d_nl_pool+0x5e8>
 800618e:	4603      	mov	r3, r0
 8006190:	462a      	mov	r2, r5
 8006192:	ecb3 7a01 	vldmia	r3!, {s14}
 8006196:	ecf2 6a01 	vldmia	r2!, {s13}
 800619a:	429c      	cmp	r4, r3
 800619c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80061a0:	d8f7      	bhi.n	8006192 <forward_conv2d_nl_pool+0x5ca>
 80061a2:	43c3      	mvns	r3, r0
 80061a4:	441c      	add	r4, r3
 80061a6:	f024 0403 	bic.w	r4, r4, #3
 80061aa:	3404      	adds	r4, #4
 80061ac:	4425      	add	r5, r4
 80061ae:	4420      	add	r0, r4
 80061b0:	3101      	adds	r1, #1
 80061b2:	428e      	cmp	r6, r1
 80061b4:	4448      	add	r0, r9
 80061b6:	d1e6      	bne.n	8006186 <forward_conv2d_nl_pool+0x5be>
 80061b8:	f10c 0c01 	add.w	ip, ip, #1
 80061bc:	45e2      	cmp	sl, ip
 80061be:	4458      	add	r0, fp
 80061c0:	4445      	add	r5, r8
 80061c2:	d1dd      	bne.n	8006180 <forward_conv2d_nl_pool+0x5b8>
 80061c4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061cc:	441d      	add	r5, r3
 80061ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061d2:	ece3 7a01 	vstmia	r3!, {s15}
 80061d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80061da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061de:	4293      	cmp	r3, r2
 80061e0:	d1be      	bne.n	8006160 <forward_conv2d_nl_pool+0x598>
 80061e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ea:	4472      	add	r2, lr
 80061ec:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80061f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f2:	1a52      	subs	r2, r2, r1
 80061f4:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80061f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80061fc:	3301      	adds	r3, #1
 80061fe:	429a      	cmp	r2, r3
 8006200:	673b      	str	r3, [r7, #112]	; 0x70
 8006202:	d1a2      	bne.n	800614a <forward_conv2d_nl_pool+0x582>
 8006204:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8006208:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800620c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620e:	4608      	mov	r0, r1
 8006210:	4410      	add	r0, r2
 8006212:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006216:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800621a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800621e:	4401      	add	r1, r0
 8006220:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006224:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006228:	1a8a      	subs	r2, r1, r2
 800622a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800622e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006232:	3301      	adds	r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	67bb      	str	r3, [r7, #120]	; 0x78
 8006238:	f47f af1d 	bne.w	8006076 <forward_conv2d_nl_pool+0x4ae>
 800623c:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8006240:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8006244:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006248:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2a00      	cmp	r2, #0
 8006250:	f000 8165 	beq.w	800651e <forward_conv2d_nl_pool+0x956>
 8006254:	2400      	movs	r4, #0
 8006256:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800625a:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800625e:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8006262:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 8006266:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800626a:	609e      	str	r6, [r3, #8]
 800626c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006270:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006274:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8006278:	462b      	mov	r3, r5
 800627a:	4608      	mov	r0, r1
 800627c:	47a0      	blx	r4
 800627e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006282:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800628e:	4405      	add	r5, r0
 8006290:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8006294:	0089      	lsls	r1, r1, #2
 8006296:	4406      	add	r6, r0
 8006298:	eba5 0c09 	sub.w	ip, r5, r9
 800629c:	1850      	adds	r0, r2, r1
 800629e:	45a4      	cmp	ip, r4
 80062a0:	bfa8      	it	ge
 80062a2:	464d      	movge	r5, r9
 80062a4:	4286      	cmp	r6, r0
 80062a6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80062aa:	bf28      	it	cs
 80062ac:	1a76      	subcs	r6, r6, r1
 80062ae:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80062b2:	3001      	adds	r0, #1
 80062b4:	4281      	cmp	r1, r0
 80062b6:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80062ba:	d1d6      	bne.n	800626a <forward_conv2d_nl_pool+0x6a2>
 80062bc:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80062c0:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80062c4:	e019      	b.n	80062fa <forward_conv2d_nl_pool+0x732>
 80062c6:	461a      	mov	r2, r3
 80062c8:	e77e      	b.n	80061c8 <forward_conv2d_nl_pool+0x600>
 80062ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80062ce:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80062d2:	fb90 f3f2 	sdiv	r3, r0, r2
 80062d6:	fb02 0313 	mls	r3, r2, r3, r0
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	4605      	mov	r5, r0
 80062de:	fb93 f0f2 	sdiv	r0, r3, r2
 80062e2:	fb02 3010 	mls	r0, r2, r0, r3
 80062e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e8:	462e      	mov	r6, r5
 80062ea:	18c4      	adds	r4, r0, r3
 80062ec:	eb02 0805 	add.w	r8, r2, r5
 80062f0:	e6d2      	b.n	8006098 <forward_conv2d_nl_pool+0x4d0>
 80062f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006300:	3301      	adds	r3, #1
 8006302:	b21b      	sxth	r3, r3
 8006304:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800630c:	3b01      	subs	r3, #1
 800630e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006312:	f100 8089 	bmi.w	8006428 <forward_conv2d_nl_pool+0x860>
 8006316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800631a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800631e:	42a3      	cmp	r3, r4
 8006320:	d867      	bhi.n	80063f2 <forward_conv2d_nl_pool+0x82a>
 8006322:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006326:	b29b      	uxth	r3, r3
 8006328:	6990      	ldr	r0, [r2, #24]
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006330:	f8d7 80c4 	ldr.w	r8, [r7, #196]	; 0xc4
 8006334:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	fa1f f188 	uxth.w	r1, r8
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006344:	9308      	str	r3, [sp, #32]
 8006346:	9105      	str	r1, [sp, #20]
 8006348:	2601      	movs	r6, #1
 800634a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800634e:	9607      	str	r6, [sp, #28]
 8006350:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8006354:	9506      	str	r5, [sp, #24]
 8006356:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	1a64      	subs	r4, r4, r1
 800635e:	b2b1      	uxth	r1, r6
 8006360:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800636a:	b224      	sxth	r4, r4
 800636c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8006370:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8006374:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8006378:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800637a:	47a0      	blx	r4
 800637c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006380:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8006384:	688a      	ldr	r2, [r1, #8]
 8006386:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8006388:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800638c:	fa0f f388 	sxth.w	r3, r8
 8006390:	1af3      	subs	r3, r6, r3
 8006392:	4422      	add	r2, r4
 8006394:	462e      	mov	r6, r5
 8006396:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800639a:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800639e:	608a      	str	r2, [r1, #8]
 80063a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063a4:	4426      	add	r6, r4
 80063a6:	b21b      	sxth	r3, r3
 80063a8:	1b2c      	subs	r4, r5, r4
 80063aa:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80063ae:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80063b0:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80063b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063bc:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80063c0:	3001      	adds	r0, #1
 80063c2:	442c      	add	r4, r5
 80063c4:	4283      	cmp	r3, r0
 80063c6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80063ca:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80063ce:	f63f adc3 	bhi.w	8005f58 <forward_conv2d_nl_pool+0x390>
 80063d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063e0:	68d3      	ldr	r3, [r2, #12]
 80063e2:	6093      	str	r3, [r2, #8]
 80063e4:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80063e8:	46bd      	mov	sp, r7
 80063ea:	ecbd 8b10 	vpop	{d8-d15}
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80063f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063fa:	4611      	mov	r1, r2
 80063fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006400:	4419      	add	r1, r3
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8006412:	4413      	add	r3, r2
 8006414:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006418:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800641c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006420:	4293      	cmp	r3, r2
 8006422:	f63f ad99 	bhi.w	8005f58 <forward_conv2d_nl_pool+0x390>
 8006426:	e7d4      	b.n	80063d2 <forward_conv2d_nl_pool+0x80a>
 8006428:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800642c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8006436:	68d1      	ldr	r1, [r2, #12]
 8006438:	6853      	ldr	r3, [r2, #4]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	fb00 4012 	mls	r0, r0, r2, r4
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4281      	cmp	r1, r0
 8006444:	bf88      	it	hi
 8006446:	18c0      	addhi	r0, r0, r3
 8006448:	4281      	cmp	r1, r0
 800644a:	eb01 0203 	add.w	r2, r1, r3
 800644e:	d216      	bcs.n	800647e <forward_conv2d_nl_pool+0x8b6>
 8006450:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 8006454:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8006458:	42a1      	cmp	r1, r4
 800645a:	d010      	beq.n	800647e <forward_conv2d_nl_pool+0x8b6>
 800645c:	4290      	cmp	r0, r2
 800645e:	d20e      	bcs.n	800647e <forward_conv2d_nl_pool+0x8b6>
 8006460:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8006464:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8006468:	f850 3b04 	ldr.w	r3, [r0], #4
 800646c:	f841 3b04 	str.w	r3, [r1], #4
 8006470:	69a2      	ldr	r2, [r4, #24]
 8006472:	6853      	ldr	r3, [r2, #4]
 8006474:	68d2      	ldr	r2, [r2, #12]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	4282      	cmp	r2, r0
 800647c:	d8f4      	bhi.n	8006468 <forward_conv2d_nl_pool+0x8a0>
 800647e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006482:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8006486:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800648a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800648c:	4420      	add	r0, r4
 800648e:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
 8006492:	1a40      	subs	r0, r0, r1
 8006494:	4421      	add	r1, r4
 8006496:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800649a:	442c      	add	r4, r5
 800649c:	b209      	sxth	r1, r1
 800649e:	b200      	sxth	r0, r0
 80064a0:	4294      	cmp	r4, r2
 80064a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80064a6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80064aa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80064ae:	4621      	mov	r1, r4
 80064b0:	f4ff af31 	bcc.w	8006316 <forward_conv2d_nl_pool+0x74e>
 80064b4:	425b      	negs	r3, r3
 80064b6:	4419      	add	r1, r3
 80064b8:	4291      	cmp	r1, r2
 80064ba:	d2fc      	bcs.n	80064b6 <forward_conv2d_nl_pool+0x8ee>
 80064bc:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80064c0:	e729      	b.n	8006316 <forward_conv2d_nl_pool+0x74e>
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	deff      	udf	#255	; 0xff
 80064c6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	f43f ac7c 	beq.w	8005dc8 <forward_conv2d_nl_pool+0x200>
 80064d0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80064d4:	2903      	cmp	r1, #3
 80064d6:	f240 8484 	bls.w	8006de2 <forward_conv2d_nl_pool+0x121a>
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	b1db      	cbz	r3, 8006518 <forward_conv2d_nl_pool+0x950>
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b1cb      	cbz	r3, 8006518 <forward_conv2d_nl_pool+0x950>
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80064ea:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	4603      	mov	r3, r0
 80064f2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80064f6:	9000      	str	r0, [sp, #0]
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7ff fb15 	bl	8005b28 <ai_dict_decompress_f32>
 80064fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006502:	b12c      	cbz	r4, 8006510 <forward_conv2d_nl_pool+0x948>
 8006504:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8006508:	881a      	ldrh	r2, [r3, #0]
 800650a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800650e:	e45b      	b.n	8005dc8 <forward_conv2d_nl_pool+0x200>
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006516:	e457      	b.n	8005dc8 <forward_conv2d_nl_pool+0x200>
 8006518:	2300      	movs	r3, #0
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	deff      	udf	#255	; 0xff
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	e6eb      	b.n	80062fa <forward_conv2d_nl_pool+0x732>
 8006522:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006524:	2901      	cmp	r1, #1
 8006526:	f47f ad3b 	bne.w	8005fa0 <forward_conv2d_nl_pool+0x3d8>
 800652a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800652e:	2900      	cmp	r1, #0
 8006530:	f43f aedf 	beq.w	80062f2 <forward_conv2d_nl_pool+0x72a>
 8006534:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006538:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800653c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006540:	1ad2      	subs	r2, r2, r3
 8006542:	1a8c      	subs	r4, r1, r2
 8006544:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006548:	00b2      	lsls	r2, r6, #2
 800654a:	fb02 f204 	mul.w	r2, r2, r4
 800654e:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8006552:	fbb1 f1f0 	udiv	r1, r1, r0
 8006556:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800655a:	460d      	mov	r5, r1
 800655c:	6339      	str	r1, [r7, #48]	; 0x30
 800655e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006560:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8006564:	0082      	lsls	r2, r0, #2
 8006566:	65ba      	str	r2, [r7, #88]	; 0x58
 8006568:	00ca      	lsls	r2, r1, #3
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	00aa      	lsls	r2, r5, #2
 800656e:	60ba      	str	r2, [r7, #8]
 8006570:	fb03 f206 	mul.w	r2, r3, r6
 8006574:	67ba      	str	r2, [r7, #120]	; 0x78
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006586:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800658a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006592:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006596:	2300      	movs	r3, #0
 8006598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800659c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f2c0 826e 	blt.w	8006a82 <forward_conv2d_nl_pool+0xeba>
 80065a6:	2100      	movs	r1, #0
 80065a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065aa:	460a      	mov	r2, r1
 80065ac:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80065b0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80065b4:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80065b8:	4420      	add	r0, r4
 80065ba:	4408      	add	r0, r1
 80065bc:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 80065c0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80065c4:	190c      	adds	r4, r1, r4
 80065c6:	42ac      	cmp	r4, r5
 80065c8:	bf28      	it	cs
 80065ca:	462c      	movcs	r4, r5
 80065cc:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80065d0:	0080      	lsls	r0, r0, #2
 80065d2:	1aa4      	subs	r4, r4, r2
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	f000 8245 	beq.w	8006a64 <forward_conv2d_nl_pool+0xe9c>
 80065da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80065de:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80065e2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80065e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80065ea:	42b5      	cmp	r5, r6
 80065ec:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80065f0:	eba3 0204 	sub.w	r2, r3, r4
 80065f4:	eba1 0104 	sub.w	r1, r1, r4
 80065f8:	bf08      	it	eq
 80065fa:	eef0 3a48 	vmoveq.f32	s7, s16
 80065fe:	462b      	mov	r3, r5
 8006600:	69bd      	ldr	r5, [r7, #24]
 8006602:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 8006606:	4428      	add	r0, r5
 8006608:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800660c:	fb05 6e00 	mla	lr, r5, r0, r6
 8006610:	eb0e 000b 	add.w	r0, lr, fp
 8006614:	4586      	cmp	lr, r0
 8006616:	61f8      	str	r0, [r7, #28]
 8006618:	f080 80a5 	bcs.w	8006766 <forward_conv2d_nl_pool+0xb9e>
 800661c:	0092      	lsls	r2, r2, #2
 800661e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006624:	fb01 f10b 	mul.w	r1, r1, fp
 8006628:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800662c:	f024 0803 	bic.w	r8, r4, #3
 8006630:	2a00      	cmp	r2, #0
 8006632:	f000 8098 	beq.w	8006766 <forward_conv2d_nl_pool+0xb9e>
 8006636:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800663a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800663c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006640:	0892      	lsrs	r2, r2, #2
 8006642:	3201      	adds	r2, #1
 8006644:	4401      	add	r1, r0
 8006646:	fb02 f00a 	mul.w	r0, r2, sl
 800664a:	6638      	str	r0, [r7, #96]	; 0x60
 800664c:	0110      	lsls	r0, r2, #4
 800664e:	0092      	lsls	r2, r2, #2
 8006650:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006652:	1aca      	subs	r2, r1, r3
 8006654:	613a      	str	r2, [r7, #16]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	6738      	str	r0, [r7, #112]	; 0x70
 800665a:	4413      	add	r3, r2
 800665c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006660:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006666:	4413      	add	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	677b      	str	r3, [r7, #116]	; 0x74
 8006674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006678:	ecf3 6a01 	vldmia	r3!, {s13}
 800667c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006684:	2b00      	cmp	r3, #0
 8006686:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800668a:	dd57      	ble.n	800673c <forward_conv2d_nl_pool+0xb74>
 800668c:	4676      	mov	r6, lr
 800668e:	f04f 0c00 	mov.w	ip, #0
 8006692:	f1b8 0f00 	cmp.w	r8, #0
 8006696:	f340 81e3 	ble.w	8006a60 <forward_conv2d_nl_pool+0xe98>
 800669a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800669e:	f109 0310 	add.w	r3, r9, #16
 80066a2:	18b1      	adds	r1, r6, r2
 80066a4:	2000      	movs	r0, #0
 80066a6:	4632      	mov	r2, r6
 80066a8:	eb02 050b 	add.w	r5, r2, fp
 80066ac:	ed95 7a00 	vldr	s14, [r5]
 80066b0:	ed53 7a03 	vldr	s15, [r3, #-12]
 80066b4:	ed92 4a00 	vldr	s8, [r2]
 80066b8:	ed53 4a04 	vldr	s9, [r3, #-16]
 80066bc:	ed91 5a00 	vldr	s10, [r1]
 80066c0:	ed53 5a02 	vldr	s11, [r3, #-8]
 80066c4:	ed13 6a01 	vldr	s12, [r3, #-4]
 80066c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066cc:	eb01 050b 	add.w	r5, r1, fp
 80066d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80066d4:	3004      	adds	r0, #4
 80066d6:	4540      	cmp	r0, r8
 80066d8:	ed95 7a00 	vldr	s14, [r5]
 80066dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80066e0:	4452      	add	r2, sl
 80066e2:	4451      	add	r1, sl
 80066e4:	f103 0310 	add.w	r3, r3, #16
 80066e8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80066ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80066f0:	dbda      	blt.n	80066a8 <forward_conv2d_nl_pool+0xae0>
 80066f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80066f6:	441e      	add	r6, r3
 80066f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fa:	4499      	add	r9, r3
 80066fc:	42a0      	cmp	r0, r4
 80066fe:	da11      	bge.n	8006724 <forward_conv2d_nl_pool+0xb5c>
 8006700:	4602      	mov	r2, r0
 8006702:	4633      	mov	r3, r6
 8006704:	4649      	mov	r1, r9
 8006706:	edd3 7a00 	vldr	s15, [r3]
 800670a:	ecb1 7a01 	vldmia	r1!, {s14}
 800670e:	3201      	adds	r2, #1
 8006710:	42a2      	cmp	r2, r4
 8006712:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006716:	445b      	add	r3, fp
 8006718:	d1f5      	bne.n	8006706 <forward_conv2d_nl_pool+0xb3e>
 800671a:	1a20      	subs	r0, r4, r0
 800671c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8006720:	fb00 660b 	mla	r6, r0, fp, r6
 8006724:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006728:	441e      	add	r6, r3
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	4499      	add	r9, r3
 8006730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006734:	f10c 0c01 	add.w	ip, ip, #1
 8006738:	4563      	cmp	r3, ip
 800673a:	d1aa      	bne.n	8006692 <forward_conv2d_nl_pool+0xaca>
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	4499      	add	r9, r3
 8006740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006742:	ece3 6a01 	vstmia	r3!, {s13}
 8006746:	677b      	str	r3, [r7, #116]	; 0x74
 8006748:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800674c:	4293      	cmp	r3, r2
 800674e:	d191      	bne.n	8006674 <forward_conv2d_nl_pool+0xaac>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f10e 0e04 	add.w	lr, lr, #4
 8006760:	459e      	cmp	lr, r3
 8006762:	f4ff af7d 	bcc.w	8006660 <forward_conv2d_nl_pool+0xa98>
 8006766:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800676a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800676e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006772:	440a      	add	r2, r1
 8006774:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006778:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800677c:	4608      	mov	r0, r1
 800677e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8006782:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8006786:	4410      	add	r0, r2
 8006788:	1a8a      	subs	r2, r1, r2
 800678a:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800678e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006792:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8006796:	3301      	adds	r3, #1
 8006798:	429a      	cmp	r2, r3
 800679a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800679e:	f47f aefd 	bne.w	800659c <forward_conv2d_nl_pool+0x9d4>
 80067a2:	e54f      	b.n	8006244 <forward_conv2d_nl_pool+0x67c>
 80067a4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80067a6:	2801      	cmp	r0, #1
 80067a8:	f47f abfa 	bne.w	8005fa0 <forward_conv2d_nl_pool+0x3d8>
 80067ac:	1ad2      	subs	r2, r2, r3
 80067ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067b0:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80067b4:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80067b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067ba:	fb00 4101 	mla	r1, r0, r1, r4
 80067be:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80067c2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80067c6:	f080 8173 	bcs.w	8006ab0 <forward_conv2d_nl_pool+0xee8>
 80067ca:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	f43f ad38 	beq.w	8006244 <forward_conv2d_nl_pool+0x67c>
 80067d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067de:	677b      	str	r3, [r7, #116]	; 0x74
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	663b      	str	r3, [r7, #96]	; 0x60
 80067e4:	188b      	adds	r3, r1, r2
 80067e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067f8:	e9c7 ab0b 	strd	sl, fp, [r7, #44]	; 0x2c
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800680a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 814b 	beq.w	8006aaa <forward_conv2d_nl_pool+0xee2>
 8006814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006818:	ed93 6a00 	vldr	s12, [r3]
 800681c:	3304      	adds	r3, #4
 800681e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006822:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8101 	beq.w	8006a2e <forward_conv2d_nl_pool+0xe66>
 800682c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006830:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006834:	eb03 0802 	add.w	r8, r3, r2
 8006838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800683e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006848:	67bb      	str	r3, [r7, #120]	; 0x78
 800684a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006852:	f04f 0b00 	mov.w	fp, #0
 8006856:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800685a:	2b00      	cmp	r3, #0
 800685c:	f2c0 811c 	blt.w	8006a98 <forward_conv2d_nl_pool+0xed0>
 8006860:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006864:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006866:	2300      	movs	r3, #0
 8006868:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800686c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006870:	eb02 0c04 	add.w	ip, r2, r4
 8006874:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006878:	4540      	cmp	r0, r8
 800687a:	bf94      	ite	ls
 800687c:	ebc3 0300 	rsbls	r3, r3, r0
 8006880:	ebc3 0308 	rsbhi	r3, r3, r8
 8006884:	eba2 0903 	sub.w	r9, r2, r3
 8006888:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800688c:	1ac4      	subs	r4, r0, r3
 800688e:	fb03 f302 	mul.w	r3, r3, r2
 8006892:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006896:	2a00      	cmp	r2, #0
 8006898:	f340 80fb 	ble.w	8006a92 <forward_conv2d_nl_pool+0xeca>
 800689c:	f023 050f 	bic.w	r5, r3, #15
 80068a0:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 80068a4:	1e68      	subs	r0, r5, #1
 80068a6:	0900      	lsrs	r0, r0, #4
 80068a8:	3001      	adds	r0, #1
 80068aa:	fb06 f204 	mul.w	r2, r6, r4
 80068ae:	673a      	str	r2, [r7, #112]	; 0x70
 80068b0:	0102      	lsls	r2, r0, #4
 80068b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80068b4:	fb06 f909 	mul.w	r9, r6, r9
 80068b8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80068bc:	eef0 6a46 	vmov.f32	s13, s12
 80068c0:	f04f 0e00 	mov.w	lr, #0
 80068c4:	4662      	mov	r2, ip
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	f340 80e1 	ble.w	8006a8e <forward_conv2d_nl_pool+0xec6>
 80068cc:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80068d0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80068d4:	2600      	movs	r6, #0
 80068d6:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 80068da:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80068de:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 80068e2:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 80068e6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80068ea:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80068ee:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80068f2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80068f6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80068fa:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80068fe:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8006902:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8006906:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800690a:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800690e:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8006912:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8006916:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800691a:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800691e:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8006922:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8006926:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800692a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800692e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8006932:	ed50 3a04 	vldr	s7, [r0, #-16]
 8006936:	ed14 4a04 	vldr	s8, [r4, #-16]
 800693a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800693e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8006942:	ed50 5a02 	vldr	s11, [r0, #-8]
 8006946:	ed14 7a02 	vldr	s14, [r4, #-8]
 800694a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800694e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8006952:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006956:	3610      	adds	r6, #16
 8006958:	42b5      	cmp	r5, r6
 800695a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800695e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8006962:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8006966:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800696a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800696e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8006972:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006976:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800697a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800697e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006982:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006986:	eee0 7a81 	vfma.f32	s15, s1, s2
 800698a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800698e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006992:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006996:	eee4 7a85 	vfma.f32	s15, s9, s10
 800699a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800699e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80069a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80069a6:	dc96      	bgt.n	80068d6 <forward_conv2d_nl_pool+0xd0e>
 80069a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80069aa:	4451      	add	r1, sl
 80069ac:	4452      	add	r2, sl
 80069ae:	4283      	cmp	r3, r0
 80069b0:	dd0f      	ble.n	80069d2 <forward_conv2d_nl_pool+0xe0a>
 80069b2:	4604      	mov	r4, r0
 80069b4:	468c      	mov	ip, r1
 80069b6:	4616      	mov	r6, r2
 80069b8:	ecb6 7a01 	vldmia	r6!, {s14}
 80069bc:	ecfc 7a01 	vldmia	ip!, {s15}
 80069c0:	3401      	adds	r4, #1
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80069c8:	d1f6      	bne.n	80069b8 <forward_conv2d_nl_pool+0xdf0>
 80069ca:	1a18      	subs	r0, r3, r0
 80069cc:	0080      	lsls	r0, r0, #2
 80069ce:	4402      	add	r2, r0
 80069d0:	4401      	add	r1, r0
 80069d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80069d4:	4402      	add	r2, r0
 80069d6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80069da:	f10e 0e01 	add.w	lr, lr, #1
 80069de:	4570      	cmp	r0, lr
 80069e0:	4449      	add	r1, r9
 80069e2:	f47f af70 	bne.w	80068c6 <forward_conv2d_nl_pool+0xcfe>
 80069e6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80069ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80069f0:	edc3 6a00 	vstr	s13, [r3]
 80069f4:	4608      	mov	r0, r1
 80069f6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80069fa:	440b      	add	r3, r1
 80069fc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006a00:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a02:	4410      	add	r0, r2
 8006a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a06:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006a10:	4418      	add	r0, r3
 8006a12:	1acb      	subs	r3, r1, r3
 8006a14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a18:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006a1c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8006a20:	f10b 0b01 	add.w	fp, fp, #1
 8006a24:	455b      	cmp	r3, fp
 8006a26:	eba8 0802 	sub.w	r8, r8, r2
 8006a2a:	f47f af14 	bne.w	8006856 <forward_conv2d_nl_pool+0xc8e>
 8006a2e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a38:	440a      	add	r2, r1
 8006a3a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006a3e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8006a42:	3204      	adds	r2, #4
 8006a44:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006a48:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a54:	f47f aed9 	bne.w	800680a <forward_conv2d_nl_pool+0xc42>
 8006a58:	e9d7 ab0b 	ldrd	sl, fp, [r7, #44]	; 0x2c
 8006a5c:	f7ff bbf2 	b.w	8006244 <forward_conv2d_nl_pool+0x67c>
 8006a60:	2000      	movs	r0, #0
 8006a62:	e64b      	b.n	80066fc <forward_conv2d_nl_pool+0xb34>
 8006a64:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a68:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8006a6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006a70:	1b19      	subs	r1, r3, r4
 8006a72:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006a76:	eef0 3a48 	vmov.f32	s7, s16
 8006a7a:	1b1a      	subs	r2, r3, r4
 8006a7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006a80:	e5be      	b.n	8006600 <forward_conv2d_nl_pool+0xa38>
 8006a82:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8006a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a88:	460a      	mov	r2, r1
 8006a8a:	440b      	add	r3, r1
 8006a8c:	e58e      	b.n	80065ac <forward_conv2d_nl_pool+0x9e4>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e78d      	b.n	80069ae <forward_conv2d_nl_pool+0xde6>
 8006a92:	eef0 6a46 	vmov.f32	s13, s12
 8006a96:	e7a6      	b.n	80069e6 <forward_conv2d_nl_pool+0xe1e>
 8006a98:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006a9c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006aa0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006aa4:	eba8 0303 	sub.w	r3, r8, r3
 8006aa8:	e6de      	b.n	8006868 <forward_conv2d_nl_pool+0xca0>
 8006aaa:	eeb0 6a48 	vmov.f32	s12, s16
 8006aae:	e6b8      	b.n	8006822 <forward_conv2d_nl_pool+0xc5a>
 8006ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ab4:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8006ab8:	320a      	adds	r2, #10
 8006aba:	f022 0207 	bic.w	r2, r2, #7
 8006abe:	ebad 0d02 	sub.w	sp, sp, r2
 8006ac2:	aa0a      	add	r2, sp, #40	; 0x28
 8006ac4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8006ac8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	f000 814f 	beq.w	8006d70 <forward_conv2d_nl_pool+0x11a8>
 8006ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
 8006ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006adc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ae2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ae6:	4413      	add	r3, r2
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006aee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006af8:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8006afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b0e:	b13b      	cbz	r3, 8006b20 <forward_conv2d_nl_pool+0xf58>
 8006b10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b14:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8006b18:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8006b1c:	f001 f918 	bl	8007d50 <memcpy>
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8135 	beq.w	8006d94 <forward_conv2d_nl_pool+0x11cc>
 8006b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2c:	ed93 6a00 	vldr	s12, [r3]
 8006b30:	3304      	adds	r3, #4
 8006b32:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8101 	beq.w	8006d40 <forward_conv2d_nl_pool+0x1178>
 8006b3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006b46:	eb03 0802 	add.w	r8, r3, r2
 8006b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b5a:	677b      	str	r3, [r7, #116]	; 0x74
 8006b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b64:	f04f 0b00 	mov.w	fp, #0
 8006b68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f2c0 8108 	blt.w	8006d82 <forward_conv2d_nl_pool+0x11ba>
 8006b72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006b76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8006b7e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006b82:	eb02 0c04 	add.w	ip, r2, r4
 8006b86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006b8a:	4540      	cmp	r0, r8
 8006b8c:	bf94      	ite	ls
 8006b8e:	ebc3 0300 	rsbls	r3, r3, r0
 8006b92:	ebc3 0308 	rsbhi	r3, r3, r8
 8006b96:	eba2 0903 	sub.w	r9, r2, r3
 8006b9a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006b9e:	1ac4      	subs	r4, r0, r3
 8006ba0:	fb03 f302 	mul.w	r3, r3, r2
 8006ba4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	f340 80e7 	ble.w	8006d7c <forward_conv2d_nl_pool+0x11b4>
 8006bae:	f023 050f 	bic.w	r5, r3, #15
 8006bb2:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 8006bb6:	1e68      	subs	r0, r5, #1
 8006bb8:	0900      	lsrs	r0, r0, #4
 8006bba:	3001      	adds	r0, #1
 8006bbc:	fb06 f204 	mul.w	r2, r6, r4
 8006bc0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006bc2:	0102      	lsls	r2, r0, #4
 8006bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bc6:	fb06 f909 	mul.w	r9, r6, r9
 8006bca:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8006bce:	eef0 6a46 	vmov.f32	s13, s12
 8006bd2:	f04f 0e00 	mov.w	lr, #0
 8006bd6:	4662      	mov	r2, ip
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	f340 80cd 	ble.w	8006d78 <forward_conv2d_nl_pool+0x11b0>
 8006bde:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8006be2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8006be6:	2600      	movs	r6, #0
 8006be8:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8006bec:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8006bf0:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8006bf4:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8006bf8:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8006bfc:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8006c00:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8006c04:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8006c08:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8006c0c:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8006c10:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8006c14:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8006c18:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8006c1c:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8006c20:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8006c24:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8006c28:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8006c2c:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8006c30:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8006c34:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8006c38:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006c3c:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8006c40:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8006c44:	ed54 3a04 	vldr	s7, [r4, #-16]
 8006c48:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006c4c:	ed54 4a03 	vldr	s9, [r4, #-12]
 8006c50:	ed10 5a03 	vldr	s10, [r0, #-12]
 8006c54:	ed50 5a02 	vldr	s11, [r0, #-8]
 8006c58:	ed14 7a02 	vldr	s14, [r4, #-8]
 8006c5c:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006c60:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8006c64:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006c68:	3610      	adds	r6, #16
 8006c6a:	42ae      	cmp	r6, r5
 8006c6c:	ed14 fa01 	vldr	s30, [r4, #-4]
 8006c70:	ed50 ea01 	vldr	s29, [r0, #-4]
 8006c74:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8006c78:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006c7c:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8006c80:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8006c84:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006c88:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006c8c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006c90:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006c94:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006c98:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006c9c:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006ca0:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006ca4:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006ca8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cac:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006cb0:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006cb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006cb8:	db96      	blt.n	8006be8 <forward_conv2d_nl_pool+0x1020>
 8006cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cbc:	4451      	add	r1, sl
 8006cbe:	4452      	add	r2, sl
 8006cc0:	4283      	cmp	r3, r0
 8006cc2:	dd0f      	ble.n	8006ce4 <forward_conv2d_nl_pool+0x111c>
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	468c      	mov	ip, r1
 8006cc8:	4616      	mov	r6, r2
 8006cca:	ecb6 7a01 	vldmia	r6!, {s14}
 8006cce:	ecfc 7a01 	vldmia	ip!, {s15}
 8006cd2:	3401      	adds	r4, #1
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cda:	d1f6      	bne.n	8006cca <forward_conv2d_nl_pool+0x1102>
 8006cdc:	1a18      	subs	r0, r3, r0
 8006cde:	0080      	lsls	r0, r0, #2
 8006ce0:	4402      	add	r2, r0
 8006ce2:	4401      	add	r1, r0
 8006ce4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006ce6:	4402      	add	r2, r0
 8006ce8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8006cec:	f10e 0e01 	add.w	lr, lr, #1
 8006cf0:	4570      	cmp	r0, lr
 8006cf2:	4449      	add	r1, r9
 8006cf4:	f47f af70 	bne.w	8006bd8 <forward_conv2d_nl_pool+0x1010>
 8006cf8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8006cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cfe:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8006d02:	edc3 6a00 	vstr	s13, [r3]
 8006d06:	4608      	mov	r0, r1
 8006d08:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006d12:	677b      	str	r3, [r7, #116]	; 0x74
 8006d14:	4410      	add	r0, r2
 8006d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d18:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006d22:	4418      	add	r0, r3
 8006d24:	1acb      	subs	r3, r1, r3
 8006d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006d2e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8006d32:	f10b 0b01 	add.w	fp, fp, #1
 8006d36:	455b      	cmp	r3, fp
 8006d38:	eba8 0802 	sub.w	r8, r8, r2
 8006d3c:	f47f af14 	bne.w	8006b68 <forward_conv2d_nl_pool+0xfa0>
 8006d40:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006d44:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006d52:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8006d56:	3204      	adds	r2, #4
 8006d58:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006d5c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006d60:	3301      	adds	r3, #1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d68:	f47f aecf 	bne.w	8006b0a <forward_conv2d_nl_pool+0xf42>
 8006d6c:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006d70:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8006d74:	f7ff ba66 	b.w	8006244 <forward_conv2d_nl_pool+0x67c>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e7a1      	b.n	8006cc0 <forward_conv2d_nl_pool+0x10f8>
 8006d7c:	eef0 6a46 	vmov.f32	s13, s12
 8006d80:	e7ba      	b.n	8006cf8 <forward_conv2d_nl_pool+0x1130>
 8006d82:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006d86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d8a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006d8e:	eba8 0303 	sub.w	r3, r8, r3
 8006d92:	e6f2      	b.n	8006b7a <forward_conv2d_nl_pool+0xfb2>
 8006d94:	eeb0 6a48 	vmov.f32	s12, s16
 8006d98:	e6cc      	b.n	8006b34 <forward_conv2d_nl_pool+0xf6c>
 8006d9a:	b16a      	cbz	r2, 8006db8 <forward_conv2d_nl_pool+0x11f0>
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 8006da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006dac:	f7fe bfb2 	b.w	8005d14 <forward_conv2d_nl_pool+0x14c>
 8006db0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006db4:	f7fe bf94 	b.w	8005ce0 <forward_conv2d_nl_pool+0x118>
 8006db8:	2201      	movs	r2, #1
 8006dba:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8006dbe:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 8006dc2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006dc6:	f7fe bfa5 	b.w	8005d14 <forward_conv2d_nl_pool+0x14c>
 8006dca:	3418      	adds	r4, #24
 8006dcc:	d007      	beq.n	8006dde <forward_conv2d_nl_pool+0x1216>
 8006dce:	4632      	mov	r2, r6
 8006dd0:	4635      	mov	r5, r6
 8006dd2:	4634      	mov	r4, r6
 8006dd4:	f7fe bf2a 	b.w	8005c2c <forward_conv2d_nl_pool+0x64>
 8006dd8:	4691      	mov	r9, r2
 8006dda:	f7fe bf14 	b.w	8005c06 <forward_conv2d_nl_pool+0x3e>
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	deff      	udf	#255	; 0xff
 8006de2:	2300      	movs	r3, #0
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	deff      	udf	#255	; 0xff
 8006de8:	4694      	mov	ip, r2
 8006dea:	f7fe bf01 	b.w	8005bf0 <forward_conv2d_nl_pool+0x28>
 8006dee:	4613      	mov	r3, r2
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	deff      	udf	#255	; 0xff
 8006df4:	2200      	movs	r2, #0
 8006df6:	f7fe bf18 	b.w	8005c2a <forward_conv2d_nl_pool+0x62>
 8006dfa:	bf00      	nop

08006dfc <forward_dense>:
 8006dfc:	6942      	ldr	r2, [r0, #20]
 8006dfe:	8813      	ldrh	r3, [r2, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 81ca 	beq.w	800719a <forward_dense+0x39e>
 8006e06:	6852      	ldr	r2, [r2, #4]
 8006e08:	6850      	ldr	r0, [r2, #4]
 8006e0a:	b100      	cbz	r0, 8006e0e <forward_dense+0x12>
 8006e0c:	6800      	ldr	r0, [r0, #0]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	f240 81c0 	bls.w	8007194 <forward_dense+0x398>
 8006e14:	6911      	ldr	r1, [r2, #16]
 8006e16:	b101      	cbz	r1, 8006e1a <forward_dense+0x1e>
 8006e18:	6809      	ldr	r1, [r1, #0]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	f000 81bf 	beq.w	800719e <forward_dense+0x3a2>
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	ed2d 8b10 	vpush	{d8-d15}
 8006e28:	69d3      	ldr	r3, [r2, #28]
 8006e2a:	b091      	sub	sp, #68	; 0x44
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 820b 	beq.w	8007248 <forward_dense+0x44c>
 8006e32:	681c      	ldr	r4, [r3, #0]
 8006e34:	9408      	str	r4, [sp, #32]
 8006e36:	f112 0418 	adds.w	r4, r2, #24
 8006e3a:	f000 81df 	beq.w	80071fc <forward_dense+0x400>
 8006e3e:	8b12      	ldrh	r2, [r2, #24]
 8006e40:	2a01      	cmp	r2, #1
 8006e42:	f240 81fe 	bls.w	8007242 <forward_dense+0x446>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 81da 	beq.w	8007200 <forward_dense+0x404>
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	9b08      	ldr	r3, [sp, #32]
 8006e52:	68cc      	ldr	r4, [r1, #12]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	68c5      	ldr	r5, [r0, #12]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006e5e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006e62:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8006e66:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8006e6a:	fa4c f505 	asr.w	r5, ip, r5
 8006e6e:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8006e72:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e74:	2a04      	cmp	r2, #4
 8006e76:	fb07 f506 	mul.w	r5, r7, r6
 8006e7a:	6864      	ldr	r4, [r4, #4]
 8006e7c:	9507      	str	r5, [sp, #28]
 8006e7e:	f000 81dd 	beq.w	800723c <forward_dense+0x440>
 8006e82:	2a08      	cmp	r2, #8
 8006e84:	f000 81da 	beq.w	800723c <forward_dense+0x440>
 8006e88:	f04f 0a00 	mov.w	sl, #0
 8006e8c:	698a      	ldr	r2, [r1, #24]
 8006e8e:	6981      	ldr	r1, [r0, #24]
 8006e90:	6890      	ldr	r0, [r2, #8]
 8006e92:	9a08      	ldr	r2, [sp, #32]
 8006e94:	9004      	str	r0, [sp, #16]
 8006e96:	6952      	ldr	r2, [r2, #20]
 8006e98:	688f      	ldr	r7, [r1, #8]
 8006e9a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006e9e:	00a2      	lsls	r2, r4, #2
 8006ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea2:	1886      	adds	r6, r0, r2
 8006ea4:	9a07      	ldr	r2, [sp, #28]
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	f000 81c3 	beq.w	8007232 <forward_dense+0x436>
 8006eac:	f1a8 0210 	sub.w	r2, r8, #16
 8006eb0:	0912      	lsrs	r2, r2, #4
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	0192      	lsls	r2, r2, #6
 8006eb6:	920c      	str	r2, [sp, #48]	; 0x30
 8006eb8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8006ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8006ebe:	689d      	ldr	r5, [r3, #8]
 8006ec0:	9b06      	ldr	r3, [sp, #24]
 8006ec2:	eddf aad0 	vldr	s21, [pc, #832]	; 8007204 <forward_dense+0x408>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	9205      	str	r2, [sp, #20]
 8006eca:	f008 020f 	and.w	r2, r8, #15
 8006ece:	920d      	str	r2, [sp, #52]	; 0x34
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d043      	beq.n	8006f5c <forward_dense+0x160>
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	689c      	ldr	r4, [r3, #8]
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	f1ba 0f00 	cmp.w	sl, #0
 8006ede:	d042      	beq.n	8006f66 <forward_dense+0x16a>
 8006ee0:	42b3      	cmp	r3, r6
 8006ee2:	d22a      	bcs.n	8006f3a <forward_dense+0x13e>
 8006ee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ee6:	469b      	mov	fp, r3
 8006ee8:	ab0f      	add	r3, sp, #60	; 0x3c
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	2a04      	cmp	r2, #4
 8006eee:	4633      	mov	r3, r6
 8006ef0:	4646      	mov	r6, r8
 8006ef2:	4698      	mov	r8, r3
 8006ef4:	f000 8156 	beq.w	80071a4 <forward_dense+0x3a8>
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	f000 8185 	beq.w	8007208 <forward_dense+0x40c>
 8006efe:	f8d4 c000 	ldr.w	ip, [r4]
 8006f02:	9803      	ldr	r0, [sp, #12]
 8006f04:	9600      	str	r6, [sp, #0]
 8006f06:	463b      	mov	r3, r7
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006f10:	f7fe fc7e 	bl	8005810 <ai_dict8_dot_array_f32>
 8006f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f16:	f84b 3b04 	str.w	r3, [fp], #4
 8006f1a:	45c3      	cmp	fp, r8
 8006f1c:	f104 0404 	add.w	r4, r4, #4
 8006f20:	444d      	add	r5, r9
 8006f22:	d3e9      	bcc.n	8006ef8 <forward_dense+0xfc>
 8006f24:	4643      	mov	r3, r8
 8006f26:	46b0      	mov	r8, r6
 8006f28:	461e      	mov	r6, r3
 8006f2a:	9a04      	ldr	r2, [sp, #16]
 8006f2c:	43d3      	mvns	r3, r2
 8006f2e:	4433      	add	r3, r6
 8006f30:	f023 0303 	bic.w	r3, r3, #3
 8006f34:	3304      	adds	r3, #4
 8006f36:	18d3      	adds	r3, r2, r3
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3c:	9b05      	ldr	r3, [sp, #20]
 8006f3e:	4417      	add	r7, r2
 8006f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f42:	4416      	add	r6, r2
 8006f44:	9a07      	ldr	r2, [sp, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	f000 8171 	beq.w	8007232 <forward_dense+0x436>
 8006f50:	9b08      	ldr	r3, [sp, #32]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	689d      	ldr	r5, [r3, #8]
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1bb      	bne.n	8006ed4 <forward_dense+0xd8>
 8006f5c:	461c      	mov	r4, r3
 8006f5e:	9b04      	ldr	r3, [sp, #16]
 8006f60:	f1ba 0f00 	cmp.w	sl, #0
 8006f64:	d1bc      	bne.n	8006ee0 <forward_dense+0xe4>
 8006f66:	42b3      	cmp	r3, r6
 8006f68:	d2e7      	bcs.n	8006f3a <forward_dense+0x13e>
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f6e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8006f72:	eb07 0c03 	add.w	ip, r7, r3
 8006f76:	469e      	mov	lr, r3
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	f000 80ff 	beq.w	800717c <forward_dense+0x380>
 8006f7e:	f1b8 0f0f 	cmp.w	r8, #15
 8006f82:	edd4 fa00 	vldr	s31, [r4]
 8006f86:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8007204 <forward_dense+0x408>
 8006f8a:	f104 0404 	add.w	r4, r4, #4
 8006f8e:	f240 80fd 	bls.w	800718c <forward_dense+0x390>
 8006f92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006f96:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8006fa0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006fa4:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8006fa8:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8006fac:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8006fb0:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8006fb4:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8006fb8:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8006fbc:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8006fc0:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8006fc4:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8006fc8:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8006fcc:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8006fd0:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8006fd4:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8006fd8:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8006fdc:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8006fe0:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8006fe4:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8006fe8:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8006fec:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8006ff0:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8006ff4:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8006ff8:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006ffc:	ed52 4a04 	vldr	s9, [r2, #-16]
 8007000:	ed12 5a03 	vldr	s10, [r2, #-12]
 8007004:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007008:	ed12 6a02 	vldr	s12, [r2, #-8]
 800700c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8007010:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8007014:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8007018:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800701c:	3910      	subs	r1, #16
 800701e:	290f      	cmp	r1, #15
 8007020:	ed53 ea01 	vldr	s29, [r3, #-4]
 8007024:	ed12 ea01 	vldr	s28, [r2, #-4]
 8007028:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800702c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007030:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007034:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007038:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800703c:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8007040:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007044:	eee8 7a88 	vfma.f32	s15, s17, s16
 8007048:	eee0 7a20 	vfma.f32	s15, s0, s1
 800704c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007050:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007054:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007058:	eee4 7a24 	vfma.f32	s15, s8, s9
 800705c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007060:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007064:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8007068:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800706c:	d896      	bhi.n	8006f9c <forward_dense+0x1a0>
 800706e:	eb05 010e 	add.w	r1, r5, lr
 8007072:	465b      	mov	r3, fp
 8007074:	4662      	mov	r2, ip
 8007076:	2b00      	cmp	r3, #0
 8007078:	d075      	beq.n	8007166 <forward_dense+0x36a>
 800707a:	ed91 7a00 	vldr	s14, [r1]
 800707e:	edd2 7a00 	vldr	s15, [r2]
 8007082:	2b01      	cmp	r3, #1
 8007084:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007088:	d06d      	beq.n	8007166 <forward_dense+0x36a>
 800708a:	ed91 7a01 	vldr	s14, [r1, #4]
 800708e:	edd2 7a01 	vldr	s15, [r2, #4]
 8007092:	2b02      	cmp	r3, #2
 8007094:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007098:	d065      	beq.n	8007166 <forward_dense+0x36a>
 800709a:	ed91 7a02 	vldr	s14, [r1, #8]
 800709e:	edd2 7a02 	vldr	s15, [r2, #8]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80070a8:	d05d      	beq.n	8007166 <forward_dense+0x36a>
 80070aa:	ed91 7a03 	vldr	s14, [r1, #12]
 80070ae:	edd2 7a03 	vldr	s15, [r2, #12]
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80070b8:	d055      	beq.n	8007166 <forward_dense+0x36a>
 80070ba:	ed91 7a04 	vldr	s14, [r1, #16]
 80070be:	edd2 7a04 	vldr	s15, [r2, #16]
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80070c8:	d04d      	beq.n	8007166 <forward_dense+0x36a>
 80070ca:	ed91 7a05 	vldr	s14, [r1, #20]
 80070ce:	edd2 7a05 	vldr	s15, [r2, #20]
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80070d8:	d045      	beq.n	8007166 <forward_dense+0x36a>
 80070da:	ed91 7a06 	vldr	s14, [r1, #24]
 80070de:	edd2 7a06 	vldr	s15, [r2, #24]
 80070e2:	2b07      	cmp	r3, #7
 80070e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80070e8:	d03d      	beq.n	8007166 <forward_dense+0x36a>
 80070ea:	ed91 7a07 	vldr	s14, [r1, #28]
 80070ee:	edd2 7a07 	vldr	s15, [r2, #28]
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80070f8:	d035      	beq.n	8007166 <forward_dense+0x36a>
 80070fa:	ed91 7a08 	vldr	s14, [r1, #32]
 80070fe:	edd2 7a08 	vldr	s15, [r2, #32]
 8007102:	2b09      	cmp	r3, #9
 8007104:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007108:	d02d      	beq.n	8007166 <forward_dense+0x36a>
 800710a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800710e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007112:	2b0a      	cmp	r3, #10
 8007114:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007118:	d025      	beq.n	8007166 <forward_dense+0x36a>
 800711a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800711e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007122:	2b0b      	cmp	r3, #11
 8007124:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007128:	d01d      	beq.n	8007166 <forward_dense+0x36a>
 800712a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800712e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007132:	2b0c      	cmp	r3, #12
 8007134:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007138:	d015      	beq.n	8007166 <forward_dense+0x36a>
 800713a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800713e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007142:	2b0d      	cmp	r3, #13
 8007144:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007148:	d00d      	beq.n	8007166 <forward_dense+0x36a>
 800714a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800714e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007152:	2b0e      	cmp	r3, #14
 8007154:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007158:	d005      	beq.n	8007166 <forward_dense+0x36a>
 800715a:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800715e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007162:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007166:	444d      	add	r5, r9
 8007168:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800716c:	ece0 6a01 	vstmia	r0!, {s13}
 8007170:	42b0      	cmp	r0, r6
 8007172:	f4bf aeda 	bcs.w	8006f2a <forward_dense+0x12e>
 8007176:	2c00      	cmp	r4, #0
 8007178:	f47f af01 	bne.w	8006f7e <forward_dense+0x182>
 800717c:	f1b8 0f0f 	cmp.w	r8, #15
 8007180:	eef0 fa6a 	vmov.f32	s31, s21
 8007184:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007204 <forward_dense+0x408>
 8007188:	f63f af03 	bhi.w	8006f92 <forward_dense+0x196>
 800718c:	4643      	mov	r3, r8
 800718e:	4629      	mov	r1, r5
 8007190:	463a      	mov	r2, r7
 8007192:	e770      	b.n	8007076 <forward_dense+0x27a>
 8007194:	2300      	movs	r3, #0
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	deff      	udf	#255	; 0xff
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	deff      	udf	#255	; 0xff
 800719e:	2300      	movs	r3, #0
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	deff      	udf	#255	; 0xff
 80071a4:	b1ac      	cbz	r4, 80071d2 <forward_dense+0x3d6>
 80071a6:	f8d4 c000 	ldr.w	ip, [r4]
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	9600      	str	r6, [sp, #0]
 80071ae:	463b      	mov	r3, r7
 80071b0:	4629      	mov	r1, r5
 80071b2:	4652      	mov	r2, sl
 80071b4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80071b8:	f7fe fbf8 	bl	80059ac <ai_dict4_dot_array_f32>
 80071bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071be:	f84b 3b04 	str.w	r3, [fp], #4
 80071c2:	45c3      	cmp	fp, r8
 80071c4:	f104 0404 	add.w	r4, r4, #4
 80071c8:	444d      	add	r5, r9
 80071ca:	f4bf aeab 	bcs.w	8006f24 <forward_dense+0x128>
 80071ce:	2c00      	cmp	r4, #0
 80071d0:	d1e9      	bne.n	80071a6 <forward_dense+0x3aa>
 80071d2:	4634      	mov	r4, r6
 80071d4:	4646      	mov	r6, r8
 80071d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071da:	9400      	str	r4, [sp, #0]
 80071dc:	463b      	mov	r3, r7
 80071de:	4629      	mov	r1, r5
 80071e0:	4652      	mov	r2, sl
 80071e2:	4640      	mov	r0, r8
 80071e4:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80071e8:	f7fe fbe0 	bl	80059ac <ai_dict4_dot_array_f32>
 80071ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071ee:	f84b 3b04 	str.w	r3, [fp], #4
 80071f2:	45b3      	cmp	fp, r6
 80071f4:	444d      	add	r5, r9
 80071f6:	d3f0      	bcc.n	80071da <forward_dense+0x3de>
 80071f8:	46a0      	mov	r8, r4
 80071fa:	e696      	b.n	8006f2a <forward_dense+0x12e>
 80071fc:	9406      	str	r4, [sp, #24]
 80071fe:	e627      	b.n	8006e50 <forward_dense+0x54>
 8007200:	9306      	str	r3, [sp, #24]
 8007202:	e625      	b.n	8006e50 <forward_dense+0x54>
 8007204:	00000000 	.word	0x00000000
 8007208:	4634      	mov	r4, r6
 800720a:	4646      	mov	r6, r8
 800720c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007210:	9400      	str	r4, [sp, #0]
 8007212:	463b      	mov	r3, r7
 8007214:	4629      	mov	r1, r5
 8007216:	4652      	mov	r2, sl
 8007218:	4640      	mov	r0, r8
 800721a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800721e:	f7fe faf7 	bl	8005810 <ai_dict8_dot_array_f32>
 8007222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007224:	f84b 3b04 	str.w	r3, [fp], #4
 8007228:	45b3      	cmp	fp, r6
 800722a:	444d      	add	r5, r9
 800722c:	d3f0      	bcc.n	8007210 <forward_dense+0x414>
 800722e:	46a0      	mov	r8, r4
 8007230:	e67b      	b.n	8006f2a <forward_dense+0x12e>
 8007232:	b011      	add	sp, #68	; 0x44
 8007234:	ecbd 8b10 	vpop	{d8-d15}
 8007238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8007240:	e624      	b.n	8006e8c <forward_dense+0x90>
 8007242:	2300      	movs	r3, #0
 8007244:	9306      	str	r3, [sp, #24]
 8007246:	e603      	b.n	8006e50 <forward_dense+0x54>
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	e5f4      	b.n	8006e36 <forward_dense+0x3a>

0800724c <nl_func_relu_array_f32>:
 800724c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007250:	3a01      	subs	r2, #1
 8007252:	688b      	ldr	r3, [r1, #8]
 8007254:	6880      	ldr	r0, [r0, #8]
 8007256:	0092      	lsls	r2, r2, #2
 8007258:	189b      	adds	r3, r3, r2
 800725a:	d21a      	bcs.n	8007292 <nl_func_relu_array_f32+0x46>
 800725c:	b410      	push	{r4}
 800725e:	3204      	adds	r2, #4
 8007260:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007294 <nl_func_relu_array_f32+0x48>
 8007264:	4410      	add	r0, r2
 8007266:	3304      	adds	r3, #4
 8007268:	ed53 7a01 	vldr	s15, [r3, #-4]
 800726c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007274:	bfb8      	it	lt
 8007276:	eef0 7a47 	vmovlt.f32	s15, s14
 800727a:	ed60 7a01 	vstmdb	r0!, {s15}
 800727e:	688c      	ldr	r4, [r1, #8]
 8007280:	f1a3 0208 	sub.w	r2, r3, #8
 8007284:	4294      	cmp	r4, r2
 8007286:	f1a3 0304 	sub.w	r3, r3, #4
 800728a:	d9ed      	bls.n	8007268 <nl_func_relu_array_f32+0x1c>
 800728c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	4770      	bx	lr
 8007294:	00000000 	.word	0x00000000

08007298 <nl_func_relu_generic_array_f32>:
 8007298:	b430      	push	{r4, r5}
 800729a:	edd3 6a02 	vldr	s13, [r3, #8]
 800729e:	6880      	ldr	r0, [r0, #8]
 80072a0:	688c      	ldr	r4, [r1, #8]
 80072a2:	ed93 7a00 	vldr	s14, [r3]
 80072a6:	ed93 6a01 	vldr	s12, [r3, #4]
 80072aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80072ae:	3a01      	subs	r2, #1
 80072b0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80072b4:	0092      	lsls	r2, r2, #2
 80072b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ba:	4410      	add	r0, r2
 80072bc:	4422      	add	r2, r4
 80072be:	d421      	bmi.n	8007304 <nl_func_relu_generic_array_f32+0x6c>
 80072c0:	42a2      	cmp	r2, r4
 80072c2:	d33d      	bcc.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 80072c4:	1d13      	adds	r3, r2, #4
 80072c6:	1d02      	adds	r2, r0, #4
 80072c8:	e010      	b.n	80072ec <nl_func_relu_generic_array_f32+0x54>
 80072ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80072d6:	dd01      	ble.n	80072dc <nl_func_relu_generic_array_f32+0x44>
 80072d8:	ee65 7a86 	vmul.f32	s15, s11, s12
 80072dc:	ed62 7a01 	vstmdb	r2!, {s15}
 80072e0:	6888      	ldr	r0, [r1, #8]
 80072e2:	f1a3 0408 	sub.w	r4, r3, #8
 80072e6:	4284      	cmp	r4, r0
 80072e8:	462b      	mov	r3, r5
 80072ea:	d329      	bcc.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 80072ec:	ed53 7a01 	vldr	s15, [r3, #-4]
 80072f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	f1a3 0504 	sub.w	r5, r3, #4
 80072fc:	dce5      	bgt.n	80072ca <nl_func_relu_generic_array_f32+0x32>
 80072fe:	eef0 7a66 	vmov.f32	s15, s13
 8007302:	e7eb      	b.n	80072dc <nl_func_relu_generic_array_f32+0x44>
 8007304:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	d01a      	beq.n	8007344 <nl_func_relu_generic_array_f32+0xac>
 800730e:	42a2      	cmp	r2, r4
 8007310:	d316      	bcc.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 8007312:	1d13      	adds	r3, r2, #4
 8007314:	1d02      	adds	r2, r0, #4
 8007316:	ed53 7a01 	vldr	s15, [r3, #-4]
 800731a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800731e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007322:	f1a3 0408 	sub.w	r4, r3, #8
 8007326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732a:	f1a3 0004 	sub.w	r0, r3, #4
 800732e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007332:	4623      	mov	r3, r4
 8007334:	d51e      	bpl.n	8007374 <nl_func_relu_generic_array_f32+0xdc>
 8007336:	ed62 6a01 	vstmdb	r2!, {s13}
 800733a:	688b      	ldr	r3, [r1, #8]
 800733c:	42a3      	cmp	r3, r4
 800733e:	d91e      	bls.n	800737e <nl_func_relu_generic_array_f32+0xe6>
 8007340:	bc30      	pop	{r4, r5}
 8007342:	4770      	bx	lr
 8007344:	42a2      	cmp	r2, r4
 8007346:	d3fb      	bcc.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 8007348:	1d13      	adds	r3, r2, #4
 800734a:	2500      	movs	r5, #0
 800734c:	1d02      	adds	r2, r0, #4
 800734e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007356:	f1a3 0408 	sub.w	r4, r3, #8
 800735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735e:	f1a3 0004 	sub.w	r0, r3, #4
 8007362:	4623      	mov	r3, r4
 8007364:	d80d      	bhi.n	8007382 <nl_func_relu_generic_array_f32+0xea>
 8007366:	ed62 7a01 	vstmdb	r2!, {s15}
 800736a:	688b      	ldr	r3, [r1, #8]
 800736c:	42a3      	cmp	r3, r4
 800736e:	d8e7      	bhi.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 8007370:	4603      	mov	r3, r0
 8007372:	e7ec      	b.n	800734e <nl_func_relu_generic_array_f32+0xb6>
 8007374:	ed62 7a01 	vstmdb	r2!, {s15}
 8007378:	688c      	ldr	r4, [r1, #8]
 800737a:	429c      	cmp	r4, r3
 800737c:	d8e0      	bhi.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 800737e:	4603      	mov	r3, r0
 8007380:	e7c9      	b.n	8007316 <nl_func_relu_generic_array_f32+0x7e>
 8007382:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007386:	688c      	ldr	r4, [r1, #8]
 8007388:	429c      	cmp	r4, r3
 800738a:	d8d9      	bhi.n	8007340 <nl_func_relu_generic_array_f32+0xa8>
 800738c:	4603      	mov	r3, r0
 800738e:	e7de      	b.n	800734e <nl_func_relu_generic_array_f32+0xb6>

08007390 <forward_relu>:
 8007390:	6942      	ldr	r2, [r0, #20]
 8007392:	8813      	ldrh	r3, [r2, #0]
 8007394:	b33b      	cbz	r3, 80073e6 <forward_relu+0x56>
 8007396:	b470      	push	{r4, r5, r6}
 8007398:	6852      	ldr	r2, [r2, #4]
 800739a:	6856      	ldr	r6, [r2, #4]
 800739c:	b106      	cbz	r6, 80073a0 <forward_relu+0x10>
 800739e:	6836      	ldr	r6, [r6, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d91d      	bls.n	80073e0 <forward_relu+0x50>
 80073a4:	6913      	ldr	r3, [r2, #16]
 80073a6:	b103      	cbz	r3, 80073aa <forward_relu+0x1a>
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6982      	ldr	r2, [r0, #24]
 80073ac:	68b4      	ldr	r4, [r6, #8]
 80073ae:	6998      	ldr	r0, [r3, #24]
 80073b0:	69b1      	ldr	r1, [r6, #24]
 80073b2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	d041      	beq.n	800743e <forward_relu+0xae>
 80073ba:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 80073be:	2d01      	cmp	r5, #1
 80073c0:	d013      	beq.n	80073ea <forward_relu+0x5a>
 80073c2:	2c00      	cmp	r4, #0
 80073c4:	d06f      	beq.n	80074a6 <forward_relu+0x116>
 80073c6:	68f6      	ldr	r6, [r6, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80073ce:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	fb05 f202 	mul.w	r2, r5, r2
 80073d8:	d1f9      	bne.n	80073ce <forward_relu+0x3e>
 80073da:	bc70      	pop	{r4, r5, r6}
 80073dc:	f7ff bf5c 	b.w	8007298 <nl_func_relu_generic_array_f32>
 80073e0:	2300      	movs	r3, #0
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	deff      	udf	#255	; 0xff
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	deff      	udf	#255	; 0xff
 80073ea:	6880      	ldr	r0, [r0, #8]
 80073ec:	688a      	ldr	r2, [r1, #8]
 80073ee:	ed93 7a00 	vldr	s14, [r3]
 80073f2:	b184      	cbz	r4, 8007416 <forward_relu+0x86>
 80073f4:	68f6      	ldr	r6, [r6, #12]
 80073f6:	462b      	mov	r3, r5
 80073f8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80073fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007400:	42a6      	cmp	r6, r4
 8007402:	fb05 f303 	mul.w	r3, r5, r3
 8007406:	d1f9      	bne.n	80073fc <forward_relu+0x6c>
 8007408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800740c:	3b01      	subs	r3, #1
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	18d2      	adds	r2, r2, r3
 8007412:	4418      	add	r0, r3
 8007414:	d23d      	bcs.n	8007492 <forward_relu+0x102>
 8007416:	1d13      	adds	r3, r2, #4
 8007418:	2500      	movs	r5, #0
 800741a:	1d02      	adds	r2, r0, #4
 800741c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007428:	f1a3 0004 	sub.w	r0, r3, #4
 800742c:	d833      	bhi.n	8007496 <forward_relu+0x106>
 800742e:	ed62 7a01 	vstmdb	r2!, {s15}
 8007432:	688c      	ldr	r4, [r1, #8]
 8007434:	3b08      	subs	r3, #8
 8007436:	429c      	cmp	r4, r3
 8007438:	d82b      	bhi.n	8007492 <forward_relu+0x102>
 800743a:	4603      	mov	r3, r0
 800743c:	e7ee      	b.n	800741c <forward_relu+0x8c>
 800743e:	6880      	ldr	r0, [r0, #8]
 8007440:	688b      	ldr	r3, [r1, #8]
 8007442:	b184      	cbz	r4, 8007466 <forward_relu+0xd6>
 8007444:	68f6      	ldr	r6, [r6, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800744c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007450:	42a6      	cmp	r6, r4
 8007452:	fb05 f202 	mul.w	r2, r5, r2
 8007456:	d1f9      	bne.n	800744c <forward_relu+0xbc>
 8007458:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800745c:	3a01      	subs	r2, #1
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	189b      	adds	r3, r3, r2
 8007462:	4410      	add	r0, r2
 8007464:	d215      	bcs.n	8007492 <forward_relu+0x102>
 8007466:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80074ac <forward_relu+0x11c>
 800746a:	3304      	adds	r3, #4
 800746c:	3004      	adds	r0, #4
 800746e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	bfb8      	it	lt
 800747c:	eef0 7a47 	vmovlt.f32	s15, s14
 8007480:	ed60 7a01 	vstmdb	r0!, {s15}
 8007484:	688c      	ldr	r4, [r1, #8]
 8007486:	f1a3 0208 	sub.w	r2, r3, #8
 800748a:	4294      	cmp	r4, r2
 800748c:	f1a3 0304 	sub.w	r3, r3, #4
 8007490:	d9ed      	bls.n	800746e <forward_relu+0xde>
 8007492:	bc70      	pop	{r4, r5, r6}
 8007494:	4770      	bx	lr
 8007496:	f842 5d04 	str.w	r5, [r2, #-4]!
 800749a:	688c      	ldr	r4, [r1, #8]
 800749c:	3b08      	subs	r3, #8
 800749e:	429c      	cmp	r4, r3
 80074a0:	d8f7      	bhi.n	8007492 <forward_relu+0x102>
 80074a2:	4603      	mov	r3, r0
 80074a4:	e7ba      	b.n	800741c <forward_relu+0x8c>
 80074a6:	2201      	movs	r2, #1
 80074a8:	e797      	b.n	80073da <forward_relu+0x4a>
 80074aa:	bf00      	nop
 80074ac:	00000000 	.word	0x00000000

080074b0 <forward_sm>:
 80074b0:	6942      	ldr	r2, [r0, #20]
 80074b2:	8813      	ldrh	r3, [r2, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 808a 	beq.w	80075ce <forward_sm+0x11e>
 80074ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074be:	ed2d 8b04 	vpush	{d8-d9}
 80074c2:	6852      	ldr	r2, [r2, #4]
 80074c4:	6855      	ldr	r5, [r2, #4]
 80074c6:	b085      	sub	sp, #20
 80074c8:	b105      	cbz	r5, 80074cc <forward_sm+0x1c>
 80074ca:	682d      	ldr	r5, [r5, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d976      	bls.n	80075be <forward_sm+0x10e>
 80074d0:	6913      	ldr	r3, [r2, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d071      	beq.n	80075ba <forward_sm+0x10a>
 80074d6:	681f      	ldr	r7, [r3, #0]
 80074d8:	68ec      	ldr	r4, [r5, #12]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	68ab      	ldr	r3, [r5, #8]
 80074de:	6850      	ldr	r0, [r2, #4]
 80074e0:	6862      	ldr	r2, [r4, #4]
 80074e2:	9201      	str	r2, [sp, #4]
 80074e4:	0a1b      	lsrs	r3, r3, #8
 80074e6:	d074      	beq.n	80075d2 <forward_sm+0x122>
 80074e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074ec:	2201      	movs	r2, #1
 80074ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074f2:	429c      	cmp	r4, r3
 80074f4:	fb01 f202 	mul.w	r2, r1, r2
 80074f8:	d1f9      	bne.n	80074ee <forward_sm+0x3e>
 80074fa:	69ae      	ldr	r6, [r5, #24]
 80074fc:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8007500:	9f01      	ldr	r7, [sp, #4]
 8007502:	68b5      	ldr	r5, [r6, #8]
 8007504:	68f3      	ldr	r3, [r6, #12]
 8007506:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800750a:	1bd1      	subs	r1, r2, r7
 800750c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8007510:	1a12      	subs	r2, r2, r0
 8007512:	429d      	cmp	r5, r3
 8007514:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007518:	d345      	bcc.n	80075a6 <forward_sm+0xf6>
 800751a:	00bb      	lsls	r3, r7, #2
 800751c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	f1c8 0200 	rsb	r2, r8, #0
 8007526:	425b      	negs	r3, r3
 8007528:	9203      	str	r2, [sp, #12]
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007530:	60b5      	str	r5, [r6, #8]
 8007532:	9b01      	ldr	r3, [sp, #4]
 8007534:	f8c9 4008 	str.w	r4, [r9, #8]
 8007538:	68b2      	ldr	r2, [r6, #8]
 800753a:	2b01      	cmp	r3, #1
 800753c:	ed92 8a00 	vldr	s16, [r2]
 8007540:	d940      	bls.n	80075c4 <forward_sm+0x114>
 8007542:	9900      	ldr	r1, [sp, #0]
 8007544:	1d13      	adds	r3, r2, #4
 8007546:	1857      	adds	r7, r2, r1
 8007548:	ecf3 7a01 	vldmia	r3!, {s15}
 800754c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007554:	bfb8      	it	lt
 8007556:	eeb0 8a67 	vmovlt.f32	s16, s15
 800755a:	429f      	cmp	r7, r3
 800755c:	d1f4      	bne.n	8007548 <forward_sm+0x98>
 800755e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 80075d8 <forward_sm+0x128>
 8007562:	4692      	mov	sl, r2
 8007564:	46a3      	mov	fp, r4
 8007566:	46a0      	mov	r8, r4
 8007568:	ecba 0a01 	vldmia	sl!, {s0}
 800756c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007570:	f000 fa62 	bl	8007a38 <expf>
 8007574:	4557      	cmp	r7, sl
 8007576:	eca8 0a01 	vstmia	r8!, {s0}
 800757a:	ee78 8a80 	vadd.f32	s17, s17, s0
 800757e:	d1f3      	bne.n	8007568 <forward_sm+0xb8>
 8007580:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8007584:	9b00      	ldr	r3, [sp, #0]
 8007586:	18e2      	adds	r2, r4, r3
 8007588:	eddb 7a00 	vldr	s15, [fp]
 800758c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007590:	eceb 7a01 	vstmia	fp!, {s15}
 8007594:	455a      	cmp	r2, fp
 8007596:	d1f7      	bne.n	8007588 <forward_sm+0xd8>
 8007598:	9a02      	ldr	r2, [sp, #8]
 800759a:	68f3      	ldr	r3, [r6, #12]
 800759c:	4415      	add	r5, r2
 800759e:	9a03      	ldr	r2, [sp, #12]
 80075a0:	429d      	cmp	r5, r3
 80075a2:	4414      	add	r4, r2
 80075a4:	d2c4      	bcs.n	8007530 <forward_sm+0x80>
 80075a6:	60b3      	str	r3, [r6, #8]
 80075a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80075ac:	f8c9 3008 	str.w	r3, [r9, #8]
 80075b0:	b005      	add	sp, #20
 80075b2:	ecbd 8b04 	vpop	{d8-d9}
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	deff      	udf	#255	; 0xff
 80075be:	2300      	movs	r3, #0
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	deff      	udf	#255	; 0xff
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0e7      	beq.n	8007598 <forward_sm+0xe8>
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	18d7      	adds	r7, r2, r3
 80075cc:	e7c7      	b.n	800755e <forward_sm+0xae>
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	deff      	udf	#255	; 0xff
 80075d2:	2201      	movs	r2, #1
 80075d4:	e791      	b.n	80074fa <forward_sm+0x4a>
 80075d6:	bf00      	nop
 80075d8:	00000000 	.word	0x00000000

080075dc <pool_func_mp_array_f32>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	b093      	sub	sp, #76	; 0x4c
 80075e2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80075e6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80075e8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 80075ec:	68a8      	ldr	r0, [r5, #8]
 80075ee:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 80075f2:	9508      	str	r5, [sp, #32]
 80075f4:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 80075f8:	9002      	str	r0, [sp, #8]
 80075fa:	950d      	str	r5, [sp, #52]	; 0x34
 80075fc:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8007600:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8007604:	9004      	str	r0, [sp, #16]
 8007606:	9506      	str	r5, [sp, #24]
 8007608:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800760c:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8007610:	9009      	str	r0, [sp, #36]	; 0x24
 8007612:	950b      	str	r5, [sp, #44]	; 0x2c
 8007614:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8007618:	9200      	str	r2, [sp, #0]
 800761a:	468a      	mov	sl, r1
 800761c:	4699      	mov	r9, r3
 800761e:	b95c      	cbnz	r4, 8007638 <pool_func_mp_array_f32+0x5c>
 8007620:	b950      	cbnz	r0, 8007638 <pool_func_mp_array_f32+0x5c>
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	1a5a      	subs	r2, r3, r1
 8007626:	9b06      	ldr	r3, [sp, #24]
 8007628:	9908      	ldr	r1, [sp, #32]
 800762a:	3a01      	subs	r2, #1
 800762c:	3b01      	subs	r3, #1
 800762e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8007632:	041a      	lsls	r2, r3, #16
 8007634:	f100 809b 	bmi.w	800776e <pool_func_mp_array_f32+0x192>
 8007638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 808b 	beq.w	8007756 <pool_func_mp_array_f32+0x17a>
 8007640:	9b06      	ldr	r3, [sp, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8087 	beq.w	8007756 <pool_func_mp_array_f32+0x17a>
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	f000 8083 	beq.w	8007756 <pool_func_mp_array_f32+0x17a>
 8007650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007652:	1b1c      	subs	r4, r3, r4
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	1a1b      	subs	r3, r3, r0
 8007658:	b29b      	uxth	r3, r3
 800765a:	4240      	negs	r0, r0
 800765c:	2200      	movs	r2, #0
 800765e:	b2a1      	uxth	r1, r4
 8007660:	930f      	str	r3, [sp, #60]	; 0x3c
 8007662:	b283      	uxth	r3, r0
 8007664:	920e      	str	r2, [sp, #56]	; 0x38
 8007666:	910c      	str	r1, [sp, #48]	; 0x30
 8007668:	9310      	str	r3, [sp, #64]	; 0x40
 800766a:	9c06      	ldr	r4, [sp, #24]
 800766c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	fb02 f204 	mul.w	r2, r2, r4
 8007674:	1acb      	subs	r3, r1, r3
 8007676:	920a      	str	r2, [sp, #40]	; 0x28
 8007678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800767a:	9205      	str	r2, [sp, #20]
 800767c:	2000      	movs	r0, #0
 800767e:	b21b      	sxth	r3, r3
 8007680:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	9007      	str	r0, [sp, #28]
 8007686:	4603      	mov	r3, r0
 8007688:	fa0f f881 	sxth.w	r8, r1
 800768c:	9204      	str	r2, [sp, #16]
 800768e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007690:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8007694:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f04f 0e00 	mov.w	lr, #0
 800769e:	fb09 f303 	mul.w	r3, r9, r3
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 80076a8:	4675      	mov	r5, lr
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	eddf 7a78 	vldr	s15, [pc, #480]	; 8007890 <pool_func_mp_array_f32+0x2b4>
 80076b0:	4588      	cmp	r8, r1
 80076b2:	dd24      	ble.n	80076fe <pool_func_mp_array_f32+0x122>
 80076b4:	4564      	cmp	r4, ip
 80076b6:	dd1e      	ble.n	80076f6 <pool_func_mp_array_f32+0x11a>
 80076b8:	2900      	cmp	r1, #0
 80076ba:	fb0a f601 	mul.w	r6, sl, r1
 80076be:	db1a      	blt.n	80076f6 <pool_func_mp_array_f32+0x11a>
 80076c0:	9b00      	ldr	r3, [sp, #0]
 80076c2:	4299      	cmp	r1, r3
 80076c4:	da17      	bge.n	80076f6 <pool_func_mp_array_f32+0x11a>
 80076c6:	f1bc 0f00 	cmp.w	ip, #0
 80076ca:	4663      	mov	r3, ip
 80076cc:	db46      	blt.n	800775c <pool_func_mp_array_f32+0x180>
 80076ce:	18f2      	adds	r2, r6, r3
 80076d0:	fb09 5202 	mla	r2, r9, r2, r5
 80076d4:	1c58      	adds	r0, r3, #1
 80076d6:	459a      	cmp	sl, r3
 80076d8:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80076dc:	b203      	sxth	r3, r0
 80076de:	dd08      	ble.n	80076f2 <pool_func_mp_array_f32+0x116>
 80076e0:	ed92 7a00 	vldr	s14, [r2]
 80076e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ec:	bfb8      	it	lt
 80076ee:	eef0 7a47 	vmovlt.f32	s15, s14
 80076f2:	429c      	cmp	r4, r3
 80076f4:	dceb      	bgt.n	80076ce <pool_func_mp_array_f32+0xf2>
 80076f6:	3101      	adds	r1, #1
 80076f8:	b209      	sxth	r1, r1
 80076fa:	4588      	cmp	r8, r1
 80076fc:	dcda      	bgt.n	80076b4 <pool_func_mp_array_f32+0xd8>
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	f10e 0e01 	add.w	lr, lr, #1
 8007704:	441d      	add	r5, r3
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	fa0f fe8e 	sxth.w	lr, lr
 800770c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007710:	45ce      	cmp	lr, r9
 8007712:	edc5 7a00 	vstr	s15, [r5]
 8007716:	4675      	mov	r5, lr
 8007718:	dbc7      	blt.n	80076aa <pool_func_mp_array_f32+0xce>
 800771a:	9b07      	ldr	r3, [sp, #28]
 800771c:	9808      	ldr	r0, [sp, #32]
 800771e:	3301      	adds	r3, #1
 8007720:	b219      	sxth	r1, r3
 8007722:	9b05      	ldr	r3, [sp, #20]
 8007724:	9107      	str	r1, [sp, #28]
 8007726:	461a      	mov	r2, r3
 8007728:	4402      	add	r2, r0
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	b292      	uxth	r2, r2
 800772e:	9205      	str	r2, [sp, #20]
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	4403      	add	r3, r0
 8007734:	b29b      	uxth	r3, r3
 8007736:	428a      	cmp	r2, r1
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	460b      	mov	r3, r1
 800773c:	dca7      	bgt.n	800768e <pool_func_mp_array_f32+0xb2>
 800773e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007740:	3301      	adds	r3, #1
 8007742:	b21a      	sxth	r2, r3
 8007744:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8007748:	440b      	add	r3, r1
 800774a:	b29b      	uxth	r3, r3
 800774c:	930c      	str	r3, [sp, #48]	; 0x30
 800774e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007750:	920e      	str	r2, [sp, #56]	; 0x38
 8007752:	4293      	cmp	r3, r2
 8007754:	dc89      	bgt.n	800766a <pool_func_mp_array_f32+0x8e>
 8007756:	b013      	add	sp, #76	; 0x4c
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	3301      	adds	r3, #1
 800775e:	b21b      	sxth	r3, r3
 8007760:	42bb      	cmp	r3, r7
 8007762:	dac6      	bge.n	80076f2 <pool_func_mp_array_f32+0x116>
 8007764:	3301      	adds	r3, #1
 8007766:	b21b      	sxth	r3, r3
 8007768:	42bb      	cmp	r3, r7
 800776a:	dbf7      	blt.n	800775c <pool_func_mp_array_f32+0x180>
 800776c:	e7c1      	b.n	80076f2 <pool_func_mp_array_f32+0x116>
 800776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007770:	9a00      	ldr	r2, [sp, #0]
 8007772:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007774:	1a9a      	subs	r2, r3, r2
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	3a01      	subs	r2, #1
 800777a:	3b01      	subs	r3, #1
 800777c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	f57f af59 	bpl.w	8007638 <pool_func_mp_array_f32+0x5c>
 8007786:	fb0a f309 	mul.w	r3, sl, r9
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8007790:	930e      	str	r3, [sp, #56]	; 0x38
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	9001      	str	r0, [sp, #4]
 8007796:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80077a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077a2:	429a      	cmp	r2, r3
 80077a4:	ddd7      	ble.n	8007756 <pool_func_mp_array_f32+0x17a>
 80077a6:	9a00      	ldr	r2, [sp, #0]
 80077a8:	9906      	ldr	r1, [sp, #24]
 80077aa:	fa0f f882 	sxth.w	r8, r2
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d062      	beq.n	8007878 <pool_func_mp_array_f32+0x29c>
 80077b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	1a12      	subs	r2, r2, r0
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	b213      	sxth	r3, r2
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	d058      	beq.n	8007878 <pool_func_mp_array_f32+0x29c>
 80077c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077c8:	fb02 f303 	mul.w	r3, r2, r3
 80077cc:	2600      	movs	r6, #0
 80077ce:	930c      	str	r3, [sp, #48]	; 0x30
 80077d0:	9b04      	ldr	r3, [sp, #16]
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	4637      	mov	r7, r6
 80077d6:	46b2      	mov	sl, r6
 80077d8:	9b05      	ldr	r3, [sp, #20]
 80077da:	9611      	str	r6, [sp, #68]	; 0x44
 80077dc:	eb0a 0b03 	add.w	fp, sl, r3
 80077e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077e2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80077e6:	b235      	sxth	r5, r6
 80077e8:	18eb      	adds	r3, r5, r3
 80077ea:	f04f 0a00 	mov.w	sl, #0
 80077ee:	fb09 f303 	mul.w	r3, r9, r3
 80077f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80077f4:	930a      	str	r3, [sp, #40]	; 0x28
 80077f6:	fb09 fb0b 	mul.w	fp, r9, fp
 80077fa:	46d6      	mov	lr, sl
 80077fc:	9807      	ldr	r0, [sp, #28]
 80077fe:	4580      	cmp	r8, r0
 8007800:	dd43      	ble.n	800788a <pool_func_mp_array_f32+0x2ae>
 8007802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007804:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007890 <pool_func_mp_array_f32+0x2b4>
 8007808:	eb0e 0403 	add.w	r4, lr, r3
 800780c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800780e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007812:	42a9      	cmp	r1, r5
 8007814:	dd0f      	ble.n	8007836 <pool_func_mp_array_f32+0x25a>
 8007816:	4622      	mov	r2, r4
 8007818:	462b      	mov	r3, r5
 800781a:	ed92 7a00 	vldr	s14, [r2]
 800781e:	3301      	adds	r3, #1
 8007820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	b21b      	sxth	r3, r3
 800782a:	bfb8      	it	lt
 800782c:	eef0 7a47 	vmovlt.f32	s15, s14
 8007830:	4299      	cmp	r1, r3
 8007832:	4462      	add	r2, ip
 8007834:	d1f1      	bne.n	800781a <pool_func_mp_array_f32+0x23e>
 8007836:	3001      	adds	r0, #1
 8007838:	b200      	sxth	r0, r0
 800783a:	4580      	cmp	r8, r0
 800783c:	4434      	add	r4, r6
 800783e:	d1e8      	bne.n	8007812 <pool_func_mp_array_f32+0x236>
 8007840:	f10a 0a01 	add.w	sl, sl, #1
 8007844:	9a02      	ldr	r2, [sp, #8]
 8007846:	eb0b 030e 	add.w	r3, fp, lr
 800784a:	fa0f fa8a 	sxth.w	sl, sl
 800784e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007852:	45ca      	cmp	sl, r9
 8007854:	edc3 7a00 	vstr	s15, [r3]
 8007858:	46d6      	mov	lr, sl
 800785a:	dbcf      	blt.n	80077fc <pool_func_mp_array_f32+0x220>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	9a08      	ldr	r2, [sp, #32]
 8007860:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007862:	4413      	add	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	3701      	adds	r7, #1
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	b23f      	sxth	r7, r7
 800786e:	4416      	add	r6, r2
 8007870:	42bb      	cmp	r3, r7
 8007872:	b2b6      	uxth	r6, r6
 8007874:	46ba      	mov	sl, r7
 8007876:	dcaf      	bgt.n	80077d8 <pool_func_mp_array_f32+0x1fc>
 8007878:	9b00      	ldr	r3, [sp, #0]
 800787a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800787c:	4413      	add	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	9b01      	ldr	r3, [sp, #4]
 8007884:	3301      	adds	r3, #1
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	e788      	b.n	800779c <pool_func_mp_array_f32+0x1c0>
 800788a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007890 <pool_func_mp_array_f32+0x2b4>
 800788e:	e7d7      	b.n	8007840 <pool_func_mp_array_f32+0x264>
 8007890:	cf000000 	.word	0xcf000000

08007894 <ai_check_custom_types>:
 8007894:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <ai_check_custom_types+0x50>)
 8007896:	b082      	sub	sp, #8
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	b118      	cbz	r0, 80078a6 <ai_check_custom_types+0x12>
 800789e:	7803      	ldrb	r3, [r0, #0]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d002      	beq.n	80078aa <ai_check_custom_types+0x16>
 80078a4:	2000      	movs	r0, #0
 80078a6:	b002      	add	sp, #8
 80078a8:	4770      	bx	lr
 80078aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <ai_check_custom_types+0x28>
 80078b2:	2001      	movs	r0, #1
 80078b4:	f080 0001 	eor.w	r0, r0, #1
 80078b8:	b002      	add	sp, #8
 80078ba:	4770      	bx	lr
 80078bc:	7842      	ldrb	r2, [r0, #1]
 80078be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	f100 0001 	add.w	r0, r0, #1
 80078c8:	d1f3      	bne.n	80078b2 <ai_check_custom_types+0x1e>
 80078ca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80078ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d1ed      	bne.n	80078b2 <ai_check_custom_types+0x1e>
 80078d6:	7842      	ldrb	r2, [r0, #1]
 80078d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d1e8      	bne.n	80078b2 <ai_check_custom_types+0x1e>
 80078e0:	2000      	movs	r0, #0
 80078e2:	e7e7      	b.n	80078b4 <ai_check_custom_types+0x20>
 80078e4:	0800a8b4 	.word	0x0800a8b4

080078e8 <ai_layers_forward_all>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80078ec:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80078ee:	4604      	mov	r4, r0
 80078f0:	b31e      	cbz	r6, 800793a <ai_layers_forward_all+0x52>
 80078f2:	b1cd      	cbz	r5, 8007928 <ai_layers_forward_all+0x40>
 80078f4:	6545      	str	r5, [r0, #84]	; 0x54
 80078f6:	4629      	mov	r1, r5
 80078f8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80078fa:	2001      	movs	r0, #1
 80078fc:	47b0      	blx	r6
 80078fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007900:	2700      	movs	r7, #0
 8007902:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007904:	2002      	movs	r0, #2
 8007906:	47b0      	blx	r6
 8007908:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800790a:	692b      	ldr	r3, [r5, #16]
 800790c:	4628      	mov	r0, r5
 800790e:	4798      	blx	r3
 8007910:	68eb      	ldr	r3, [r5, #12]
 8007912:	429d      	cmp	r5, r3
 8007914:	f04f 0003 	mov.w	r0, #3
 8007918:	4619      	mov	r1, r3
 800791a:	d006      	beq.n	800792a <ai_layers_forward_all+0x42>
 800791c:	6563      	str	r3, [r4, #84]	; 0x54
 800791e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007920:	47b0      	blx	r6
 8007922:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007924:	2900      	cmp	r1, #0
 8007926:	d1ec      	bne.n	8007902 <ai_layers_forward_all+0x1a>
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800792a:	2100      	movs	r1, #0
 800792c:	6567      	str	r7, [r4, #84]	; 0x54
 800792e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007930:	47b0      	blx	r6
 8007932:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007934:	2900      	cmp	r1, #0
 8007936:	d1e4      	bne.n	8007902 <ai_layers_forward_all+0x1a>
 8007938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793a:	2d00      	cmp	r5, #0
 800793c:	d0f4      	beq.n	8007928 <ai_layers_forward_all+0x40>
 800793e:	6545      	str	r5, [r0, #84]	; 0x54
 8007940:	692b      	ldr	r3, [r5, #16]
 8007942:	4628      	mov	r0, r5
 8007944:	4798      	blx	r3
 8007946:	68eb      	ldr	r3, [r5, #12]
 8007948:	42ab      	cmp	r3, r5
 800794a:	d004      	beq.n	8007956 <ai_layers_forward_all+0x6e>
 800794c:	6563      	str	r3, [r4, #84]	; 0x54
 800794e:	461d      	mov	r5, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f5      	bne.n	8007940 <ai_layers_forward_all+0x58>
 8007954:	e7e8      	b.n	8007928 <ai_layers_forward_all+0x40>
 8007956:	2300      	movs	r3, #0
 8007958:	6563      	str	r3, [r4, #84]	; 0x54
 800795a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800795c <ai_array_to_buffer_fmt>:
 800795c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007960:	2b02      	cmp	r3, #2
 8007962:	d01f      	beq.n	80079a4 <ai_array_to_buffer_fmt+0x48>
 8007964:	4a1c      	ldr	r2, [pc, #112]	; (80079d8 <ai_array_to_buffer_fmt+0x7c>)
 8007966:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800796a:	4293      	cmp	r3, r2
 800796c:	d00a      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 800796e:	dc0d      	bgt.n	800798c <ai_array_to_buffer_fmt+0x30>
 8007970:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <ai_array_to_buffer_fmt+0x80>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d006      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 8007976:	dd1d      	ble.n	80079b4 <ai_array_to_buffer_fmt+0x58>
 8007978:	4a19      	ldr	r2, [pc, #100]	; (80079e0 <ai_array_to_buffer_fmt+0x84>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d002      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 800797e:	320f      	adds	r2, #15
 8007980:	4293      	cmp	r3, r2
 8007982:	d10d      	bne.n	80079a0 <ai_array_to_buffer_fmt+0x44>
 8007984:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007988:	4318      	orrs	r0, r3
 800798a:	4770      	bx	lr
 800798c:	4a15      	ldr	r2, [pc, #84]	; (80079e4 <ai_array_to_buffer_fmt+0x88>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d0f8      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 8007992:	dd18      	ble.n	80079c6 <ai_array_to_buffer_fmt+0x6a>
 8007994:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <ai_array_to_buffer_fmt+0x8c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d0f4      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 800799a:	4a14      	ldr	r2, [pc, #80]	; (80079ec <ai_array_to_buffer_fmt+0x90>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d0f1      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 80079a0:	2340      	movs	r3, #64	; 0x40
 80079a2:	e7ef      	b.n	8007984 <ai_array_to_buffer_fmt+0x28>
 80079a4:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <ai_array_to_buffer_fmt+0x94>)
 80079a6:	4003      	ands	r3, r0
 80079a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80079b0:	4318      	orrs	r0, r3
 80079b2:	4770      	bx	lr
 80079b4:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d0e3      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 80079bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d0df      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 80079c4:	e7ec      	b.n	80079a0 <ai_array_to_buffer_fmt+0x44>
 80079c6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d0da      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 80079ce:	3207      	adds	r2, #7
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d0d7      	beq.n	8007984 <ai_array_to_buffer_fmt+0x28>
 80079d4:	e7e4      	b.n	80079a0 <ai_array_to_buffer_fmt+0x44>
 80079d6:	bf00      	nop
 80079d8:	00840040 	.word	0x00840040
 80079dc:	00040447 	.word	0x00040447
 80079e0:	00040840 	.word	0x00040840
 80079e4:	00840840 	.word	0x00840840
 80079e8:	0084084f 	.word	0x0084084f
 80079ec:	01821040 	.word	0x01821040
 80079f0:	00803fff 	.word	0x00803fff

080079f4 <ai_array_get_byte_size>:
 80079f4:	b1c1      	cbz	r1, 8007a28 <ai_array_get_byte_size+0x34>
 80079f6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80079fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80079fe:	4413      	add	r3, r2
 8007a00:	fb01 f103 	mul.w	r1, r1, r3
 8007a04:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8007a08:	3107      	adds	r1, #7
 8007a0a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8007a0e:	f021 0107 	bic.w	r1, r1, #7
 8007a12:	2804      	cmp	r0, #4
 8007a14:	fa21 f102 	lsr.w	r1, r1, r2
 8007a18:	d008      	beq.n	8007a2c <ai_array_get_byte_size+0x38>
 8007a1a:	2808      	cmp	r0, #8
 8007a1c:	d101      	bne.n	8007a22 <ai_array_get_byte_size+0x2e>
 8007a1e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8007a22:	3107      	adds	r1, #7
 8007a24:	08c8      	lsrs	r0, r1, #3
 8007a26:	4770      	bx	lr
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4770      	bx	lr
 8007a2c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8007a30:	3107      	adds	r1, #7
 8007a32:	08c8      	lsrs	r0, r1, #3
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <expf>:
 8007a38:	b530      	push	{r4, r5, lr}
 8007a3a:	ed2d 8b02 	vpush	{d8}
 8007a3e:	4d35      	ldr	r5, [pc, #212]	; (8007b14 <expf+0xdc>)
 8007a40:	b08b      	sub	sp, #44	; 0x2c
 8007a42:	eeb0 8a40 	vmov.f32	s16, s0
 8007a46:	f000 f871 	bl	8007b2c <__ieee754_expf>
 8007a4a:	f995 3000 	ldrsb.w	r3, [r5]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	ee10 4a10 	vmov	r4, s0
 8007a54:	d030      	beq.n	8007ab8 <expf+0x80>
 8007a56:	eeb0 0a48 	vmov.f32	s0, s16
 8007a5a:	f000 f93d 	bl	8007cd8 <finitef>
 8007a5e:	b358      	cbz	r0, 8007ab8 <expf+0x80>
 8007a60:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007b18 <expf+0xe0>
 8007a64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6c:	dd35      	ble.n	8007ada <expf+0xa2>
 8007a6e:	2303      	movs	r3, #3
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4b2a      	ldr	r3, [pc, #168]	; (8007b1c <expf+0xe4>)
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	ee18 0a10 	vmov	r0, s16
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	f7f8 fd6b 	bl	8000558 <__aeabi_f2d>
 8007a82:	f995 3000 	ldrsb.w	r3, [r5]
 8007a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a8e:	b9cb      	cbnz	r3, 8007ac4 <expf+0x8c>
 8007a90:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <expf+0xe8>)
 8007a92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007a96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a9a:	4668      	mov	r0, sp
 8007a9c:	f000 f91a 	bl	8007cd4 <matherr>
 8007aa0:	b1b0      	cbz	r0, 8007ad0 <expf+0x98>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	b11b      	cbz	r3, 8007aae <expf+0x76>
 8007aa6:	f000 f921 	bl	8007cec <__errno>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	6003      	str	r3, [r0, #0]
 8007aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab2:	f7f9 f881 	bl	8000bb8 <__aeabi_d2f>
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	ee00 4a10 	vmov	s0, r4
 8007abc:	b00b      	add	sp, #44	; 0x2c
 8007abe:	ecbd 8b02 	vpop	{d8}
 8007ac2:	bd30      	pop	{r4, r5, pc}
 8007ac4:	4917      	ldr	r1, [pc, #92]	; (8007b24 <expf+0xec>)
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d1e4      	bne.n	8007a9a <expf+0x62>
 8007ad0:	f000 f90c 	bl	8007cec <__errno>
 8007ad4:	2322      	movs	r3, #34	; 0x22
 8007ad6:	6003      	str	r3, [r0, #0]
 8007ad8:	e7e3      	b.n	8007aa2 <expf+0x6a>
 8007ada:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007b28 <expf+0xf0>
 8007ade:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	d5e7      	bpl.n	8007ab8 <expf+0x80>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <expf+0xe4>)
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	ee18 0a10 	vmov	r0, s16
 8007af4:	2300      	movs	r3, #0
 8007af6:	9308      	str	r3, [sp, #32]
 8007af8:	f7f8 fd2e 	bl	8000558 <__aeabi_f2d>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2200      	movs	r2, #0
 8007b00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b0c:	f995 3000 	ldrsb.w	r3, [r5]
 8007b10:	e7dc      	b.n	8007acc <expf+0x94>
 8007b12:	bf00      	nop
 8007b14:	20000890 	.word	0x20000890
 8007b18:	42b17180 	.word	0x42b17180
 8007b1c:	080663a0 	.word	0x080663a0
 8007b20:	47efffff 	.word	0x47efffff
 8007b24:	7ff00000 	.word	0x7ff00000
 8007b28:	c2cff1b5 	.word	0xc2cff1b5

08007b2c <__ieee754_expf>:
 8007b2c:	ee10 2a10 	vmov	r2, s0
 8007b30:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007b34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007b38:	d902      	bls.n	8007b40 <__ieee754_expf+0x14>
 8007b3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b3e:	4770      	bx	lr
 8007b40:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007b44:	d106      	bne.n	8007b54 <__ieee754_expf+0x28>
 8007b46:	eddf 7a51 	vldr	s15, [pc, #324]	; 8007c8c <__ieee754_expf+0x160>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf18      	it	ne
 8007b4e:	eeb0 0a67 	vmovne.f32	s0, s15
 8007b52:	4770      	bx	lr
 8007b54:	484e      	ldr	r0, [pc, #312]	; (8007c90 <__ieee754_expf+0x164>)
 8007b56:	4282      	cmp	r2, r0
 8007b58:	dd04      	ble.n	8007b64 <__ieee754_expf+0x38>
 8007b5a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8007c94 <__ieee754_expf+0x168>
 8007b5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007b62:	4770      	bx	lr
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	da03      	bge.n	8007b70 <__ieee754_expf+0x44>
 8007b68:	4a4b      	ldr	r2, [pc, #300]	; (8007c98 <__ieee754_expf+0x16c>)
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	f200 808a 	bhi.w	8007c84 <__ieee754_expf+0x158>
 8007b70:	4a4a      	ldr	r2, [pc, #296]	; (8007c9c <__ieee754_expf+0x170>)
 8007b72:	4291      	cmp	r1, r2
 8007b74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007b78:	d954      	bls.n	8007c24 <__ieee754_expf+0xf8>
 8007b7a:	4a49      	ldr	r2, [pc, #292]	; (8007ca0 <__ieee754_expf+0x174>)
 8007b7c:	4291      	cmp	r1, r2
 8007b7e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007b82:	d836      	bhi.n	8007bf2 <__ieee754_expf+0xc6>
 8007b84:	4947      	ldr	r1, [pc, #284]	; (8007ca4 <__ieee754_expf+0x178>)
 8007b86:	4411      	add	r1, r2
 8007b88:	ed91 7a00 	vldr	s14, [r1]
 8007b8c:	4946      	ldr	r1, [pc, #280]	; (8007ca8 <__ieee754_expf+0x17c>)
 8007b8e:	440a      	add	r2, r1
 8007b90:	edd2 7a00 	vldr	s15, [r2]
 8007b94:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007b98:	f1c3 0201 	rsb	r2, r3, #1
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007ba2:	ee60 6a00 	vmul.f32	s13, s0, s0
 8007ba6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8007cac <__ieee754_expf+0x180>
 8007baa:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8007cb0 <__ieee754_expf+0x184>
 8007bae:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8007bb2:	eddf 5a40 	vldr	s11, [pc, #256]	; 8007cb4 <__ieee754_expf+0x188>
 8007bb6:	eee5 5a26 	vfma.f32	s11, s10, s13
 8007bba:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8007cb8 <__ieee754_expf+0x18c>
 8007bbe:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8007bc2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007cbc <__ieee754_expf+0x190>
 8007bc6:	eee5 5a26 	vfma.f32	s11, s10, s13
 8007bca:	eeb0 5a40 	vmov.f32	s10, s0
 8007bce:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8007bd2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8007bd6:	eef0 6a45 	vmov.f32	s13, s10
 8007bda:	ee20 5a05 	vmul.f32	s10, s0, s10
 8007bde:	bb92      	cbnz	r2, 8007c46 <__ieee754_expf+0x11a>
 8007be0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007be4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007be8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007bec:	ee36 0a40 	vsub.f32	s0, s12, s0
 8007bf0:	4770      	bx	lr
 8007bf2:	4b33      	ldr	r3, [pc, #204]	; (8007cc0 <__ieee754_expf+0x194>)
 8007bf4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007cc4 <__ieee754_expf+0x198>
 8007bf8:	4413      	add	r3, r2
 8007bfa:	edd3 7a00 	vldr	s15, [r3]
 8007bfe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c02:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007cc8 <__ieee754_expf+0x19c>
 8007c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c0a:	ee17 2a90 	vmov	r2, s15
 8007c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c12:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007c16:	eeb0 7a40 	vmov.f32	s14, s0
 8007c1a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007ccc <__ieee754_expf+0x1a0>
 8007c1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007c22:	e7bc      	b.n	8007b9e <__ieee754_expf+0x72>
 8007c24:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8007c28:	d20b      	bcs.n	8007c42 <__ieee754_expf+0x116>
 8007c2a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8007c94 <__ieee754_expf+0x168>
 8007c2e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007c32:	eef4 6ac6 	vcmpe.f32	s13, s12
 8007c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3a:	dd02      	ble.n	8007c42 <__ieee754_expf+0x116>
 8007c3c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8007c40:	4770      	bx	lr
 8007c42:	2200      	movs	r2, #0
 8007c44:	e7ad      	b.n	8007ba2 <__ieee754_expf+0x76>
 8007c46:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007c4a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007c4e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007c52:	bfb8      	it	lt
 8007c54:	3264      	addlt	r2, #100	; 0x64
 8007c56:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c5a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007c5e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8007c62:	ee17 3a90 	vmov	r3, s15
 8007c66:	bfab      	itete	ge
 8007c68:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007c6c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007c70:	ee00 3a10 	vmovge	s0, r3
 8007c74:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8007cd0 <__ieee754_expf+0x1a4>
 8007c78:	bfbc      	itt	lt
 8007c7a:	ee00 3a10 	vmovlt	s0, r3
 8007c7e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007c82:	4770      	bx	lr
 8007c84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c8c <__ieee754_expf+0x160>
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	00000000 	.word	0x00000000
 8007c90:	42b17217 	.word	0x42b17217
 8007c94:	7149f2ca 	.word	0x7149f2ca
 8007c98:	42cff1b5 	.word	0x42cff1b5
 8007c9c:	3eb17218 	.word	0x3eb17218
 8007ca0:	3f851591 	.word	0x3f851591
 8007ca4:	080663b0 	.word	0x080663b0
 8007ca8:	080663b8 	.word	0x080663b8
 8007cac:	3331bb4c 	.word	0x3331bb4c
 8007cb0:	b5ddea0e 	.word	0xb5ddea0e
 8007cb4:	388ab355 	.word	0x388ab355
 8007cb8:	bb360b61 	.word	0xbb360b61
 8007cbc:	3e2aaaab 	.word	0x3e2aaaab
 8007cc0:	080663a8 	.word	0x080663a8
 8007cc4:	3fb8aa3b 	.word	0x3fb8aa3b
 8007cc8:	3f317180 	.word	0x3f317180
 8007ccc:	3717f7d1 	.word	0x3717f7d1
 8007cd0:	0d800000 	.word	0x0d800000

08007cd4 <matherr>:
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4770      	bx	lr

08007cd8 <finitef>:
 8007cd8:	ee10 3a10 	vmov	r3, s0
 8007cdc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007ce0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007ce4:	bfac      	ite	ge
 8007ce6:	2000      	movge	r0, #0
 8007ce8:	2001      	movlt	r0, #1
 8007cea:	4770      	bx	lr

08007cec <__errno>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <__errno+0x8>)
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000894 	.word	0x20000894

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4e0d      	ldr	r6, [pc, #52]	; (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	; (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1ba4      	subs	r4, r4, r6
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2500      	movs	r5, #0
 8007d04:	42a5      	cmp	r5, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4e0b      	ldr	r6, [pc, #44]	; (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	; (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f002 fd02 	bl	800a714 <_init>
 8007d10:	1ba4      	subs	r4, r4, r6
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2500      	movs	r5, #0
 8007d16:	42a5      	cmp	r5, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d20:	4798      	blx	r3
 8007d22:	3501      	adds	r5, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d2a:	4798      	blx	r3
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08066688 	.word	0x08066688
 8007d34:	08066688 	.word	0x08066688
 8007d38:	08066688 	.word	0x08066688
 8007d3c:	0806668c 	.word	0x0806668c

08007d40 <malloc>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <malloc+0xc>)
 8007d42:	4601      	mov	r1, r0
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f000 b865 	b.w	8007e14 <_malloc_r>
 8007d4a:	bf00      	nop
 8007d4c:	20000894 	.word	0x20000894

08007d50 <memcpy>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	1e43      	subs	r3, r0, #1
 8007d54:	440a      	add	r2, r1
 8007d56:	4291      	cmp	r1, r2
 8007d58:	d100      	bne.n	8007d5c <memcpy+0xc>
 8007d5a:	bd10      	pop	{r4, pc}
 8007d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d64:	e7f7      	b.n	8007d56 <memcpy+0x6>

08007d66 <memset>:
 8007d66:	4402      	add	r2, r0
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d100      	bne.n	8007d70 <memset+0xa>
 8007d6e:	4770      	bx	lr
 8007d70:	f803 1b01 	strb.w	r1, [r3], #1
 8007d74:	e7f9      	b.n	8007d6a <memset+0x4>
	...

08007d78 <_free_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d045      	beq.n	8007e0c <_free_r+0x94>
 8007d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d84:	1f0c      	subs	r4, r1, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bfb8      	it	lt
 8007d8a:	18e4      	addlt	r4, r4, r3
 8007d8c:	f001 fc5c 	bl	8009648 <__malloc_lock>
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <_free_r+0x98>)
 8007d92:	6813      	ldr	r3, [r2, #0]
 8007d94:	4610      	mov	r0, r2
 8007d96:	b933      	cbnz	r3, 8007da6 <_free_r+0x2e>
 8007d98:	6063      	str	r3, [r4, #4]
 8007d9a:	6014      	str	r4, [r2, #0]
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da2:	f001 bc52 	b.w	800964a <__malloc_unlock>
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	d90c      	bls.n	8007dc4 <_free_r+0x4c>
 8007daa:	6821      	ldr	r1, [r4, #0]
 8007dac:	1862      	adds	r2, r4, r1
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bf04      	itt	eq
 8007db2:	681a      	ldreq	r2, [r3, #0]
 8007db4:	685b      	ldreq	r3, [r3, #4]
 8007db6:	6063      	str	r3, [r4, #4]
 8007db8:	bf04      	itt	eq
 8007dba:	1852      	addeq	r2, r2, r1
 8007dbc:	6022      	streq	r2, [r4, #0]
 8007dbe:	6004      	str	r4, [r0, #0]
 8007dc0:	e7ec      	b.n	8007d9c <_free_r+0x24>
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	b10a      	cbz	r2, 8007dcc <_free_r+0x54>
 8007dc8:	42a2      	cmp	r2, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x4a>
 8007dcc:	6819      	ldr	r1, [r3, #0]
 8007dce:	1858      	adds	r0, r3, r1
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x74>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	1858      	adds	r0, r3, r1
 8007dda:	4282      	cmp	r2, r0
 8007ddc:	6019      	str	r1, [r3, #0]
 8007dde:	d1dd      	bne.n	8007d9c <_free_r+0x24>
 8007de0:	6810      	ldr	r0, [r2, #0]
 8007de2:	6852      	ldr	r2, [r2, #4]
 8007de4:	605a      	str	r2, [r3, #4]
 8007de6:	4401      	add	r1, r0
 8007de8:	6019      	str	r1, [r3, #0]
 8007dea:	e7d7      	b.n	8007d9c <_free_r+0x24>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x7c>
 8007dee:	230c      	movs	r3, #12
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	e7d3      	b.n	8007d9c <_free_r+0x24>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	1821      	adds	r1, r4, r0
 8007df8:	428a      	cmp	r2, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6811      	ldreq	r1, [r2, #0]
 8007dfe:	6852      	ldreq	r2, [r2, #4]
 8007e00:	6062      	str	r2, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	605c      	str	r4, [r3, #4]
 8007e0a:	e7c7      	b.n	8007d9c <_free_r+0x24>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	20006f2c 	.word	0x20006f2c

08007e14 <_malloc_r>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	1ccd      	adds	r5, r1, #3
 8007e18:	f025 0503 	bic.w	r5, r5, #3
 8007e1c:	3508      	adds	r5, #8
 8007e1e:	2d0c      	cmp	r5, #12
 8007e20:	bf38      	it	cc
 8007e22:	250c      	movcc	r5, #12
 8007e24:	2d00      	cmp	r5, #0
 8007e26:	4606      	mov	r6, r0
 8007e28:	db01      	blt.n	8007e2e <_malloc_r+0x1a>
 8007e2a:	42a9      	cmp	r1, r5
 8007e2c:	d903      	bls.n	8007e36 <_malloc_r+0x22>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	6033      	str	r3, [r6, #0]
 8007e32:	2000      	movs	r0, #0
 8007e34:	bd70      	pop	{r4, r5, r6, pc}
 8007e36:	f001 fc07 	bl	8009648 <__malloc_lock>
 8007e3a:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <_malloc_r+0xac>)
 8007e3c:	6814      	ldr	r4, [r2, #0]
 8007e3e:	4621      	mov	r1, r4
 8007e40:	b991      	cbnz	r1, 8007e68 <_malloc_r+0x54>
 8007e42:	4c20      	ldr	r4, [pc, #128]	; (8007ec4 <_malloc_r+0xb0>)
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	b91b      	cbnz	r3, 8007e50 <_malloc_r+0x3c>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 fcb1 	bl	80087b0 <_sbrk_r>
 8007e4e:	6020      	str	r0, [r4, #0]
 8007e50:	4629      	mov	r1, r5
 8007e52:	4630      	mov	r0, r6
 8007e54:	f000 fcac 	bl	80087b0 <_sbrk_r>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d124      	bne.n	8007ea6 <_malloc_r+0x92>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f001 fbf2 	bl	800964a <__malloc_unlock>
 8007e66:	e7e4      	b.n	8007e32 <_malloc_r+0x1e>
 8007e68:	680b      	ldr	r3, [r1, #0]
 8007e6a:	1b5b      	subs	r3, r3, r5
 8007e6c:	d418      	bmi.n	8007ea0 <_malloc_r+0x8c>
 8007e6e:	2b0b      	cmp	r3, #11
 8007e70:	d90f      	bls.n	8007e92 <_malloc_r+0x7e>
 8007e72:	600b      	str	r3, [r1, #0]
 8007e74:	50cd      	str	r5, [r1, r3]
 8007e76:	18cc      	adds	r4, r1, r3
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f001 fbe6 	bl	800964a <__malloc_unlock>
 8007e7e:	f104 000b 	add.w	r0, r4, #11
 8007e82:	1d23      	adds	r3, r4, #4
 8007e84:	f020 0007 	bic.w	r0, r0, #7
 8007e88:	1ac3      	subs	r3, r0, r3
 8007e8a:	d0d3      	beq.n	8007e34 <_malloc_r+0x20>
 8007e8c:	425a      	negs	r2, r3
 8007e8e:	50e2      	str	r2, [r4, r3]
 8007e90:	e7d0      	b.n	8007e34 <_malloc_r+0x20>
 8007e92:	428c      	cmp	r4, r1
 8007e94:	684b      	ldr	r3, [r1, #4]
 8007e96:	bf16      	itet	ne
 8007e98:	6063      	strne	r3, [r4, #4]
 8007e9a:	6013      	streq	r3, [r2, #0]
 8007e9c:	460c      	movne	r4, r1
 8007e9e:	e7eb      	b.n	8007e78 <_malloc_r+0x64>
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	6849      	ldr	r1, [r1, #4]
 8007ea4:	e7cc      	b.n	8007e40 <_malloc_r+0x2c>
 8007ea6:	1cc4      	adds	r4, r0, #3
 8007ea8:	f024 0403 	bic.w	r4, r4, #3
 8007eac:	42a0      	cmp	r0, r4
 8007eae:	d005      	beq.n	8007ebc <_malloc_r+0xa8>
 8007eb0:	1a21      	subs	r1, r4, r0
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 fc7c 	bl	80087b0 <_sbrk_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d0cf      	beq.n	8007e5c <_malloc_r+0x48>
 8007ebc:	6025      	str	r5, [r4, #0]
 8007ebe:	e7db      	b.n	8007e78 <_malloc_r+0x64>
 8007ec0:	20006f2c 	.word	0x20006f2c
 8007ec4:	20006f30 	.word	0x20006f30

08007ec8 <__cvt>:
 8007ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	ec55 4b10 	vmov	r4, r5, d0
 8007ed0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007ed2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	460e      	mov	r6, r1
 8007eda:	4691      	mov	r9, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	bfb8      	it	lt
 8007ee0:	4622      	movlt	r2, r4
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	f027 0720 	bic.w	r7, r7, #32
 8007ee8:	bfbb      	ittet	lt
 8007eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007eee:	461d      	movlt	r5, r3
 8007ef0:	2300      	movge	r3, #0
 8007ef2:	232d      	movlt	r3, #45	; 0x2d
 8007ef4:	bfb8      	it	lt
 8007ef6:	4614      	movlt	r4, r2
 8007ef8:	2f46      	cmp	r7, #70	; 0x46
 8007efa:	700b      	strb	r3, [r1, #0]
 8007efc:	d004      	beq.n	8007f08 <__cvt+0x40>
 8007efe:	2f45      	cmp	r7, #69	; 0x45
 8007f00:	d100      	bne.n	8007f04 <__cvt+0x3c>
 8007f02:	3601      	adds	r6, #1
 8007f04:	2102      	movs	r1, #2
 8007f06:	e000      	b.n	8007f0a <__cvt+0x42>
 8007f08:	2103      	movs	r1, #3
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	ab02      	add	r3, sp, #8
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	4632      	mov	r2, r6
 8007f14:	4653      	mov	r3, sl
 8007f16:	ec45 4b10 	vmov	d0, r4, r5
 8007f1a:	f000 fd05 	bl	8008928 <_dtoa_r>
 8007f1e:	2f47      	cmp	r7, #71	; 0x47
 8007f20:	4680      	mov	r8, r0
 8007f22:	d102      	bne.n	8007f2a <__cvt+0x62>
 8007f24:	f019 0f01 	tst.w	r9, #1
 8007f28:	d026      	beq.n	8007f78 <__cvt+0xb0>
 8007f2a:	2f46      	cmp	r7, #70	; 0x46
 8007f2c:	eb08 0906 	add.w	r9, r8, r6
 8007f30:	d111      	bne.n	8007f56 <__cvt+0x8e>
 8007f32:	f898 3000 	ldrb.w	r3, [r8]
 8007f36:	2b30      	cmp	r3, #48	; 0x30
 8007f38:	d10a      	bne.n	8007f50 <__cvt+0x88>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f46:	b918      	cbnz	r0, 8007f50 <__cvt+0x88>
 8007f48:	f1c6 0601 	rsb	r6, r6, #1
 8007f4c:	f8ca 6000 	str.w	r6, [sl]
 8007f50:	f8da 3000 	ldr.w	r3, [sl]
 8007f54:	4499      	add	r9, r3
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f62:	b938      	cbnz	r0, 8007f74 <__cvt+0xac>
 8007f64:	2230      	movs	r2, #48	; 0x30
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	454b      	cmp	r3, r9
 8007f6a:	d205      	bcs.n	8007f78 <__cvt+0xb0>
 8007f6c:	1c59      	adds	r1, r3, #1
 8007f6e:	9103      	str	r1, [sp, #12]
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	e7f8      	b.n	8007f66 <__cvt+0x9e>
 8007f74:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f7c:	eba3 0308 	sub.w	r3, r3, r8
 8007f80:	4640      	mov	r0, r8
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	b004      	add	sp, #16
 8007f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f8a <__exponent>:
 8007f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8c:	2900      	cmp	r1, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	bfba      	itte	lt
 8007f92:	4249      	neglt	r1, r1
 8007f94:	232d      	movlt	r3, #45	; 0x2d
 8007f96:	232b      	movge	r3, #43	; 0x2b
 8007f98:	2909      	cmp	r1, #9
 8007f9a:	f804 2b02 	strb.w	r2, [r4], #2
 8007f9e:	7043      	strb	r3, [r0, #1]
 8007fa0:	dd20      	ble.n	8007fe4 <__exponent+0x5a>
 8007fa2:	f10d 0307 	add.w	r3, sp, #7
 8007fa6:	461f      	mov	r7, r3
 8007fa8:	260a      	movs	r6, #10
 8007faa:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fae:	fb06 1115 	mls	r1, r6, r5, r1
 8007fb2:	3130      	adds	r1, #48	; 0x30
 8007fb4:	2d09      	cmp	r5, #9
 8007fb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007fba:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	dc09      	bgt.n	8007fd6 <__exponent+0x4c>
 8007fc2:	3130      	adds	r1, #48	; 0x30
 8007fc4:	3b02      	subs	r3, #2
 8007fc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007fca:	42bb      	cmp	r3, r7
 8007fcc:	4622      	mov	r2, r4
 8007fce:	d304      	bcc.n	8007fda <__exponent+0x50>
 8007fd0:	1a10      	subs	r0, r2, r0
 8007fd2:	b003      	add	sp, #12
 8007fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	e7e7      	b.n	8007faa <__exponent+0x20>
 8007fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fde:	f804 2b01 	strb.w	r2, [r4], #1
 8007fe2:	e7f2      	b.n	8007fca <__exponent+0x40>
 8007fe4:	2330      	movs	r3, #48	; 0x30
 8007fe6:	4419      	add	r1, r3
 8007fe8:	7083      	strb	r3, [r0, #2]
 8007fea:	1d02      	adds	r2, r0, #4
 8007fec:	70c1      	strb	r1, [r0, #3]
 8007fee:	e7ef      	b.n	8007fd0 <__exponent+0x46>

08007ff0 <_printf_float>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	b08d      	sub	sp, #52	; 0x34
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	4605      	mov	r5, r0
 8008002:	f001 fb13 	bl	800962c <_localeconv_r>
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	4618      	mov	r0, r3
 800800c:	f7f8 f8e8 	bl	80001e0 <strlen>
 8008010:	2300      	movs	r3, #0
 8008012:	930a      	str	r3, [sp, #40]	; 0x28
 8008014:	f8d8 3000 	ldr.w	r3, [r8]
 8008018:	9005      	str	r0, [sp, #20]
 800801a:	3307      	adds	r3, #7
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	f103 0208 	add.w	r2, r3, #8
 8008024:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008028:	f8d4 b000 	ldr.w	fp, [r4]
 800802c:	f8c8 2000 	str.w	r2, [r8]
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008038:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800803c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008040:	9307      	str	r3, [sp, #28]
 8008042:	f8cd 8018 	str.w	r8, [sp, #24]
 8008046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800804a:	4ba7      	ldr	r3, [pc, #668]	; (80082e8 <_printf_float+0x2f8>)
 800804c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008050:	f7f8 fd74 	bl	8000b3c <__aeabi_dcmpun>
 8008054:	bb70      	cbnz	r0, 80080b4 <_printf_float+0xc4>
 8008056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800805a:	4ba3      	ldr	r3, [pc, #652]	; (80082e8 <_printf_float+0x2f8>)
 800805c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008060:	f7f8 fd4e 	bl	8000b00 <__aeabi_dcmple>
 8008064:	bb30      	cbnz	r0, 80080b4 <_printf_float+0xc4>
 8008066:	2200      	movs	r2, #0
 8008068:	2300      	movs	r3, #0
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 fd3d 	bl	8000aec <__aeabi_dcmplt>
 8008072:	b110      	cbz	r0, 800807a <_printf_float+0x8a>
 8008074:	232d      	movs	r3, #45	; 0x2d
 8008076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800807a:	4a9c      	ldr	r2, [pc, #624]	; (80082ec <_printf_float+0x2fc>)
 800807c:	4b9c      	ldr	r3, [pc, #624]	; (80082f0 <_printf_float+0x300>)
 800807e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008082:	bf8c      	ite	hi
 8008084:	4690      	movhi	r8, r2
 8008086:	4698      	movls	r8, r3
 8008088:	2303      	movs	r3, #3
 800808a:	f02b 0204 	bic.w	r2, fp, #4
 800808e:	6123      	str	r3, [r4, #16]
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	f04f 0900 	mov.w	r9, #0
 8008096:	9700      	str	r7, [sp, #0]
 8008098:	4633      	mov	r3, r6
 800809a:	aa0b      	add	r2, sp, #44	; 0x2c
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f9e6 	bl	8008470 <_printf_common>
 80080a4:	3001      	adds	r0, #1
 80080a6:	f040 808d 	bne.w	80081c4 <_printf_float+0x1d4>
 80080aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ae:	b00d      	add	sp, #52	; 0x34
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b4:	4642      	mov	r2, r8
 80080b6:	464b      	mov	r3, r9
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 fd3e 	bl	8000b3c <__aeabi_dcmpun>
 80080c0:	b110      	cbz	r0, 80080c8 <_printf_float+0xd8>
 80080c2:	4a8c      	ldr	r2, [pc, #560]	; (80082f4 <_printf_float+0x304>)
 80080c4:	4b8c      	ldr	r3, [pc, #560]	; (80082f8 <_printf_float+0x308>)
 80080c6:	e7da      	b.n	800807e <_printf_float+0x8e>
 80080c8:	6861      	ldr	r1, [r4, #4]
 80080ca:	1c4b      	adds	r3, r1, #1
 80080cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80080d0:	a80a      	add	r0, sp, #40	; 0x28
 80080d2:	d13e      	bne.n	8008152 <_printf_float+0x162>
 80080d4:	2306      	movs	r3, #6
 80080d6:	6063      	str	r3, [r4, #4]
 80080d8:	2300      	movs	r3, #0
 80080da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80080de:	ab09      	add	r3, sp, #36	; 0x24
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	ec49 8b10 	vmov	d0, r8, r9
 80080e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080ea:	6022      	str	r2, [r4, #0]
 80080ec:	f8cd a004 	str.w	sl, [sp, #4]
 80080f0:	6861      	ldr	r1, [r4, #4]
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7ff fee8 	bl	8007ec8 <__cvt>
 80080f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80080fc:	2b47      	cmp	r3, #71	; 0x47
 80080fe:	4680      	mov	r8, r0
 8008100:	d109      	bne.n	8008116 <_printf_float+0x126>
 8008102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008104:	1cd8      	adds	r0, r3, #3
 8008106:	db02      	blt.n	800810e <_printf_float+0x11e>
 8008108:	6862      	ldr	r2, [r4, #4]
 800810a:	4293      	cmp	r3, r2
 800810c:	dd47      	ble.n	800819e <_printf_float+0x1ae>
 800810e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008112:	fa5f fa8a 	uxtb.w	sl, sl
 8008116:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800811a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811c:	d824      	bhi.n	8008168 <_printf_float+0x178>
 800811e:	3901      	subs	r1, #1
 8008120:	4652      	mov	r2, sl
 8008122:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008126:	9109      	str	r1, [sp, #36]	; 0x24
 8008128:	f7ff ff2f 	bl	8007f8a <__exponent>
 800812c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812e:	1813      	adds	r3, r2, r0
 8008130:	2a01      	cmp	r2, #1
 8008132:	4681      	mov	r9, r0
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	dc02      	bgt.n	800813e <_printf_float+0x14e>
 8008138:	6822      	ldr	r2, [r4, #0]
 800813a:	07d1      	lsls	r1, r2, #31
 800813c:	d501      	bpl.n	8008142 <_printf_float+0x152>
 800813e:	3301      	adds	r3, #1
 8008140:	6123      	str	r3, [r4, #16]
 8008142:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0a5      	beq.n	8008096 <_printf_float+0xa6>
 800814a:	232d      	movs	r3, #45	; 0x2d
 800814c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008150:	e7a1      	b.n	8008096 <_printf_float+0xa6>
 8008152:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008156:	f000 8177 	beq.w	8008448 <_printf_float+0x458>
 800815a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800815e:	d1bb      	bne.n	80080d8 <_printf_float+0xe8>
 8008160:	2900      	cmp	r1, #0
 8008162:	d1b9      	bne.n	80080d8 <_printf_float+0xe8>
 8008164:	2301      	movs	r3, #1
 8008166:	e7b6      	b.n	80080d6 <_printf_float+0xe6>
 8008168:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800816c:	d119      	bne.n	80081a2 <_printf_float+0x1b2>
 800816e:	2900      	cmp	r1, #0
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	dd0c      	ble.n	800818e <_printf_float+0x19e>
 8008174:	6121      	str	r1, [r4, #16]
 8008176:	b913      	cbnz	r3, 800817e <_printf_float+0x18e>
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	07d2      	lsls	r2, r2, #31
 800817c:	d502      	bpl.n	8008184 <_printf_float+0x194>
 800817e:	3301      	adds	r3, #1
 8008180:	440b      	add	r3, r1
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	65a3      	str	r3, [r4, #88]	; 0x58
 8008188:	f04f 0900 	mov.w	r9, #0
 800818c:	e7d9      	b.n	8008142 <_printf_float+0x152>
 800818e:	b913      	cbnz	r3, 8008196 <_printf_float+0x1a6>
 8008190:	6822      	ldr	r2, [r4, #0]
 8008192:	07d0      	lsls	r0, r2, #31
 8008194:	d501      	bpl.n	800819a <_printf_float+0x1aa>
 8008196:	3302      	adds	r3, #2
 8008198:	e7f3      	b.n	8008182 <_printf_float+0x192>
 800819a:	2301      	movs	r3, #1
 800819c:	e7f1      	b.n	8008182 <_printf_float+0x192>
 800819e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80081a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081a6:	4293      	cmp	r3, r2
 80081a8:	db05      	blt.n	80081b6 <_printf_float+0x1c6>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	07d1      	lsls	r1, r2, #31
 80081b0:	d5e8      	bpl.n	8008184 <_printf_float+0x194>
 80081b2:	3301      	adds	r3, #1
 80081b4:	e7e5      	b.n	8008182 <_printf_float+0x192>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfd4      	ite	le
 80081ba:	f1c3 0302 	rsble	r3, r3, #2
 80081be:	2301      	movgt	r3, #1
 80081c0:	4413      	add	r3, r2
 80081c2:	e7de      	b.n	8008182 <_printf_float+0x192>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	055a      	lsls	r2, r3, #21
 80081c8:	d407      	bmi.n	80081da <_printf_float+0x1ea>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	4642      	mov	r2, r8
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	d12b      	bne.n	8008230 <_printf_float+0x240>
 80081d8:	e767      	b.n	80080aa <_printf_float+0xba>
 80081da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80081de:	f240 80dc 	bls.w	800839a <_printf_float+0x3aa>
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081ea:	f7f8 fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d033      	beq.n	800825a <_printf_float+0x26a>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4a41      	ldr	r2, [pc, #260]	; (80082fc <_printf_float+0x30c>)
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	f43f af54 	beq.w	80080aa <_printf_float+0xba>
 8008202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008206:	429a      	cmp	r2, r3
 8008208:	db02      	blt.n	8008210 <_printf_float+0x220>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	07d8      	lsls	r0, r3, #31
 800820e:	d50f      	bpl.n	8008230 <_printf_float+0x240>
 8008210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	f43f af45 	beq.w	80080aa <_printf_float+0xba>
 8008220:	f04f 0800 	mov.w	r8, #0
 8008224:	f104 091a 	add.w	r9, r4, #26
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	3b01      	subs	r3, #1
 800822c:	4543      	cmp	r3, r8
 800822e:	dc09      	bgt.n	8008244 <_printf_float+0x254>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	079b      	lsls	r3, r3, #30
 8008234:	f100 8103 	bmi.w	800843e <_printf_float+0x44e>
 8008238:	68e0      	ldr	r0, [r4, #12]
 800823a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823c:	4298      	cmp	r0, r3
 800823e:	bfb8      	it	lt
 8008240:	4618      	movlt	r0, r3
 8008242:	e734      	b.n	80080ae <_printf_float+0xbe>
 8008244:	2301      	movs	r3, #1
 8008246:	464a      	mov	r2, r9
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af2b 	beq.w	80080aa <_printf_float+0xba>
 8008254:	f108 0801 	add.w	r8, r8, #1
 8008258:	e7e6      	b.n	8008228 <_printf_float+0x238>
 800825a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc2b      	bgt.n	80082b8 <_printf_float+0x2c8>
 8008260:	2301      	movs	r3, #1
 8008262:	4a26      	ldr	r2, [pc, #152]	; (80082fc <_printf_float+0x30c>)
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	47b8      	blx	r7
 800826a:	3001      	adds	r0, #1
 800826c:	f43f af1d 	beq.w	80080aa <_printf_float+0xba>
 8008270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008272:	b923      	cbnz	r3, 800827e <_printf_float+0x28e>
 8008274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008276:	b913      	cbnz	r3, 800827e <_printf_float+0x28e>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	07d9      	lsls	r1, r3, #31
 800827c:	d5d8      	bpl.n	8008230 <_printf_float+0x240>
 800827e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f af0e 	beq.w	80080aa <_printf_float+0xba>
 800828e:	f04f 0900 	mov.w	r9, #0
 8008292:	f104 0a1a 	add.w	sl, r4, #26
 8008296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008298:	425b      	negs	r3, r3
 800829a:	454b      	cmp	r3, r9
 800829c:	dc01      	bgt.n	80082a2 <_printf_float+0x2b2>
 800829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a0:	e794      	b.n	80081cc <_printf_float+0x1dc>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4652      	mov	r2, sl
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f aefc 	beq.w	80080aa <_printf_float+0xba>
 80082b2:	f109 0901 	add.w	r9, r9, #1
 80082b6:	e7ee      	b.n	8008296 <_printf_float+0x2a6>
 80082b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082bc:	429a      	cmp	r2, r3
 80082be:	bfa8      	it	ge
 80082c0:	461a      	movge	r2, r3
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	4691      	mov	r9, r2
 80082c6:	dd07      	ble.n	80082d8 <_printf_float+0x2e8>
 80082c8:	4613      	mov	r3, r2
 80082ca:	4631      	mov	r1, r6
 80082cc:	4642      	mov	r2, r8
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f aee9 	beq.w	80080aa <_printf_float+0xba>
 80082d8:	f104 031a 	add.w	r3, r4, #26
 80082dc:	f04f 0b00 	mov.w	fp, #0
 80082e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082e4:	9306      	str	r3, [sp, #24]
 80082e6:	e015      	b.n	8008314 <_printf_float+0x324>
 80082e8:	7fefffff 	.word	0x7fefffff
 80082ec:	080663c8 	.word	0x080663c8
 80082f0:	080663c4 	.word	0x080663c4
 80082f4:	080663d0 	.word	0x080663d0
 80082f8:	080663cc 	.word	0x080663cc
 80082fc:	080663d4 	.word	0x080663d4
 8008300:	2301      	movs	r3, #1
 8008302:	9a06      	ldr	r2, [sp, #24]
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	f43f aecd 	beq.w	80080aa <_printf_float+0xba>
 8008310:	f10b 0b01 	add.w	fp, fp, #1
 8008314:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008318:	ebaa 0309 	sub.w	r3, sl, r9
 800831c:	455b      	cmp	r3, fp
 800831e:	dcef      	bgt.n	8008300 <_printf_float+0x310>
 8008320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008324:	429a      	cmp	r2, r3
 8008326:	44d0      	add	r8, sl
 8008328:	db15      	blt.n	8008356 <_printf_float+0x366>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	07da      	lsls	r2, r3, #31
 800832e:	d412      	bmi.n	8008356 <_printf_float+0x366>
 8008330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008334:	eba3 020a 	sub.w	r2, r3, sl
 8008338:	eba3 0a01 	sub.w	sl, r3, r1
 800833c:	4592      	cmp	sl, r2
 800833e:	bfa8      	it	ge
 8008340:	4692      	movge	sl, r2
 8008342:	f1ba 0f00 	cmp.w	sl, #0
 8008346:	dc0e      	bgt.n	8008366 <_printf_float+0x376>
 8008348:	f04f 0800 	mov.w	r8, #0
 800834c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008350:	f104 091a 	add.w	r9, r4, #26
 8008354:	e019      	b.n	800838a <_printf_float+0x39a>
 8008356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	d1e5      	bne.n	8008330 <_printf_float+0x340>
 8008364:	e6a1      	b.n	80080aa <_printf_float+0xba>
 8008366:	4653      	mov	r3, sl
 8008368:	4642      	mov	r2, r8
 800836a:	4631      	mov	r1, r6
 800836c:	4628      	mov	r0, r5
 800836e:	47b8      	blx	r7
 8008370:	3001      	adds	r0, #1
 8008372:	d1e9      	bne.n	8008348 <_printf_float+0x358>
 8008374:	e699      	b.n	80080aa <_printf_float+0xba>
 8008376:	2301      	movs	r3, #1
 8008378:	464a      	mov	r2, r9
 800837a:	4631      	mov	r1, r6
 800837c:	4628      	mov	r0, r5
 800837e:	47b8      	blx	r7
 8008380:	3001      	adds	r0, #1
 8008382:	f43f ae92 	beq.w	80080aa <_printf_float+0xba>
 8008386:	f108 0801 	add.w	r8, r8, #1
 800838a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	eba3 030a 	sub.w	r3, r3, sl
 8008394:	4543      	cmp	r3, r8
 8008396:	dcee      	bgt.n	8008376 <_printf_float+0x386>
 8008398:	e74a      	b.n	8008230 <_printf_float+0x240>
 800839a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800839c:	2a01      	cmp	r2, #1
 800839e:	dc01      	bgt.n	80083a4 <_printf_float+0x3b4>
 80083a0:	07db      	lsls	r3, r3, #31
 80083a2:	d53a      	bpl.n	800841a <_printf_float+0x42a>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4642      	mov	r2, r8
 80083a8:	4631      	mov	r1, r6
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b8      	blx	r7
 80083ae:	3001      	adds	r0, #1
 80083b0:	f43f ae7b 	beq.w	80080aa <_printf_float+0xba>
 80083b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f108 0801 	add.w	r8, r8, #1
 80083c4:	f43f ae71 	beq.w	80080aa <_printf_float+0xba>
 80083c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ca:	2200      	movs	r2, #0
 80083cc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80083d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083d4:	2300      	movs	r3, #0
 80083d6:	f7f8 fb7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80083da:	b9c8      	cbnz	r0, 8008410 <_printf_float+0x420>
 80083dc:	4653      	mov	r3, sl
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d10e      	bne.n	8008408 <_printf_float+0x418>
 80083ea:	e65e      	b.n	80080aa <_printf_float+0xba>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4652      	mov	r2, sl
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f ae57 	beq.w	80080aa <_printf_float+0xba>
 80083fc:	f108 0801 	add.w	r8, r8, #1
 8008400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008402:	3b01      	subs	r3, #1
 8008404:	4543      	cmp	r3, r8
 8008406:	dcf1      	bgt.n	80083ec <_printf_float+0x3fc>
 8008408:	464b      	mov	r3, r9
 800840a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800840e:	e6de      	b.n	80081ce <_printf_float+0x1de>
 8008410:	f04f 0800 	mov.w	r8, #0
 8008414:	f104 0a1a 	add.w	sl, r4, #26
 8008418:	e7f2      	b.n	8008400 <_printf_float+0x410>
 800841a:	2301      	movs	r3, #1
 800841c:	e7df      	b.n	80083de <_printf_float+0x3ee>
 800841e:	2301      	movs	r3, #1
 8008420:	464a      	mov	r2, r9
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	f43f ae3e 	beq.w	80080aa <_printf_float+0xba>
 800842e:	f108 0801 	add.w	r8, r8, #1
 8008432:	68e3      	ldr	r3, [r4, #12]
 8008434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	4543      	cmp	r3, r8
 800843a:	dcf0      	bgt.n	800841e <_printf_float+0x42e>
 800843c:	e6fc      	b.n	8008238 <_printf_float+0x248>
 800843e:	f04f 0800 	mov.w	r8, #0
 8008442:	f104 0919 	add.w	r9, r4, #25
 8008446:	e7f4      	b.n	8008432 <_printf_float+0x442>
 8008448:	2900      	cmp	r1, #0
 800844a:	f43f ae8b 	beq.w	8008164 <_printf_float+0x174>
 800844e:	2300      	movs	r3, #0
 8008450:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008454:	ab09      	add	r3, sp, #36	; 0x24
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	ec49 8b10 	vmov	d0, r8, r9
 800845c:	6022      	str	r2, [r4, #0]
 800845e:	f8cd a004 	str.w	sl, [sp, #4]
 8008462:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008466:	4628      	mov	r0, r5
 8008468:	f7ff fd2e 	bl	8007ec8 <__cvt>
 800846c:	4680      	mov	r8, r0
 800846e:	e648      	b.n	8008102 <_printf_float+0x112>

08008470 <_printf_common>:
 8008470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	4691      	mov	r9, r2
 8008476:	461f      	mov	r7, r3
 8008478:	688a      	ldr	r2, [r1, #8]
 800847a:	690b      	ldr	r3, [r1, #16]
 800847c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008480:	4293      	cmp	r3, r2
 8008482:	bfb8      	it	lt
 8008484:	4613      	movlt	r3, r2
 8008486:	f8c9 3000 	str.w	r3, [r9]
 800848a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800848e:	4606      	mov	r6, r0
 8008490:	460c      	mov	r4, r1
 8008492:	b112      	cbz	r2, 800849a <_printf_common+0x2a>
 8008494:	3301      	adds	r3, #1
 8008496:	f8c9 3000 	str.w	r3, [r9]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	0699      	lsls	r1, r3, #26
 800849e:	bf42      	ittt	mi
 80084a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80084a4:	3302      	addmi	r3, #2
 80084a6:	f8c9 3000 	strmi.w	r3, [r9]
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	f015 0506 	ands.w	r5, r5, #6
 80084b0:	d107      	bne.n	80084c2 <_printf_common+0x52>
 80084b2:	f104 0a19 	add.w	sl, r4, #25
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	f8d9 2000 	ldr.w	r2, [r9]
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	42ab      	cmp	r3, r5
 80084c0:	dc28      	bgt.n	8008514 <_printf_common+0xa4>
 80084c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	3300      	adds	r3, #0
 80084ca:	bf18      	it	ne
 80084cc:	2301      	movne	r3, #1
 80084ce:	0692      	lsls	r2, r2, #26
 80084d0:	d42d      	bmi.n	800852e <_printf_common+0xbe>
 80084d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d6:	4639      	mov	r1, r7
 80084d8:	4630      	mov	r0, r6
 80084da:	47c0      	blx	r8
 80084dc:	3001      	adds	r0, #1
 80084de:	d020      	beq.n	8008522 <_printf_common+0xb2>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	68e5      	ldr	r5, [r4, #12]
 80084e4:	f8d9 2000 	ldr.w	r2, [r9]
 80084e8:	f003 0306 	and.w	r3, r3, #6
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	bf08      	it	eq
 80084f0:	1aad      	subeq	r5, r5, r2
 80084f2:	68a3      	ldr	r3, [r4, #8]
 80084f4:	6922      	ldr	r2, [r4, #16]
 80084f6:	bf0c      	ite	eq
 80084f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084fc:	2500      	movne	r5, #0
 80084fe:	4293      	cmp	r3, r2
 8008500:	bfc4      	itt	gt
 8008502:	1a9b      	subgt	r3, r3, r2
 8008504:	18ed      	addgt	r5, r5, r3
 8008506:	f04f 0900 	mov.w	r9, #0
 800850a:	341a      	adds	r4, #26
 800850c:	454d      	cmp	r5, r9
 800850e:	d11a      	bne.n	8008546 <_printf_common+0xd6>
 8008510:	2000      	movs	r0, #0
 8008512:	e008      	b.n	8008526 <_printf_common+0xb6>
 8008514:	2301      	movs	r3, #1
 8008516:	4652      	mov	r2, sl
 8008518:	4639      	mov	r1, r7
 800851a:	4630      	mov	r0, r6
 800851c:	47c0      	blx	r8
 800851e:	3001      	adds	r0, #1
 8008520:	d103      	bne.n	800852a <_printf_common+0xba>
 8008522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852a:	3501      	adds	r5, #1
 800852c:	e7c3      	b.n	80084b6 <_printf_common+0x46>
 800852e:	18e1      	adds	r1, r4, r3
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	2030      	movs	r0, #48	; 0x30
 8008534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008538:	4422      	add	r2, r4
 800853a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800853e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008542:	3302      	adds	r3, #2
 8008544:	e7c5      	b.n	80084d2 <_printf_common+0x62>
 8008546:	2301      	movs	r3, #1
 8008548:	4622      	mov	r2, r4
 800854a:	4639      	mov	r1, r7
 800854c:	4630      	mov	r0, r6
 800854e:	47c0      	blx	r8
 8008550:	3001      	adds	r0, #1
 8008552:	d0e6      	beq.n	8008522 <_printf_common+0xb2>
 8008554:	f109 0901 	add.w	r9, r9, #1
 8008558:	e7d8      	b.n	800850c <_printf_common+0x9c>
	...

0800855c <_printf_i>:
 800855c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008560:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008564:	460c      	mov	r4, r1
 8008566:	7e09      	ldrb	r1, [r1, #24]
 8008568:	b085      	sub	sp, #20
 800856a:	296e      	cmp	r1, #110	; 0x6e
 800856c:	4617      	mov	r7, r2
 800856e:	4606      	mov	r6, r0
 8008570:	4698      	mov	r8, r3
 8008572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008574:	f000 80b3 	beq.w	80086de <_printf_i+0x182>
 8008578:	d822      	bhi.n	80085c0 <_printf_i+0x64>
 800857a:	2963      	cmp	r1, #99	; 0x63
 800857c:	d036      	beq.n	80085ec <_printf_i+0x90>
 800857e:	d80a      	bhi.n	8008596 <_printf_i+0x3a>
 8008580:	2900      	cmp	r1, #0
 8008582:	f000 80b9 	beq.w	80086f8 <_printf_i+0x19c>
 8008586:	2958      	cmp	r1, #88	; 0x58
 8008588:	f000 8083 	beq.w	8008692 <_printf_i+0x136>
 800858c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008590:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008594:	e032      	b.n	80085fc <_printf_i+0xa0>
 8008596:	2964      	cmp	r1, #100	; 0x64
 8008598:	d001      	beq.n	800859e <_printf_i+0x42>
 800859a:	2969      	cmp	r1, #105	; 0x69
 800859c:	d1f6      	bne.n	800858c <_printf_i+0x30>
 800859e:	6820      	ldr	r0, [r4, #0]
 80085a0:	6813      	ldr	r3, [r2, #0]
 80085a2:	0605      	lsls	r5, r0, #24
 80085a4:	f103 0104 	add.w	r1, r3, #4
 80085a8:	d52a      	bpl.n	8008600 <_printf_i+0xa4>
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	da03      	bge.n	80085ba <_printf_i+0x5e>
 80085b2:	222d      	movs	r2, #45	; 0x2d
 80085b4:	425b      	negs	r3, r3
 80085b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80085ba:	486f      	ldr	r0, [pc, #444]	; (8008778 <_printf_i+0x21c>)
 80085bc:	220a      	movs	r2, #10
 80085be:	e039      	b.n	8008634 <_printf_i+0xd8>
 80085c0:	2973      	cmp	r1, #115	; 0x73
 80085c2:	f000 809d 	beq.w	8008700 <_printf_i+0x1a4>
 80085c6:	d808      	bhi.n	80085da <_printf_i+0x7e>
 80085c8:	296f      	cmp	r1, #111	; 0x6f
 80085ca:	d020      	beq.n	800860e <_printf_i+0xb2>
 80085cc:	2970      	cmp	r1, #112	; 0x70
 80085ce:	d1dd      	bne.n	800858c <_printf_i+0x30>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	f043 0320 	orr.w	r3, r3, #32
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	e003      	b.n	80085e2 <_printf_i+0x86>
 80085da:	2975      	cmp	r1, #117	; 0x75
 80085dc:	d017      	beq.n	800860e <_printf_i+0xb2>
 80085de:	2978      	cmp	r1, #120	; 0x78
 80085e0:	d1d4      	bne.n	800858c <_printf_i+0x30>
 80085e2:	2378      	movs	r3, #120	; 0x78
 80085e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e8:	4864      	ldr	r0, [pc, #400]	; (800877c <_printf_i+0x220>)
 80085ea:	e055      	b.n	8008698 <_printf_i+0x13c>
 80085ec:	6813      	ldr	r3, [r2, #0]
 80085ee:	1d19      	adds	r1, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6011      	str	r1, [r2, #0]
 80085f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085fc:	2301      	movs	r3, #1
 80085fe:	e08c      	b.n	800871a <_printf_i+0x1be>
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6011      	str	r1, [r2, #0]
 8008604:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008608:	bf18      	it	ne
 800860a:	b21b      	sxthne	r3, r3
 800860c:	e7cf      	b.n	80085ae <_printf_i+0x52>
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	6825      	ldr	r5, [r4, #0]
 8008612:	1d18      	adds	r0, r3, #4
 8008614:	6010      	str	r0, [r2, #0]
 8008616:	0628      	lsls	r0, r5, #24
 8008618:	d501      	bpl.n	800861e <_printf_i+0xc2>
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	e002      	b.n	8008624 <_printf_i+0xc8>
 800861e:	0668      	lsls	r0, r5, #25
 8008620:	d5fb      	bpl.n	800861a <_printf_i+0xbe>
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	4854      	ldr	r0, [pc, #336]	; (8008778 <_printf_i+0x21c>)
 8008626:	296f      	cmp	r1, #111	; 0x6f
 8008628:	bf14      	ite	ne
 800862a:	220a      	movne	r2, #10
 800862c:	2208      	moveq	r2, #8
 800862e:	2100      	movs	r1, #0
 8008630:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008634:	6865      	ldr	r5, [r4, #4]
 8008636:	60a5      	str	r5, [r4, #8]
 8008638:	2d00      	cmp	r5, #0
 800863a:	f2c0 8095 	blt.w	8008768 <_printf_i+0x20c>
 800863e:	6821      	ldr	r1, [r4, #0]
 8008640:	f021 0104 	bic.w	r1, r1, #4
 8008644:	6021      	str	r1, [r4, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d13d      	bne.n	80086c6 <_printf_i+0x16a>
 800864a:	2d00      	cmp	r5, #0
 800864c:	f040 808e 	bne.w	800876c <_printf_i+0x210>
 8008650:	4665      	mov	r5, ip
 8008652:	2a08      	cmp	r2, #8
 8008654:	d10b      	bne.n	800866e <_printf_i+0x112>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	07db      	lsls	r3, r3, #31
 800865a:	d508      	bpl.n	800866e <_printf_i+0x112>
 800865c:	6923      	ldr	r3, [r4, #16]
 800865e:	6862      	ldr	r2, [r4, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	bfde      	ittt	le
 8008664:	2330      	movle	r3, #48	; 0x30
 8008666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800866a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800866e:	ebac 0305 	sub.w	r3, ip, r5
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	f8cd 8000 	str.w	r8, [sp]
 8008678:	463b      	mov	r3, r7
 800867a:	aa03      	add	r2, sp, #12
 800867c:	4621      	mov	r1, r4
 800867e:	4630      	mov	r0, r6
 8008680:	f7ff fef6 	bl	8008470 <_printf_common>
 8008684:	3001      	adds	r0, #1
 8008686:	d14d      	bne.n	8008724 <_printf_i+0x1c8>
 8008688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800868c:	b005      	add	sp, #20
 800868e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008692:	4839      	ldr	r0, [pc, #228]	; (8008778 <_printf_i+0x21c>)
 8008694:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008698:	6813      	ldr	r3, [r2, #0]
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	1d1d      	adds	r5, r3, #4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6015      	str	r5, [r2, #0]
 80086a2:	060a      	lsls	r2, r1, #24
 80086a4:	d50b      	bpl.n	80086be <_printf_i+0x162>
 80086a6:	07ca      	lsls	r2, r1, #31
 80086a8:	bf44      	itt	mi
 80086aa:	f041 0120 	orrmi.w	r1, r1, #32
 80086ae:	6021      	strmi	r1, [r4, #0]
 80086b0:	b91b      	cbnz	r3, 80086ba <_printf_i+0x15e>
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	f022 0220 	bic.w	r2, r2, #32
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	2210      	movs	r2, #16
 80086bc:	e7b7      	b.n	800862e <_printf_i+0xd2>
 80086be:	064d      	lsls	r5, r1, #25
 80086c0:	bf48      	it	mi
 80086c2:	b29b      	uxthmi	r3, r3
 80086c4:	e7ef      	b.n	80086a6 <_printf_i+0x14a>
 80086c6:	4665      	mov	r5, ip
 80086c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086cc:	fb02 3311 	mls	r3, r2, r1, r3
 80086d0:	5cc3      	ldrb	r3, [r0, r3]
 80086d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80086d6:	460b      	mov	r3, r1
 80086d8:	2900      	cmp	r1, #0
 80086da:	d1f5      	bne.n	80086c8 <_printf_i+0x16c>
 80086dc:	e7b9      	b.n	8008652 <_printf_i+0xf6>
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	6825      	ldr	r5, [r4, #0]
 80086e2:	6961      	ldr	r1, [r4, #20]
 80086e4:	1d18      	adds	r0, r3, #4
 80086e6:	6010      	str	r0, [r2, #0]
 80086e8:	0628      	lsls	r0, r5, #24
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	d501      	bpl.n	80086f2 <_printf_i+0x196>
 80086ee:	6019      	str	r1, [r3, #0]
 80086f0:	e002      	b.n	80086f8 <_printf_i+0x19c>
 80086f2:	066a      	lsls	r2, r5, #25
 80086f4:	d5fb      	bpl.n	80086ee <_printf_i+0x192>
 80086f6:	8019      	strh	r1, [r3, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	6123      	str	r3, [r4, #16]
 80086fc:	4665      	mov	r5, ip
 80086fe:	e7b9      	b.n	8008674 <_printf_i+0x118>
 8008700:	6813      	ldr	r3, [r2, #0]
 8008702:	1d19      	adds	r1, r3, #4
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	681d      	ldr	r5, [r3, #0]
 8008708:	6862      	ldr	r2, [r4, #4]
 800870a:	2100      	movs	r1, #0
 800870c:	4628      	mov	r0, r5
 800870e:	f7f7 fd6f 	bl	80001f0 <memchr>
 8008712:	b108      	cbz	r0, 8008718 <_printf_i+0x1bc>
 8008714:	1b40      	subs	r0, r0, r5
 8008716:	6060      	str	r0, [r4, #4]
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	2300      	movs	r3, #0
 800871e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008722:	e7a7      	b.n	8008674 <_printf_i+0x118>
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	462a      	mov	r2, r5
 8008728:	4639      	mov	r1, r7
 800872a:	4630      	mov	r0, r6
 800872c:	47c0      	blx	r8
 800872e:	3001      	adds	r0, #1
 8008730:	d0aa      	beq.n	8008688 <_printf_i+0x12c>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	079b      	lsls	r3, r3, #30
 8008736:	d413      	bmi.n	8008760 <_printf_i+0x204>
 8008738:	68e0      	ldr	r0, [r4, #12]
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	4298      	cmp	r0, r3
 800873e:	bfb8      	it	lt
 8008740:	4618      	movlt	r0, r3
 8008742:	e7a3      	b.n	800868c <_printf_i+0x130>
 8008744:	2301      	movs	r3, #1
 8008746:	464a      	mov	r2, r9
 8008748:	4639      	mov	r1, r7
 800874a:	4630      	mov	r0, r6
 800874c:	47c0      	blx	r8
 800874e:	3001      	adds	r0, #1
 8008750:	d09a      	beq.n	8008688 <_printf_i+0x12c>
 8008752:	3501      	adds	r5, #1
 8008754:	68e3      	ldr	r3, [r4, #12]
 8008756:	9a03      	ldr	r2, [sp, #12]
 8008758:	1a9b      	subs	r3, r3, r2
 800875a:	42ab      	cmp	r3, r5
 800875c:	dcf2      	bgt.n	8008744 <_printf_i+0x1e8>
 800875e:	e7eb      	b.n	8008738 <_printf_i+0x1dc>
 8008760:	2500      	movs	r5, #0
 8008762:	f104 0919 	add.w	r9, r4, #25
 8008766:	e7f5      	b.n	8008754 <_printf_i+0x1f8>
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1ac      	bne.n	80086c6 <_printf_i+0x16a>
 800876c:	7803      	ldrb	r3, [r0, #0]
 800876e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008776:	e76c      	b.n	8008652 <_printf_i+0xf6>
 8008778:	080663d6 	.word	0x080663d6
 800877c:	080663e7 	.word	0x080663e7

08008780 <iprintf>:
 8008780:	b40f      	push	{r0, r1, r2, r3}
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <iprintf+0x2c>)
 8008784:	b513      	push	{r0, r1, r4, lr}
 8008786:	681c      	ldr	r4, [r3, #0]
 8008788:	b124      	cbz	r4, 8008794 <iprintf+0x14>
 800878a:	69a3      	ldr	r3, [r4, #24]
 800878c:	b913      	cbnz	r3, 8008794 <iprintf+0x14>
 800878e:	4620      	mov	r0, r4
 8008790:	f000 fec2 	bl	8009518 <__sinit>
 8008794:	ab05      	add	r3, sp, #20
 8008796:	9a04      	ldr	r2, [sp, #16]
 8008798:	68a1      	ldr	r1, [r4, #8]
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	4620      	mov	r0, r4
 800879e:	f001 fbe1 	bl	8009f64 <_vfiprintf_r>
 80087a2:	b002      	add	sp, #8
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	b004      	add	sp, #16
 80087aa:	4770      	bx	lr
 80087ac:	20000894 	.word	0x20000894

080087b0 <_sbrk_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4c06      	ldr	r4, [pc, #24]	; (80087cc <_sbrk_r+0x1c>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4605      	mov	r5, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	f7f9 fb0a 	bl	8001dd4 <_sbrk>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_sbrk_r+0x1a>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_sbrk_r+0x1a>
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	20007054 	.word	0x20007054

080087d0 <siprintf>:
 80087d0:	b40e      	push	{r1, r2, r3}
 80087d2:	b500      	push	{lr}
 80087d4:	b09c      	sub	sp, #112	; 0x70
 80087d6:	ab1d      	add	r3, sp, #116	; 0x74
 80087d8:	9002      	str	r0, [sp, #8]
 80087da:	9006      	str	r0, [sp, #24]
 80087dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087e0:	4809      	ldr	r0, [pc, #36]	; (8008808 <siprintf+0x38>)
 80087e2:	9107      	str	r1, [sp, #28]
 80087e4:	9104      	str	r1, [sp, #16]
 80087e6:	4909      	ldr	r1, [pc, #36]	; (800880c <siprintf+0x3c>)
 80087e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ec:	9105      	str	r1, [sp, #20]
 80087ee:	6800      	ldr	r0, [r0, #0]
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	a902      	add	r1, sp, #8
 80087f4:	f001 fa94 	bl	8009d20 <_svfiprintf_r>
 80087f8:	9b02      	ldr	r3, [sp, #8]
 80087fa:	2200      	movs	r2, #0
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	b01c      	add	sp, #112	; 0x70
 8008800:	f85d eb04 	ldr.w	lr, [sp], #4
 8008804:	b003      	add	sp, #12
 8008806:	4770      	bx	lr
 8008808:	20000894 	.word	0x20000894
 800880c:	ffff0208 	.word	0xffff0208

08008810 <quorem>:
 8008810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	6903      	ldr	r3, [r0, #16]
 8008816:	690c      	ldr	r4, [r1, #16]
 8008818:	42a3      	cmp	r3, r4
 800881a:	4680      	mov	r8, r0
 800881c:	f2c0 8082 	blt.w	8008924 <quorem+0x114>
 8008820:	3c01      	subs	r4, #1
 8008822:	f101 0714 	add.w	r7, r1, #20
 8008826:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800882a:	f100 0614 	add.w	r6, r0, #20
 800882e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008832:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008836:	eb06 030c 	add.w	r3, r6, ip
 800883a:	3501      	adds	r5, #1
 800883c:	eb07 090c 	add.w	r9, r7, ip
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	fbb0 f5f5 	udiv	r5, r0, r5
 8008846:	b395      	cbz	r5, 80088ae <quorem+0x9e>
 8008848:	f04f 0a00 	mov.w	sl, #0
 800884c:	4638      	mov	r0, r7
 800884e:	46b6      	mov	lr, r6
 8008850:	46d3      	mov	fp, sl
 8008852:	f850 2b04 	ldr.w	r2, [r0], #4
 8008856:	b293      	uxth	r3, r2
 8008858:	fb05 a303 	mla	r3, r5, r3, sl
 800885c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008860:	b29b      	uxth	r3, r3
 8008862:	ebab 0303 	sub.w	r3, fp, r3
 8008866:	0c12      	lsrs	r2, r2, #16
 8008868:	f8de b000 	ldr.w	fp, [lr]
 800886c:	fb05 a202 	mla	r2, r5, r2, sl
 8008870:	fa13 f38b 	uxtah	r3, r3, fp
 8008874:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008878:	fa1f fb82 	uxth.w	fp, r2
 800887c:	f8de 2000 	ldr.w	r2, [lr]
 8008880:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008888:	b29b      	uxth	r3, r3
 800888a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888e:	4581      	cmp	r9, r0
 8008890:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008894:	f84e 3b04 	str.w	r3, [lr], #4
 8008898:	d2db      	bcs.n	8008852 <quorem+0x42>
 800889a:	f856 300c 	ldr.w	r3, [r6, ip]
 800889e:	b933      	cbnz	r3, 80088ae <quorem+0x9e>
 80088a0:	9b01      	ldr	r3, [sp, #4]
 80088a2:	3b04      	subs	r3, #4
 80088a4:	429e      	cmp	r6, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	d330      	bcc.n	800890c <quorem+0xfc>
 80088aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80088ae:	4640      	mov	r0, r8
 80088b0:	f001 f8e2 	bl	8009a78 <__mcmp>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	db25      	blt.n	8008904 <quorem+0xf4>
 80088b8:	3501      	adds	r5, #1
 80088ba:	4630      	mov	r0, r6
 80088bc:	f04f 0c00 	mov.w	ip, #0
 80088c0:	f857 2b04 	ldr.w	r2, [r7], #4
 80088c4:	f8d0 e000 	ldr.w	lr, [r0]
 80088c8:	b293      	uxth	r3, r2
 80088ca:	ebac 0303 	sub.w	r3, ip, r3
 80088ce:	0c12      	lsrs	r2, r2, #16
 80088d0:	fa13 f38e 	uxtah	r3, r3, lr
 80088d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088dc:	b29b      	uxth	r3, r3
 80088de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088e2:	45b9      	cmp	r9, r7
 80088e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088e8:	f840 3b04 	str.w	r3, [r0], #4
 80088ec:	d2e8      	bcs.n	80088c0 <quorem+0xb0>
 80088ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80088f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80088f6:	b92a      	cbnz	r2, 8008904 <quorem+0xf4>
 80088f8:	3b04      	subs	r3, #4
 80088fa:	429e      	cmp	r6, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	d30b      	bcc.n	8008918 <quorem+0x108>
 8008900:	f8c8 4010 	str.w	r4, [r8, #16]
 8008904:	4628      	mov	r0, r5
 8008906:	b003      	add	sp, #12
 8008908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	6812      	ldr	r2, [r2, #0]
 800890e:	3b04      	subs	r3, #4
 8008910:	2a00      	cmp	r2, #0
 8008912:	d1ca      	bne.n	80088aa <quorem+0x9a>
 8008914:	3c01      	subs	r4, #1
 8008916:	e7c5      	b.n	80088a4 <quorem+0x94>
 8008918:	6812      	ldr	r2, [r2, #0]
 800891a:	3b04      	subs	r3, #4
 800891c:	2a00      	cmp	r2, #0
 800891e:	d1ef      	bne.n	8008900 <quorem+0xf0>
 8008920:	3c01      	subs	r4, #1
 8008922:	e7ea      	b.n	80088fa <quorem+0xea>
 8008924:	2000      	movs	r0, #0
 8008926:	e7ee      	b.n	8008906 <quorem+0xf6>

08008928 <_dtoa_r>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	ec57 6b10 	vmov	r6, r7, d0
 8008930:	b097      	sub	sp, #92	; 0x5c
 8008932:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008934:	9106      	str	r1, [sp, #24]
 8008936:	4604      	mov	r4, r0
 8008938:	920b      	str	r2, [sp, #44]	; 0x2c
 800893a:	9312      	str	r3, [sp, #72]	; 0x48
 800893c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008940:	e9cd 6700 	strd	r6, r7, [sp]
 8008944:	b93d      	cbnz	r5, 8008956 <_dtoa_r+0x2e>
 8008946:	2010      	movs	r0, #16
 8008948:	f7ff f9fa 	bl	8007d40 <malloc>
 800894c:	6260      	str	r0, [r4, #36]	; 0x24
 800894e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008952:	6005      	str	r5, [r0, #0]
 8008954:	60c5      	str	r5, [r0, #12]
 8008956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008958:	6819      	ldr	r1, [r3, #0]
 800895a:	b151      	cbz	r1, 8008972 <_dtoa_r+0x4a>
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	604a      	str	r2, [r1, #4]
 8008960:	2301      	movs	r3, #1
 8008962:	4093      	lsls	r3, r2
 8008964:	608b      	str	r3, [r1, #8]
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fea4 	bl	80096b4 <_Bfree>
 800896c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	1e3b      	subs	r3, r7, #0
 8008974:	bfbb      	ittet	lt
 8008976:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800897a:	9301      	strlt	r3, [sp, #4]
 800897c:	2300      	movge	r3, #0
 800897e:	2201      	movlt	r2, #1
 8008980:	bfac      	ite	ge
 8008982:	f8c8 3000 	strge.w	r3, [r8]
 8008986:	f8c8 2000 	strlt.w	r2, [r8]
 800898a:	4baf      	ldr	r3, [pc, #700]	; (8008c48 <_dtoa_r+0x320>)
 800898c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008990:	ea33 0308 	bics.w	r3, r3, r8
 8008994:	d114      	bne.n	80089c0 <_dtoa_r+0x98>
 8008996:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008998:	f242 730f 	movw	r3, #9999	; 0x270f
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	9b00      	ldr	r3, [sp, #0]
 80089a0:	b923      	cbnz	r3, 80089ac <_dtoa_r+0x84>
 80089a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f000 8542 	beq.w	8009430 <_dtoa_r+0xb08>
 80089ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008c5c <_dtoa_r+0x334>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 8544 	beq.w	8009440 <_dtoa_r+0xb18>
 80089b8:	f10b 0303 	add.w	r3, fp, #3
 80089bc:	f000 bd3e 	b.w	800943c <_dtoa_r+0xb14>
 80089c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80089c4:	2200      	movs	r2, #0
 80089c6:	2300      	movs	r3, #0
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f8 f884 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d0:	4681      	mov	r9, r0
 80089d2:	b168      	cbz	r0, 80089f0 <_dtoa_r+0xc8>
 80089d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089d6:	2301      	movs	r3, #1
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 8524 	beq.w	800942a <_dtoa_r+0xb02>
 80089e2:	4b9a      	ldr	r3, [pc, #616]	; (8008c4c <_dtoa_r+0x324>)
 80089e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089e6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	f000 bd28 	b.w	8009440 <_dtoa_r+0xb18>
 80089f0:	aa14      	add	r2, sp, #80	; 0x50
 80089f2:	a915      	add	r1, sp, #84	; 0x54
 80089f4:	ec47 6b10 	vmov	d0, r6, r7
 80089f8:	4620      	mov	r0, r4
 80089fa:	f001 f8b4 	bl	8009b66 <__d2b>
 80089fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a02:	9004      	str	r0, [sp, #16]
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	d07c      	beq.n	8008b02 <_dtoa_r+0x1da>
 8008a08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008a10:	46b2      	mov	sl, r6
 8008a12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4b8b      	ldr	r3, [pc, #556]	; (8008c50 <_dtoa_r+0x328>)
 8008a22:	4650      	mov	r0, sl
 8008a24:	4659      	mov	r1, fp
 8008a26:	f7f7 fc37 	bl	8000298 <__aeabi_dsub>
 8008a2a:	a381      	add	r3, pc, #516	; (adr r3, 8008c30 <_dtoa_r+0x308>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fdea 	bl	8000608 <__aeabi_dmul>
 8008a34:	a380      	add	r3, pc, #512	; (adr r3, 8008c38 <_dtoa_r+0x310>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fc2f 	bl	800029c <__adddf3>
 8008a3e:	4606      	mov	r6, r0
 8008a40:	4628      	mov	r0, r5
 8008a42:	460f      	mov	r7, r1
 8008a44:	f7f7 fd76 	bl	8000534 <__aeabi_i2d>
 8008a48:	a37d      	add	r3, pc, #500	; (adr r3, 8008c40 <_dtoa_r+0x318>)
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4630      	mov	r0, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f7 fc1f 	bl	800029c <__adddf3>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	f7f8 f881 	bl	8000b68 <__aeabi_d2iz>
 8008a66:	2200      	movs	r2, #0
 8008a68:	4682      	mov	sl, r0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	4639      	mov	r1, r7
 8008a70:	f7f8 f83c 	bl	8000aec <__aeabi_dcmplt>
 8008a74:	b148      	cbz	r0, 8008a8a <_dtoa_r+0x162>
 8008a76:	4650      	mov	r0, sl
 8008a78:	f7f7 fd5c 	bl	8000534 <__aeabi_i2d>
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	463b      	mov	r3, r7
 8008a80:	f7f8 f82a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a84:	b908      	cbnz	r0, 8008a8a <_dtoa_r+0x162>
 8008a86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a8a:	f1ba 0f16 	cmp.w	sl, #22
 8008a8e:	d859      	bhi.n	8008b44 <_dtoa_r+0x21c>
 8008a90:	4970      	ldr	r1, [pc, #448]	; (8008c54 <_dtoa_r+0x32c>)
 8008a92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a9e:	f7f8 f843 	bl	8000b28 <__aeabi_dcmpgt>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d050      	beq.n	8008b48 <_dtoa_r+0x220>
 8008aa6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008aaa:	2300      	movs	r3, #0
 8008aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ab0:	1b5d      	subs	r5, r3, r5
 8008ab2:	f1b5 0801 	subs.w	r8, r5, #1
 8008ab6:	bf49      	itett	mi
 8008ab8:	f1c5 0301 	rsbmi	r3, r5, #1
 8008abc:	2300      	movpl	r3, #0
 8008abe:	9305      	strmi	r3, [sp, #20]
 8008ac0:	f04f 0800 	movmi.w	r8, #0
 8008ac4:	bf58      	it	pl
 8008ac6:	9305      	strpl	r3, [sp, #20]
 8008ac8:	f1ba 0f00 	cmp.w	sl, #0
 8008acc:	db3e      	blt.n	8008b4c <_dtoa_r+0x224>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	44d0      	add	r8, sl
 8008ad2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	2b09      	cmp	r3, #9
 8008adc:	f200 8090 	bhi.w	8008c00 <_dtoa_r+0x2d8>
 8008ae0:	2b05      	cmp	r3, #5
 8008ae2:	bfc4      	itt	gt
 8008ae4:	3b04      	subgt	r3, #4
 8008ae6:	9306      	strgt	r3, [sp, #24]
 8008ae8:	9b06      	ldr	r3, [sp, #24]
 8008aea:	f1a3 0302 	sub.w	r3, r3, #2
 8008aee:	bfcc      	ite	gt
 8008af0:	2500      	movgt	r5, #0
 8008af2:	2501      	movle	r5, #1
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	f200 808f 	bhi.w	8008c18 <_dtoa_r+0x2f0>
 8008afa:	e8df f003 	tbb	[pc, r3]
 8008afe:	7f7d      	.short	0x7f7d
 8008b00:	7131      	.short	0x7131
 8008b02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008b06:	441d      	add	r5, r3
 8008b08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008b0c:	2820      	cmp	r0, #32
 8008b0e:	dd13      	ble.n	8008b38 <_dtoa_r+0x210>
 8008b10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008b14:	9b00      	ldr	r3, [sp, #0]
 8008b16:	fa08 f800 	lsl.w	r8, r8, r0
 8008b1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008b1e:	fa23 f000 	lsr.w	r0, r3, r0
 8008b22:	ea48 0000 	orr.w	r0, r8, r0
 8008b26:	f7f7 fcf5 	bl	8000514 <__aeabi_ui2d>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4682      	mov	sl, r0
 8008b2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008b32:	3d01      	subs	r5, #1
 8008b34:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b36:	e772      	b.n	8008a1e <_dtoa_r+0xf6>
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	f1c0 0020 	rsb	r0, r0, #32
 8008b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b42:	e7f0      	b.n	8008b26 <_dtoa_r+0x1fe>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e7b1      	b.n	8008aac <_dtoa_r+0x184>
 8008b48:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b4a:	e7b0      	b.n	8008aae <_dtoa_r+0x186>
 8008b4c:	9b05      	ldr	r3, [sp, #20]
 8008b4e:	eba3 030a 	sub.w	r3, r3, sl
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	f1ca 0300 	rsb	r3, sl, #0
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8008b5e:	e7bb      	b.n	8008ad8 <_dtoa_r+0x1b0>
 8008b60:	2301      	movs	r3, #1
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dd59      	ble.n	8008c1e <_dtoa_r+0x2f6>
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	4699      	mov	r9, r3
 8008b6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b70:	2200      	movs	r2, #0
 8008b72:	6072      	str	r2, [r6, #4]
 8008b74:	2204      	movs	r2, #4
 8008b76:	f102 0014 	add.w	r0, r2, #20
 8008b7a:	4298      	cmp	r0, r3
 8008b7c:	6871      	ldr	r1, [r6, #4]
 8008b7e:	d953      	bls.n	8008c28 <_dtoa_r+0x300>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fd63 	bl	800964c <_Balloc>
 8008b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b88:	6030      	str	r0, [r6, #0]
 8008b8a:	f1b9 0f0e 	cmp.w	r9, #14
 8008b8e:	f8d3 b000 	ldr.w	fp, [r3]
 8008b92:	f200 80e6 	bhi.w	8008d62 <_dtoa_r+0x43a>
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	f000 80e3 	beq.w	8008d62 <_dtoa_r+0x43a>
 8008b9c:	ed9d 7b00 	vldr	d7, [sp]
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008ba8:	dd74      	ble.n	8008c94 <_dtoa_r+0x36c>
 8008baa:	4a2a      	ldr	r2, [pc, #168]	; (8008c54 <_dtoa_r+0x32c>)
 8008bac:	f00a 030f 	and.w	r3, sl, #15
 8008bb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bb4:	ed93 7b00 	vldr	d7, [r3]
 8008bb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008bbc:	06f0      	lsls	r0, r6, #27
 8008bbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008bc2:	d565      	bpl.n	8008c90 <_dtoa_r+0x368>
 8008bc4:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <_dtoa_r+0x330>)
 8008bc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bce:	f7f7 fe45 	bl	800085c <__aeabi_ddiv>
 8008bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8008bd6:	f006 060f 	and.w	r6, r6, #15
 8008bda:	2503      	movs	r5, #3
 8008bdc:	4f1e      	ldr	r7, [pc, #120]	; (8008c58 <_dtoa_r+0x330>)
 8008bde:	e04c      	b.n	8008c7a <_dtoa_r+0x352>
 8008be0:	2301      	movs	r3, #1
 8008be2:	930a      	str	r3, [sp, #40]	; 0x28
 8008be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be6:	4453      	add	r3, sl
 8008be8:	f103 0901 	add.w	r9, r3, #1
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	464b      	mov	r3, r9
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	bfb8      	it	lt
 8008bf4:	2301      	movlt	r3, #1
 8008bf6:	e7ba      	b.n	8008b6e <_dtoa_r+0x246>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e7b2      	b.n	8008b62 <_dtoa_r+0x23a>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e7f0      	b.n	8008be2 <_dtoa_r+0x2ba>
 8008c00:	2501      	movs	r5, #1
 8008c02:	2300      	movs	r3, #0
 8008c04:	9306      	str	r3, [sp, #24]
 8008c06:	950a      	str	r5, [sp, #40]	; 0x28
 8008c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	4699      	mov	r9, r3
 8008c10:	2200      	movs	r2, #0
 8008c12:	2312      	movs	r3, #18
 8008c14:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c16:	e7aa      	b.n	8008b6e <_dtoa_r+0x246>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1c:	e7f4      	b.n	8008c08 <_dtoa_r+0x2e0>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	9302      	str	r3, [sp, #8]
 8008c22:	4699      	mov	r9, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	e7f5      	b.n	8008c14 <_dtoa_r+0x2ec>
 8008c28:	3101      	adds	r1, #1
 8008c2a:	6071      	str	r1, [r6, #4]
 8008c2c:	0052      	lsls	r2, r2, #1
 8008c2e:	e7a2      	b.n	8008b76 <_dtoa_r+0x24e>
 8008c30:	636f4361 	.word	0x636f4361
 8008c34:	3fd287a7 	.word	0x3fd287a7
 8008c38:	8b60c8b3 	.word	0x8b60c8b3
 8008c3c:	3fc68a28 	.word	0x3fc68a28
 8008c40:	509f79fb 	.word	0x509f79fb
 8008c44:	3fd34413 	.word	0x3fd34413
 8008c48:	7ff00000 	.word	0x7ff00000
 8008c4c:	080663d5 	.word	0x080663d5
 8008c50:	3ff80000 	.word	0x3ff80000
 8008c54:	08066490 	.word	0x08066490
 8008c58:	08066468 	.word	0x08066468
 8008c5c:	08066401 	.word	0x08066401
 8008c60:	07f1      	lsls	r1, r6, #31
 8008c62:	d508      	bpl.n	8008c76 <_dtoa_r+0x34e>
 8008c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c6c:	f7f7 fccc 	bl	8000608 <__aeabi_dmul>
 8008c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c74:	3501      	adds	r5, #1
 8008c76:	1076      	asrs	r6, r6, #1
 8008c78:	3708      	adds	r7, #8
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	d1f0      	bne.n	8008c60 <_dtoa_r+0x338>
 8008c7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c86:	f7f7 fde9 	bl	800085c <__aeabi_ddiv>
 8008c8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c8e:	e01a      	b.n	8008cc6 <_dtoa_r+0x39e>
 8008c90:	2502      	movs	r5, #2
 8008c92:	e7a3      	b.n	8008bdc <_dtoa_r+0x2b4>
 8008c94:	f000 80a0 	beq.w	8008dd8 <_dtoa_r+0x4b0>
 8008c98:	f1ca 0600 	rsb	r6, sl, #0
 8008c9c:	4b9f      	ldr	r3, [pc, #636]	; (8008f1c <_dtoa_r+0x5f4>)
 8008c9e:	4fa0      	ldr	r7, [pc, #640]	; (8008f20 <_dtoa_r+0x5f8>)
 8008ca0:	f006 020f 	and.w	r2, r6, #15
 8008ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cb0:	f7f7 fcaa 	bl	8000608 <__aeabi_dmul>
 8008cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8008cb8:	1136      	asrs	r6, r6, #4
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2502      	movs	r5, #2
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	d17f      	bne.n	8008dc2 <_dtoa_r+0x49a>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e1      	bne.n	8008c8a <_dtoa_r+0x362>
 8008cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8087 	beq.w	8008ddc <_dtoa_r+0x4b4>
 8008cce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	4b93      	ldr	r3, [pc, #588]	; (8008f24 <_dtoa_r+0x5fc>)
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 ff07 	bl	8000aec <__aeabi_dcmplt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d07c      	beq.n	8008ddc <_dtoa_r+0x4b4>
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	d079      	beq.n	8008ddc <_dtoa_r+0x4b4>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd35      	ble.n	8008d5a <_dtoa_r+0x432>
 8008cee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008cf2:	9308      	str	r3, [sp, #32]
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	4b8b      	ldr	r3, [pc, #556]	; (8008f28 <_dtoa_r+0x600>)
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7f7 fc84 	bl	8000608 <__aeabi_dmul>
 8008d00:	e9cd 0100 	strd	r0, r1, [sp]
 8008d04:	9f02      	ldr	r7, [sp, #8]
 8008d06:	3501      	adds	r5, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f7f7 fc13 	bl	8000534 <__aeabi_i2d>
 8008d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d12:	f7f7 fc79 	bl	8000608 <__aeabi_dmul>
 8008d16:	2200      	movs	r2, #0
 8008d18:	4b84      	ldr	r3, [pc, #528]	; (8008f2c <_dtoa_r+0x604>)
 8008d1a:	f7f7 fabf 	bl	800029c <__adddf3>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d24:	2f00      	cmp	r7, #0
 8008d26:	d15d      	bne.n	8008de4 <_dtoa_r+0x4bc>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	4b81      	ldr	r3, [pc, #516]	; (8008f30 <_dtoa_r+0x608>)
 8008d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d30:	f7f7 fab2 	bl	8000298 <__aeabi_dsub>
 8008d34:	462a      	mov	r2, r5
 8008d36:	4633      	mov	r3, r6
 8008d38:	e9cd 0100 	strd	r0, r1, [sp]
 8008d3c:	f7f7 fef4 	bl	8000b28 <__aeabi_dcmpgt>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	f040 8288 	bne.w	8009256 <_dtoa_r+0x92e>
 8008d46:	462a      	mov	r2, r5
 8008d48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d50:	f7f7 fecc 	bl	8000aec <__aeabi_dcmplt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f040 827c 	bne.w	8009252 <_dtoa_r+0x92a>
 8008d5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8008d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f2c0 8150 	blt.w	800900a <_dtoa_r+0x6e2>
 8008d6a:	f1ba 0f0e 	cmp.w	sl, #14
 8008d6e:	f300 814c 	bgt.w	800900a <_dtoa_r+0x6e2>
 8008d72:	4b6a      	ldr	r3, [pc, #424]	; (8008f1c <_dtoa_r+0x5f4>)
 8008d74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d78:	ed93 7b00 	vldr	d7, [r3]
 8008d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d84:	f280 80d8 	bge.w	8008f38 <_dtoa_r+0x610>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	f300 80d4 	bgt.w	8008f38 <_dtoa_r+0x610>
 8008d90:	f040 825e 	bne.w	8009250 <_dtoa_r+0x928>
 8008d94:	2200      	movs	r2, #0
 8008d96:	4b66      	ldr	r3, [pc, #408]	; (8008f30 <_dtoa_r+0x608>)
 8008d98:	ec51 0b17 	vmov	r0, r1, d7
 8008d9c:	f7f7 fc34 	bl	8000608 <__aeabi_dmul>
 8008da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008da4:	f7f7 feb6 	bl	8000b14 <__aeabi_dcmpge>
 8008da8:	464f      	mov	r7, r9
 8008daa:	464e      	mov	r6, r9
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f040 8234 	bne.w	800921a <_dtoa_r+0x8f2>
 8008db2:	2331      	movs	r3, #49	; 0x31
 8008db4:	f10b 0501 	add.w	r5, fp, #1
 8008db8:	f88b 3000 	strb.w	r3, [fp]
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	e22f      	b.n	8009222 <_dtoa_r+0x8fa>
 8008dc2:	07f2      	lsls	r2, r6, #31
 8008dc4:	d505      	bpl.n	8008dd2 <_dtoa_r+0x4aa>
 8008dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dca:	f7f7 fc1d 	bl	8000608 <__aeabi_dmul>
 8008dce:	3501      	adds	r5, #1
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	1076      	asrs	r6, r6, #1
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	e772      	b.n	8008cbe <_dtoa_r+0x396>
 8008dd8:	2502      	movs	r5, #2
 8008dda:	e774      	b.n	8008cc6 <_dtoa_r+0x39e>
 8008ddc:	f8cd a020 	str.w	sl, [sp, #32]
 8008de0:	464f      	mov	r7, r9
 8008de2:	e791      	b.n	8008d08 <_dtoa_r+0x3e0>
 8008de4:	4b4d      	ldr	r3, [pc, #308]	; (8008f1c <_dtoa_r+0x5f4>)
 8008de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d047      	beq.n	8008e84 <_dtoa_r+0x55c>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	2000      	movs	r0, #0
 8008dfa:	494e      	ldr	r1, [pc, #312]	; (8008f34 <_dtoa_r+0x60c>)
 8008dfc:	f7f7 fd2e 	bl	800085c <__aeabi_ddiv>
 8008e00:	462a      	mov	r2, r5
 8008e02:	4633      	mov	r3, r6
 8008e04:	f7f7 fa48 	bl	8000298 <__aeabi_dsub>
 8008e08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e0c:	465d      	mov	r5, fp
 8008e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e12:	f7f7 fea9 	bl	8000b68 <__aeabi_d2iz>
 8008e16:	4606      	mov	r6, r0
 8008e18:	f7f7 fb8c 	bl	8000534 <__aeabi_i2d>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e24:	f7f7 fa38 	bl	8000298 <__aeabi_dsub>
 8008e28:	3630      	adds	r6, #48	; 0x30
 8008e2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008e2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e32:	e9cd 0100 	strd	r0, r1, [sp]
 8008e36:	f7f7 fe59 	bl	8000aec <__aeabi_dcmplt>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d163      	bne.n	8008f06 <_dtoa_r+0x5de>
 8008e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e42:	2000      	movs	r0, #0
 8008e44:	4937      	ldr	r1, [pc, #220]	; (8008f24 <_dtoa_r+0x5fc>)
 8008e46:	f7f7 fa27 	bl	8000298 <__aeabi_dsub>
 8008e4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e4e:	f7f7 fe4d 	bl	8000aec <__aeabi_dcmplt>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f040 80b7 	bne.w	8008fc6 <_dtoa_r+0x69e>
 8008e58:	eba5 030b 	sub.w	r3, r5, fp
 8008e5c:	429f      	cmp	r7, r3
 8008e5e:	f77f af7c 	ble.w	8008d5a <_dtoa_r+0x432>
 8008e62:	2200      	movs	r2, #0
 8008e64:	4b30      	ldr	r3, [pc, #192]	; (8008f28 <_dtoa_r+0x600>)
 8008e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e6a:	f7f7 fbcd 	bl	8000608 <__aeabi_dmul>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e74:	4b2c      	ldr	r3, [pc, #176]	; (8008f28 <_dtoa_r+0x600>)
 8008e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e7a:	f7f7 fbc5 	bl	8000608 <__aeabi_dmul>
 8008e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e82:	e7c4      	b.n	8008e0e <_dtoa_r+0x4e6>
 8008e84:	462a      	mov	r2, r5
 8008e86:	4633      	mov	r3, r6
 8008e88:	f7f7 fbbe 	bl	8000608 <__aeabi_dmul>
 8008e8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e90:	eb0b 0507 	add.w	r5, fp, r7
 8008e94:	465e      	mov	r6, fp
 8008e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e9a:	f7f7 fe65 	bl	8000b68 <__aeabi_d2iz>
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	f7f7 fb48 	bl	8000534 <__aeabi_i2d>
 8008ea4:	3730      	adds	r7, #48	; 0x30
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eae:	f7f7 f9f3 	bl	8000298 <__aeabi_dsub>
 8008eb2:	f806 7b01 	strb.w	r7, [r6], #1
 8008eb6:	42ae      	cmp	r6, r5
 8008eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	d126      	bne.n	8008f10 <_dtoa_r+0x5e8>
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <_dtoa_r+0x60c>)
 8008ec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ec8:	f7f7 f9e8 	bl	800029c <__adddf3>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ed4:	f7f7 fe28 	bl	8000b28 <__aeabi_dcmpgt>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d174      	bne.n	8008fc6 <_dtoa_r+0x69e>
 8008edc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	4914      	ldr	r1, [pc, #80]	; (8008f34 <_dtoa_r+0x60c>)
 8008ee4:	f7f7 f9d8 	bl	8000298 <__aeabi_dsub>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ef0:	f7f7 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f43f af30 	beq.w	8008d5a <_dtoa_r+0x432>
 8008efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008efe:	2b30      	cmp	r3, #48	; 0x30
 8008f00:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008f04:	d002      	beq.n	8008f0c <_dtoa_r+0x5e4>
 8008f06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f0a:	e04a      	b.n	8008fa2 <_dtoa_r+0x67a>
 8008f0c:	4615      	mov	r5, r2
 8008f0e:	e7f4      	b.n	8008efa <_dtoa_r+0x5d2>
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <_dtoa_r+0x600>)
 8008f12:	f7f7 fb79 	bl	8000608 <__aeabi_dmul>
 8008f16:	e9cd 0100 	strd	r0, r1, [sp]
 8008f1a:	e7bc      	b.n	8008e96 <_dtoa_r+0x56e>
 8008f1c:	08066490 	.word	0x08066490
 8008f20:	08066468 	.word	0x08066468
 8008f24:	3ff00000 	.word	0x3ff00000
 8008f28:	40240000 	.word	0x40240000
 8008f2c:	401c0000 	.word	0x401c0000
 8008f30:	40140000 	.word	0x40140000
 8008f34:	3fe00000 	.word	0x3fe00000
 8008f38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f3c:	465d      	mov	r5, fp
 8008f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 fc89 	bl	800085c <__aeabi_ddiv>
 8008f4a:	f7f7 fe0d 	bl	8000b68 <__aeabi_d2iz>
 8008f4e:	4680      	mov	r8, r0
 8008f50:	f7f7 faf0 	bl	8000534 <__aeabi_i2d>
 8008f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f58:	f7f7 fb56 	bl	8000608 <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4630      	mov	r0, r6
 8008f62:	4639      	mov	r1, r7
 8008f64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008f68:	f7f7 f996 	bl	8000298 <__aeabi_dsub>
 8008f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f70:	eba5 060b 	sub.w	r6, r5, fp
 8008f74:	45b1      	cmp	r9, r6
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	d139      	bne.n	8008ff0 <_dtoa_r+0x6c8>
 8008f7c:	f7f7 f98e 	bl	800029c <__adddf3>
 8008f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f84:	4606      	mov	r6, r0
 8008f86:	460f      	mov	r7, r1
 8008f88:	f7f7 fdce 	bl	8000b28 <__aeabi_dcmpgt>
 8008f8c:	b9c8      	cbnz	r0, 8008fc2 <_dtoa_r+0x69a>
 8008f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f92:	4630      	mov	r0, r6
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f9a:	b110      	cbz	r0, 8008fa2 <_dtoa_r+0x67a>
 8008f9c:	f018 0f01 	tst.w	r8, #1
 8008fa0:	d10f      	bne.n	8008fc2 <_dtoa_r+0x69a>
 8008fa2:	9904      	ldr	r1, [sp, #16]
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f000 fb85 	bl	80096b4 <_Bfree>
 8008faa:	2300      	movs	r3, #0
 8008fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fae:	702b      	strb	r3, [r5, #0]
 8008fb0:	f10a 0301 	add.w	r3, sl, #1
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8241 	beq.w	8009440 <_dtoa_r+0xb18>
 8008fbe:	601d      	str	r5, [r3, #0]
 8008fc0:	e23e      	b.n	8009440 <_dtoa_r+0xb18>
 8008fc2:	f8cd a020 	str.w	sl, [sp, #32]
 8008fc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008fca:	2a39      	cmp	r2, #57	; 0x39
 8008fcc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008fd0:	d108      	bne.n	8008fe4 <_dtoa_r+0x6bc>
 8008fd2:	459b      	cmp	fp, r3
 8008fd4:	d10a      	bne.n	8008fec <_dtoa_r+0x6c4>
 8008fd6:	9b08      	ldr	r3, [sp, #32]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	9308      	str	r3, [sp, #32]
 8008fdc:	2330      	movs	r3, #48	; 0x30
 8008fde:	f88b 3000 	strb.w	r3, [fp]
 8008fe2:	465b      	mov	r3, fp
 8008fe4:	781a      	ldrb	r2, [r3, #0]
 8008fe6:	3201      	adds	r2, #1
 8008fe8:	701a      	strb	r2, [r3, #0]
 8008fea:	e78c      	b.n	8008f06 <_dtoa_r+0x5de>
 8008fec:	461d      	mov	r5, r3
 8008fee:	e7ea      	b.n	8008fc6 <_dtoa_r+0x69e>
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4b9b      	ldr	r3, [pc, #620]	; (8009260 <_dtoa_r+0x938>)
 8008ff4:	f7f7 fb08 	bl	8000608 <__aeabi_dmul>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	f7f7 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009004:	2800      	cmp	r0, #0
 8009006:	d09a      	beq.n	8008f3e <_dtoa_r+0x616>
 8009008:	e7cb      	b.n	8008fa2 <_dtoa_r+0x67a>
 800900a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800900c:	2a00      	cmp	r2, #0
 800900e:	f000 808b 	beq.w	8009128 <_dtoa_r+0x800>
 8009012:	9a06      	ldr	r2, [sp, #24]
 8009014:	2a01      	cmp	r2, #1
 8009016:	dc6e      	bgt.n	80090f6 <_dtoa_r+0x7ce>
 8009018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800901a:	2a00      	cmp	r2, #0
 800901c:	d067      	beq.n	80090ee <_dtoa_r+0x7c6>
 800901e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009022:	9f07      	ldr	r7, [sp, #28]
 8009024:	9d05      	ldr	r5, [sp, #20]
 8009026:	9a05      	ldr	r2, [sp, #20]
 8009028:	2101      	movs	r1, #1
 800902a:	441a      	add	r2, r3
 800902c:	4620      	mov	r0, r4
 800902e:	9205      	str	r2, [sp, #20]
 8009030:	4498      	add	r8, r3
 8009032:	f000 fbdf 	bl	80097f4 <__i2b>
 8009036:	4606      	mov	r6, r0
 8009038:	2d00      	cmp	r5, #0
 800903a:	dd0c      	ble.n	8009056 <_dtoa_r+0x72e>
 800903c:	f1b8 0f00 	cmp.w	r8, #0
 8009040:	dd09      	ble.n	8009056 <_dtoa_r+0x72e>
 8009042:	4545      	cmp	r5, r8
 8009044:	9a05      	ldr	r2, [sp, #20]
 8009046:	462b      	mov	r3, r5
 8009048:	bfa8      	it	ge
 800904a:	4643      	movge	r3, r8
 800904c:	1ad2      	subs	r2, r2, r3
 800904e:	9205      	str	r2, [sp, #20]
 8009050:	1aed      	subs	r5, r5, r3
 8009052:	eba8 0803 	sub.w	r8, r8, r3
 8009056:	9b07      	ldr	r3, [sp, #28]
 8009058:	b1eb      	cbz	r3, 8009096 <_dtoa_r+0x76e>
 800905a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905c:	2b00      	cmp	r3, #0
 800905e:	d067      	beq.n	8009130 <_dtoa_r+0x808>
 8009060:	b18f      	cbz	r7, 8009086 <_dtoa_r+0x75e>
 8009062:	4631      	mov	r1, r6
 8009064:	463a      	mov	r2, r7
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fc64 	bl	8009934 <__pow5mult>
 800906c:	9a04      	ldr	r2, [sp, #16]
 800906e:	4601      	mov	r1, r0
 8009070:	4606      	mov	r6, r0
 8009072:	4620      	mov	r0, r4
 8009074:	f000 fbc7 	bl	8009806 <__multiply>
 8009078:	9904      	ldr	r1, [sp, #16]
 800907a:	9008      	str	r0, [sp, #32]
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fb19 	bl	80096b4 <_Bfree>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	9b07      	ldr	r3, [sp, #28]
 8009088:	1bda      	subs	r2, r3, r7
 800908a:	d004      	beq.n	8009096 <_dtoa_r+0x76e>
 800908c:	9904      	ldr	r1, [sp, #16]
 800908e:	4620      	mov	r0, r4
 8009090:	f000 fc50 	bl	8009934 <__pow5mult>
 8009094:	9004      	str	r0, [sp, #16]
 8009096:	2101      	movs	r1, #1
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fbab 	bl	80097f4 <__i2b>
 800909e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a0:	4607      	mov	r7, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 81d0 	beq.w	8009448 <_dtoa_r+0xb20>
 80090a8:	461a      	mov	r2, r3
 80090aa:	4601      	mov	r1, r0
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fc41 	bl	8009934 <__pow5mult>
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	4607      	mov	r7, r0
 80090b8:	dc40      	bgt.n	800913c <_dtoa_r+0x814>
 80090ba:	9b00      	ldr	r3, [sp, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d139      	bne.n	8009134 <_dtoa_r+0x80c>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d136      	bne.n	8009138 <_dtoa_r+0x810>
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090d0:	0d1b      	lsrs	r3, r3, #20
 80090d2:	051b      	lsls	r3, r3, #20
 80090d4:	b12b      	cbz	r3, 80090e2 <_dtoa_r+0x7ba>
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	3301      	adds	r3, #1
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f108 0801 	add.w	r8, r8, #1
 80090e0:	2301      	movs	r3, #1
 80090e2:	9307      	str	r3, [sp, #28]
 80090e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d12a      	bne.n	8009140 <_dtoa_r+0x818>
 80090ea:	2001      	movs	r0, #1
 80090ec:	e030      	b.n	8009150 <_dtoa_r+0x828>
 80090ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090f4:	e795      	b.n	8009022 <_dtoa_r+0x6fa>
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80090fc:	42bb      	cmp	r3, r7
 80090fe:	bfbf      	itttt	lt
 8009100:	9b07      	ldrlt	r3, [sp, #28]
 8009102:	9707      	strlt	r7, [sp, #28]
 8009104:	1afa      	sublt	r2, r7, r3
 8009106:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009108:	bfbb      	ittet	lt
 800910a:	189b      	addlt	r3, r3, r2
 800910c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800910e:	1bdf      	subge	r7, r3, r7
 8009110:	2700      	movlt	r7, #0
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	bfb5      	itete	lt
 8009118:	9b05      	ldrlt	r3, [sp, #20]
 800911a:	9d05      	ldrge	r5, [sp, #20]
 800911c:	eba3 0509 	sublt.w	r5, r3, r9
 8009120:	464b      	movge	r3, r9
 8009122:	bfb8      	it	lt
 8009124:	2300      	movlt	r3, #0
 8009126:	e77e      	b.n	8009026 <_dtoa_r+0x6fe>
 8009128:	9f07      	ldr	r7, [sp, #28]
 800912a:	9d05      	ldr	r5, [sp, #20]
 800912c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800912e:	e783      	b.n	8009038 <_dtoa_r+0x710>
 8009130:	9a07      	ldr	r2, [sp, #28]
 8009132:	e7ab      	b.n	800908c <_dtoa_r+0x764>
 8009134:	2300      	movs	r3, #0
 8009136:	e7d4      	b.n	80090e2 <_dtoa_r+0x7ba>
 8009138:	9b00      	ldr	r3, [sp, #0]
 800913a:	e7d2      	b.n	80090e2 <_dtoa_r+0x7ba>
 800913c:	2300      	movs	r3, #0
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009146:	6918      	ldr	r0, [r3, #16]
 8009148:	f000 fb06 	bl	8009758 <__hi0bits>
 800914c:	f1c0 0020 	rsb	r0, r0, #32
 8009150:	4440      	add	r0, r8
 8009152:	f010 001f 	ands.w	r0, r0, #31
 8009156:	d047      	beq.n	80091e8 <_dtoa_r+0x8c0>
 8009158:	f1c0 0320 	rsb	r3, r0, #32
 800915c:	2b04      	cmp	r3, #4
 800915e:	dd3b      	ble.n	80091d8 <_dtoa_r+0x8b0>
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	f1c0 001c 	rsb	r0, r0, #28
 8009166:	4403      	add	r3, r0
 8009168:	9305      	str	r3, [sp, #20]
 800916a:	4405      	add	r5, r0
 800916c:	4480      	add	r8, r0
 800916e:	9b05      	ldr	r3, [sp, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	dd05      	ble.n	8009180 <_dtoa_r+0x858>
 8009174:	461a      	mov	r2, r3
 8009176:	9904      	ldr	r1, [sp, #16]
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fc29 	bl	80099d0 <__lshift>
 800917e:	9004      	str	r0, [sp, #16]
 8009180:	f1b8 0f00 	cmp.w	r8, #0
 8009184:	dd05      	ble.n	8009192 <_dtoa_r+0x86a>
 8009186:	4639      	mov	r1, r7
 8009188:	4642      	mov	r2, r8
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fc20 	bl	80099d0 <__lshift>
 8009190:	4607      	mov	r7, r0
 8009192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009194:	b353      	cbz	r3, 80091ec <_dtoa_r+0x8c4>
 8009196:	4639      	mov	r1, r7
 8009198:	9804      	ldr	r0, [sp, #16]
 800919a:	f000 fc6d 	bl	8009a78 <__mcmp>
 800919e:	2800      	cmp	r0, #0
 80091a0:	da24      	bge.n	80091ec <_dtoa_r+0x8c4>
 80091a2:	2300      	movs	r3, #0
 80091a4:	220a      	movs	r2, #10
 80091a6:	9904      	ldr	r1, [sp, #16]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fa9a 	bl	80096e2 <__multadd>
 80091ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b0:	9004      	str	r0, [sp, #16]
 80091b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 814d 	beq.w	8009456 <_dtoa_r+0xb2e>
 80091bc:	2300      	movs	r3, #0
 80091be:	4631      	mov	r1, r6
 80091c0:	220a      	movs	r2, #10
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fa8d 	bl	80096e2 <__multadd>
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	4606      	mov	r6, r0
 80091ce:	dc4f      	bgt.n	8009270 <_dtoa_r+0x948>
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	dd4c      	ble.n	8009270 <_dtoa_r+0x948>
 80091d6:	e011      	b.n	80091fc <_dtoa_r+0x8d4>
 80091d8:	d0c9      	beq.n	800916e <_dtoa_r+0x846>
 80091da:	9a05      	ldr	r2, [sp, #20]
 80091dc:	331c      	adds	r3, #28
 80091de:	441a      	add	r2, r3
 80091e0:	9205      	str	r2, [sp, #20]
 80091e2:	441d      	add	r5, r3
 80091e4:	4498      	add	r8, r3
 80091e6:	e7c2      	b.n	800916e <_dtoa_r+0x846>
 80091e8:	4603      	mov	r3, r0
 80091ea:	e7f6      	b.n	80091da <_dtoa_r+0x8b2>
 80091ec:	f1b9 0f00 	cmp.w	r9, #0
 80091f0:	dc38      	bgt.n	8009264 <_dtoa_r+0x93c>
 80091f2:	9b06      	ldr	r3, [sp, #24]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	dd35      	ble.n	8009264 <_dtoa_r+0x93c>
 80091f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	b963      	cbnz	r3, 800921a <_dtoa_r+0x8f2>
 8009200:	4639      	mov	r1, r7
 8009202:	2205      	movs	r2, #5
 8009204:	4620      	mov	r0, r4
 8009206:	f000 fa6c 	bl	80096e2 <__multadd>
 800920a:	4601      	mov	r1, r0
 800920c:	4607      	mov	r7, r0
 800920e:	9804      	ldr	r0, [sp, #16]
 8009210:	f000 fc32 	bl	8009a78 <__mcmp>
 8009214:	2800      	cmp	r0, #0
 8009216:	f73f adcc 	bgt.w	8008db2 <_dtoa_r+0x48a>
 800921a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800921c:	465d      	mov	r5, fp
 800921e:	ea6f 0a03 	mvn.w	sl, r3
 8009222:	f04f 0900 	mov.w	r9, #0
 8009226:	4639      	mov	r1, r7
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fa43 	bl	80096b4 <_Bfree>
 800922e:	2e00      	cmp	r6, #0
 8009230:	f43f aeb7 	beq.w	8008fa2 <_dtoa_r+0x67a>
 8009234:	f1b9 0f00 	cmp.w	r9, #0
 8009238:	d005      	beq.n	8009246 <_dtoa_r+0x91e>
 800923a:	45b1      	cmp	r9, r6
 800923c:	d003      	beq.n	8009246 <_dtoa_r+0x91e>
 800923e:	4649      	mov	r1, r9
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fa37 	bl	80096b4 <_Bfree>
 8009246:	4631      	mov	r1, r6
 8009248:	4620      	mov	r0, r4
 800924a:	f000 fa33 	bl	80096b4 <_Bfree>
 800924e:	e6a8      	b.n	8008fa2 <_dtoa_r+0x67a>
 8009250:	2700      	movs	r7, #0
 8009252:	463e      	mov	r6, r7
 8009254:	e7e1      	b.n	800921a <_dtoa_r+0x8f2>
 8009256:	f8dd a020 	ldr.w	sl, [sp, #32]
 800925a:	463e      	mov	r6, r7
 800925c:	e5a9      	b.n	8008db2 <_dtoa_r+0x48a>
 800925e:	bf00      	nop
 8009260:	40240000 	.word	0x40240000
 8009264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009266:	f8cd 9008 	str.w	r9, [sp, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 80fa 	beq.w	8009464 <_dtoa_r+0xb3c>
 8009270:	2d00      	cmp	r5, #0
 8009272:	dd05      	ble.n	8009280 <_dtoa_r+0x958>
 8009274:	4631      	mov	r1, r6
 8009276:	462a      	mov	r2, r5
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fba9 	bl	80099d0 <__lshift>
 800927e:	4606      	mov	r6, r0
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d04c      	beq.n	8009320 <_dtoa_r+0x9f8>
 8009286:	6871      	ldr	r1, [r6, #4]
 8009288:	4620      	mov	r0, r4
 800928a:	f000 f9df 	bl	800964c <_Balloc>
 800928e:	6932      	ldr	r2, [r6, #16]
 8009290:	3202      	adds	r2, #2
 8009292:	4605      	mov	r5, r0
 8009294:	0092      	lsls	r2, r2, #2
 8009296:	f106 010c 	add.w	r1, r6, #12
 800929a:	300c      	adds	r0, #12
 800929c:	f7fe fd58 	bl	8007d50 <memcpy>
 80092a0:	2201      	movs	r2, #1
 80092a2:	4629      	mov	r1, r5
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fb93 	bl	80099d0 <__lshift>
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	f8cd b014 	str.w	fp, [sp, #20]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	46b1      	mov	r9, r6
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	4606      	mov	r6, r0
 80092ba:	4639      	mov	r1, r7
 80092bc:	9804      	ldr	r0, [sp, #16]
 80092be:	f7ff faa7 	bl	8008810 <quorem>
 80092c2:	4649      	mov	r1, r9
 80092c4:	4605      	mov	r5, r0
 80092c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80092ca:	9804      	ldr	r0, [sp, #16]
 80092cc:	f000 fbd4 	bl	8009a78 <__mcmp>
 80092d0:	4632      	mov	r2, r6
 80092d2:	9000      	str	r0, [sp, #0]
 80092d4:	4639      	mov	r1, r7
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 fbe8 	bl	8009aac <__mdiff>
 80092dc:	68c3      	ldr	r3, [r0, #12]
 80092de:	4602      	mov	r2, r0
 80092e0:	bb03      	cbnz	r3, 8009324 <_dtoa_r+0x9fc>
 80092e2:	4601      	mov	r1, r0
 80092e4:	9008      	str	r0, [sp, #32]
 80092e6:	9804      	ldr	r0, [sp, #16]
 80092e8:	f000 fbc6 	bl	8009a78 <__mcmp>
 80092ec:	9a08      	ldr	r2, [sp, #32]
 80092ee:	4603      	mov	r3, r0
 80092f0:	4611      	mov	r1, r2
 80092f2:	4620      	mov	r0, r4
 80092f4:	9308      	str	r3, [sp, #32]
 80092f6:	f000 f9dd 	bl	80096b4 <_Bfree>
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	b9a3      	cbnz	r3, 8009328 <_dtoa_r+0xa00>
 80092fe:	9a06      	ldr	r2, [sp, #24]
 8009300:	b992      	cbnz	r2, 8009328 <_dtoa_r+0xa00>
 8009302:	9a07      	ldr	r2, [sp, #28]
 8009304:	b982      	cbnz	r2, 8009328 <_dtoa_r+0xa00>
 8009306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800930a:	d029      	beq.n	8009360 <_dtoa_r+0xa38>
 800930c:	9b00      	ldr	r3, [sp, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dd01      	ble.n	8009316 <_dtoa_r+0x9ee>
 8009312:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009316:	9b05      	ldr	r3, [sp, #20]
 8009318:	1c5d      	adds	r5, r3, #1
 800931a:	f883 8000 	strb.w	r8, [r3]
 800931e:	e782      	b.n	8009226 <_dtoa_r+0x8fe>
 8009320:	4630      	mov	r0, r6
 8009322:	e7c2      	b.n	80092aa <_dtoa_r+0x982>
 8009324:	2301      	movs	r3, #1
 8009326:	e7e3      	b.n	80092f0 <_dtoa_r+0x9c8>
 8009328:	9a00      	ldr	r2, [sp, #0]
 800932a:	2a00      	cmp	r2, #0
 800932c:	db04      	blt.n	8009338 <_dtoa_r+0xa10>
 800932e:	d125      	bne.n	800937c <_dtoa_r+0xa54>
 8009330:	9a06      	ldr	r2, [sp, #24]
 8009332:	bb1a      	cbnz	r2, 800937c <_dtoa_r+0xa54>
 8009334:	9a07      	ldr	r2, [sp, #28]
 8009336:	bb0a      	cbnz	r2, 800937c <_dtoa_r+0xa54>
 8009338:	2b00      	cmp	r3, #0
 800933a:	ddec      	ble.n	8009316 <_dtoa_r+0x9ee>
 800933c:	2201      	movs	r2, #1
 800933e:	9904      	ldr	r1, [sp, #16]
 8009340:	4620      	mov	r0, r4
 8009342:	f000 fb45 	bl	80099d0 <__lshift>
 8009346:	4639      	mov	r1, r7
 8009348:	9004      	str	r0, [sp, #16]
 800934a:	f000 fb95 	bl	8009a78 <__mcmp>
 800934e:	2800      	cmp	r0, #0
 8009350:	dc03      	bgt.n	800935a <_dtoa_r+0xa32>
 8009352:	d1e0      	bne.n	8009316 <_dtoa_r+0x9ee>
 8009354:	f018 0f01 	tst.w	r8, #1
 8009358:	d0dd      	beq.n	8009316 <_dtoa_r+0x9ee>
 800935a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800935e:	d1d8      	bne.n	8009312 <_dtoa_r+0x9ea>
 8009360:	9b05      	ldr	r3, [sp, #20]
 8009362:	9a05      	ldr	r2, [sp, #20]
 8009364:	1c5d      	adds	r5, r3, #1
 8009366:	2339      	movs	r3, #57	; 0x39
 8009368:	7013      	strb	r3, [r2, #0]
 800936a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800936e:	2b39      	cmp	r3, #57	; 0x39
 8009370:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009374:	d04f      	beq.n	8009416 <_dtoa_r+0xaee>
 8009376:	3301      	adds	r3, #1
 8009378:	7013      	strb	r3, [r2, #0]
 800937a:	e754      	b.n	8009226 <_dtoa_r+0x8fe>
 800937c:	9a05      	ldr	r2, [sp, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f102 0501 	add.w	r5, r2, #1
 8009384:	dd06      	ble.n	8009394 <_dtoa_r+0xa6c>
 8009386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800938a:	d0e9      	beq.n	8009360 <_dtoa_r+0xa38>
 800938c:	f108 0801 	add.w	r8, r8, #1
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	e7c2      	b.n	800931a <_dtoa_r+0x9f2>
 8009394:	9a02      	ldr	r2, [sp, #8]
 8009396:	f805 8c01 	strb.w	r8, [r5, #-1]
 800939a:	eba5 030b 	sub.w	r3, r5, fp
 800939e:	4293      	cmp	r3, r2
 80093a0:	d021      	beq.n	80093e6 <_dtoa_r+0xabe>
 80093a2:	2300      	movs	r3, #0
 80093a4:	220a      	movs	r2, #10
 80093a6:	9904      	ldr	r1, [sp, #16]
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 f99a 	bl	80096e2 <__multadd>
 80093ae:	45b1      	cmp	r9, r6
 80093b0:	9004      	str	r0, [sp, #16]
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	f04f 020a 	mov.w	r2, #10
 80093ba:	4649      	mov	r1, r9
 80093bc:	4620      	mov	r0, r4
 80093be:	d105      	bne.n	80093cc <_dtoa_r+0xaa4>
 80093c0:	f000 f98f 	bl	80096e2 <__multadd>
 80093c4:	4681      	mov	r9, r0
 80093c6:	4606      	mov	r6, r0
 80093c8:	9505      	str	r5, [sp, #20]
 80093ca:	e776      	b.n	80092ba <_dtoa_r+0x992>
 80093cc:	f000 f989 	bl	80096e2 <__multadd>
 80093d0:	4631      	mov	r1, r6
 80093d2:	4681      	mov	r9, r0
 80093d4:	2300      	movs	r3, #0
 80093d6:	220a      	movs	r2, #10
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 f982 	bl	80096e2 <__multadd>
 80093de:	4606      	mov	r6, r0
 80093e0:	e7f2      	b.n	80093c8 <_dtoa_r+0xaa0>
 80093e2:	f04f 0900 	mov.w	r9, #0
 80093e6:	2201      	movs	r2, #1
 80093e8:	9904      	ldr	r1, [sp, #16]
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 faf0 	bl	80099d0 <__lshift>
 80093f0:	4639      	mov	r1, r7
 80093f2:	9004      	str	r0, [sp, #16]
 80093f4:	f000 fb40 	bl	8009a78 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dcb6      	bgt.n	800936a <_dtoa_r+0xa42>
 80093fc:	d102      	bne.n	8009404 <_dtoa_r+0xadc>
 80093fe:	f018 0f01 	tst.w	r8, #1
 8009402:	d1b2      	bne.n	800936a <_dtoa_r+0xa42>
 8009404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009408:	2b30      	cmp	r3, #48	; 0x30
 800940a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800940e:	f47f af0a 	bne.w	8009226 <_dtoa_r+0x8fe>
 8009412:	4615      	mov	r5, r2
 8009414:	e7f6      	b.n	8009404 <_dtoa_r+0xadc>
 8009416:	4593      	cmp	fp, r2
 8009418:	d105      	bne.n	8009426 <_dtoa_r+0xafe>
 800941a:	2331      	movs	r3, #49	; 0x31
 800941c:	f10a 0a01 	add.w	sl, sl, #1
 8009420:	f88b 3000 	strb.w	r3, [fp]
 8009424:	e6ff      	b.n	8009226 <_dtoa_r+0x8fe>
 8009426:	4615      	mov	r5, r2
 8009428:	e79f      	b.n	800936a <_dtoa_r+0xa42>
 800942a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009490 <_dtoa_r+0xb68>
 800942e:	e007      	b.n	8009440 <_dtoa_r+0xb18>
 8009430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009432:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009494 <_dtoa_r+0xb6c>
 8009436:	b11b      	cbz	r3, 8009440 <_dtoa_r+0xb18>
 8009438:	f10b 0308 	add.w	r3, fp, #8
 800943c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	4658      	mov	r0, fp
 8009442:	b017      	add	sp, #92	; 0x5c
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009448:	9b06      	ldr	r3, [sp, #24]
 800944a:	2b01      	cmp	r3, #1
 800944c:	f77f ae35 	ble.w	80090ba <_dtoa_r+0x792>
 8009450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009452:	9307      	str	r3, [sp, #28]
 8009454:	e649      	b.n	80090ea <_dtoa_r+0x7c2>
 8009456:	9b02      	ldr	r3, [sp, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	dc03      	bgt.n	8009464 <_dtoa_r+0xb3c>
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	2b02      	cmp	r3, #2
 8009460:	f73f aecc 	bgt.w	80091fc <_dtoa_r+0x8d4>
 8009464:	465d      	mov	r5, fp
 8009466:	4639      	mov	r1, r7
 8009468:	9804      	ldr	r0, [sp, #16]
 800946a:	f7ff f9d1 	bl	8008810 <quorem>
 800946e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009472:	f805 8b01 	strb.w	r8, [r5], #1
 8009476:	9a02      	ldr	r2, [sp, #8]
 8009478:	eba5 030b 	sub.w	r3, r5, fp
 800947c:	429a      	cmp	r2, r3
 800947e:	ddb0      	ble.n	80093e2 <_dtoa_r+0xaba>
 8009480:	2300      	movs	r3, #0
 8009482:	220a      	movs	r2, #10
 8009484:	9904      	ldr	r1, [sp, #16]
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f92b 	bl	80096e2 <__multadd>
 800948c:	9004      	str	r0, [sp, #16]
 800948e:	e7ea      	b.n	8009466 <_dtoa_r+0xb3e>
 8009490:	080663d4 	.word	0x080663d4
 8009494:	080663f8 	.word	0x080663f8

08009498 <std>:
 8009498:	2300      	movs	r3, #0
 800949a:	b510      	push	{r4, lr}
 800949c:	4604      	mov	r4, r0
 800949e:	e9c0 3300 	strd	r3, r3, [r0]
 80094a2:	6083      	str	r3, [r0, #8]
 80094a4:	8181      	strh	r1, [r0, #12]
 80094a6:	6643      	str	r3, [r0, #100]	; 0x64
 80094a8:	81c2      	strh	r2, [r0, #14]
 80094aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ae:	6183      	str	r3, [r0, #24]
 80094b0:	4619      	mov	r1, r3
 80094b2:	2208      	movs	r2, #8
 80094b4:	305c      	adds	r0, #92	; 0x5c
 80094b6:	f7fe fc56 	bl	8007d66 <memset>
 80094ba:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <std+0x38>)
 80094bc:	6263      	str	r3, [r4, #36]	; 0x24
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <std+0x3c>)
 80094c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <std+0x40>)
 80094c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <std+0x44>)
 80094c8:	6224      	str	r4, [r4, #32]
 80094ca:	6323      	str	r3, [r4, #48]	; 0x30
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	bf00      	nop
 80094d0:	0800a191 	.word	0x0800a191
 80094d4:	0800a1b3 	.word	0x0800a1b3
 80094d8:	0800a1eb 	.word	0x0800a1eb
 80094dc:	0800a20f 	.word	0x0800a20f

080094e0 <_cleanup_r>:
 80094e0:	4901      	ldr	r1, [pc, #4]	; (80094e8 <_cleanup_r+0x8>)
 80094e2:	f000 b885 	b.w	80095f0 <_fwalk_reent>
 80094e6:	bf00      	nop
 80094e8:	0800a4e9 	.word	0x0800a4e9

080094ec <__sfmoreglue>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	1e4a      	subs	r2, r1, #1
 80094f0:	2568      	movs	r5, #104	; 0x68
 80094f2:	4355      	muls	r5, r2
 80094f4:	460e      	mov	r6, r1
 80094f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094fa:	f7fe fc8b 	bl	8007e14 <_malloc_r>
 80094fe:	4604      	mov	r4, r0
 8009500:	b140      	cbz	r0, 8009514 <__sfmoreglue+0x28>
 8009502:	2100      	movs	r1, #0
 8009504:	e9c0 1600 	strd	r1, r6, [r0]
 8009508:	300c      	adds	r0, #12
 800950a:	60a0      	str	r0, [r4, #8]
 800950c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009510:	f7fe fc29 	bl	8007d66 <memset>
 8009514:	4620      	mov	r0, r4
 8009516:	bd70      	pop	{r4, r5, r6, pc}

08009518 <__sinit>:
 8009518:	6983      	ldr	r3, [r0, #24]
 800951a:	b510      	push	{r4, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	bb33      	cbnz	r3, 800956e <__sinit+0x56>
 8009520:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009524:	6503      	str	r3, [r0, #80]	; 0x50
 8009526:	4b12      	ldr	r3, [pc, #72]	; (8009570 <__sinit+0x58>)
 8009528:	4a12      	ldr	r2, [pc, #72]	; (8009574 <__sinit+0x5c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6282      	str	r2, [r0, #40]	; 0x28
 800952e:	4298      	cmp	r0, r3
 8009530:	bf04      	itt	eq
 8009532:	2301      	moveq	r3, #1
 8009534:	6183      	streq	r3, [r0, #24]
 8009536:	f000 f81f 	bl	8009578 <__sfp>
 800953a:	6060      	str	r0, [r4, #4]
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f81b 	bl	8009578 <__sfp>
 8009542:	60a0      	str	r0, [r4, #8]
 8009544:	4620      	mov	r0, r4
 8009546:	f000 f817 	bl	8009578 <__sfp>
 800954a:	2200      	movs	r2, #0
 800954c:	60e0      	str	r0, [r4, #12]
 800954e:	2104      	movs	r1, #4
 8009550:	6860      	ldr	r0, [r4, #4]
 8009552:	f7ff ffa1 	bl	8009498 <std>
 8009556:	2201      	movs	r2, #1
 8009558:	2109      	movs	r1, #9
 800955a:	68a0      	ldr	r0, [r4, #8]
 800955c:	f7ff ff9c 	bl	8009498 <std>
 8009560:	2202      	movs	r2, #2
 8009562:	2112      	movs	r1, #18
 8009564:	68e0      	ldr	r0, [r4, #12]
 8009566:	f7ff ff97 	bl	8009498 <std>
 800956a:	2301      	movs	r3, #1
 800956c:	61a3      	str	r3, [r4, #24]
 800956e:	bd10      	pop	{r4, pc}
 8009570:	080663c0 	.word	0x080663c0
 8009574:	080094e1 	.word	0x080094e1

08009578 <__sfp>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	4b1b      	ldr	r3, [pc, #108]	; (80095e8 <__sfp+0x70>)
 800957c:	681e      	ldr	r6, [r3, #0]
 800957e:	69b3      	ldr	r3, [r6, #24]
 8009580:	4607      	mov	r7, r0
 8009582:	b913      	cbnz	r3, 800958a <__sfp+0x12>
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff ffc7 	bl	8009518 <__sinit>
 800958a:	3648      	adds	r6, #72	; 0x48
 800958c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009590:	3b01      	subs	r3, #1
 8009592:	d503      	bpl.n	800959c <__sfp+0x24>
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	b133      	cbz	r3, 80095a6 <__sfp+0x2e>
 8009598:	6836      	ldr	r6, [r6, #0]
 800959a:	e7f7      	b.n	800958c <__sfp+0x14>
 800959c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095a0:	b16d      	cbz	r5, 80095be <__sfp+0x46>
 80095a2:	3468      	adds	r4, #104	; 0x68
 80095a4:	e7f4      	b.n	8009590 <__sfp+0x18>
 80095a6:	2104      	movs	r1, #4
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff ff9f 	bl	80094ec <__sfmoreglue>
 80095ae:	6030      	str	r0, [r6, #0]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d1f1      	bne.n	8009598 <__sfp+0x20>
 80095b4:	230c      	movs	r3, #12
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	4604      	mov	r4, r0
 80095ba:	4620      	mov	r0, r4
 80095bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095be:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <__sfp+0x74>)
 80095c0:	6665      	str	r5, [r4, #100]	; 0x64
 80095c2:	e9c4 5500 	strd	r5, r5, [r4]
 80095c6:	60a5      	str	r5, [r4, #8]
 80095c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80095cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80095d0:	2208      	movs	r2, #8
 80095d2:	4629      	mov	r1, r5
 80095d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095d8:	f7fe fbc5 	bl	8007d66 <memset>
 80095dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095e4:	e7e9      	b.n	80095ba <__sfp+0x42>
 80095e6:	bf00      	nop
 80095e8:	080663c0 	.word	0x080663c0
 80095ec:	ffff0001 	.word	0xffff0001

080095f0 <_fwalk_reent>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4680      	mov	r8, r0
 80095f6:	4689      	mov	r9, r1
 80095f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095fc:	2600      	movs	r6, #0
 80095fe:	b914      	cbnz	r4, 8009606 <_fwalk_reent+0x16>
 8009600:	4630      	mov	r0, r6
 8009602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009606:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800960a:	3f01      	subs	r7, #1
 800960c:	d501      	bpl.n	8009612 <_fwalk_reent+0x22>
 800960e:	6824      	ldr	r4, [r4, #0]
 8009610:	e7f5      	b.n	80095fe <_fwalk_reent+0xe>
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d907      	bls.n	8009628 <_fwalk_reent+0x38>
 8009618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800961c:	3301      	adds	r3, #1
 800961e:	d003      	beq.n	8009628 <_fwalk_reent+0x38>
 8009620:	4629      	mov	r1, r5
 8009622:	4640      	mov	r0, r8
 8009624:	47c8      	blx	r9
 8009626:	4306      	orrs	r6, r0
 8009628:	3568      	adds	r5, #104	; 0x68
 800962a:	e7ee      	b.n	800960a <_fwalk_reent+0x1a>

0800962c <_localeconv_r>:
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <_localeconv_r+0x14>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a18      	ldr	r0, [r3, #32]
 8009632:	4b04      	ldr	r3, [pc, #16]	; (8009644 <_localeconv_r+0x18>)
 8009634:	2800      	cmp	r0, #0
 8009636:	bf08      	it	eq
 8009638:	4618      	moveq	r0, r3
 800963a:	30f0      	adds	r0, #240	; 0xf0
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20000894 	.word	0x20000894
 8009644:	200008f8 	.word	0x200008f8

08009648 <__malloc_lock>:
 8009648:	4770      	bx	lr

0800964a <__malloc_unlock>:
 800964a:	4770      	bx	lr

0800964c <_Balloc>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009650:	4604      	mov	r4, r0
 8009652:	460e      	mov	r6, r1
 8009654:	b93d      	cbnz	r5, 8009666 <_Balloc+0x1a>
 8009656:	2010      	movs	r0, #16
 8009658:	f7fe fb72 	bl	8007d40 <malloc>
 800965c:	6260      	str	r0, [r4, #36]	; 0x24
 800965e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009662:	6005      	str	r5, [r0, #0]
 8009664:	60c5      	str	r5, [r0, #12]
 8009666:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009668:	68eb      	ldr	r3, [r5, #12]
 800966a:	b183      	cbz	r3, 800968e <_Balloc+0x42>
 800966c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009674:	b9b8      	cbnz	r0, 80096a6 <_Balloc+0x5a>
 8009676:	2101      	movs	r1, #1
 8009678:	fa01 f506 	lsl.w	r5, r1, r6
 800967c:	1d6a      	adds	r2, r5, #5
 800967e:	0092      	lsls	r2, r2, #2
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fabf 	bl	8009c04 <_calloc_r>
 8009686:	b160      	cbz	r0, 80096a2 <_Balloc+0x56>
 8009688:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800968c:	e00e      	b.n	80096ac <_Balloc+0x60>
 800968e:	2221      	movs	r2, #33	; 0x21
 8009690:	2104      	movs	r1, #4
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fab6 	bl	8009c04 <_calloc_r>
 8009698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800969a:	60e8      	str	r0, [r5, #12]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e4      	bne.n	800966c <_Balloc+0x20>
 80096a2:	2000      	movs	r0, #0
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	6802      	ldr	r2, [r0, #0]
 80096a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096ac:	2300      	movs	r3, #0
 80096ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096b2:	e7f7      	b.n	80096a4 <_Balloc+0x58>

080096b4 <_Bfree>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096b8:	4606      	mov	r6, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	b93c      	cbnz	r4, 80096ce <_Bfree+0x1a>
 80096be:	2010      	movs	r0, #16
 80096c0:	f7fe fb3e 	bl	8007d40 <malloc>
 80096c4:	6270      	str	r0, [r6, #36]	; 0x24
 80096c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096ca:	6004      	str	r4, [r0, #0]
 80096cc:	60c4      	str	r4, [r0, #12]
 80096ce:	b13d      	cbz	r5, 80096e0 <_Bfree+0x2c>
 80096d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096d2:	686a      	ldr	r2, [r5, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096da:	6029      	str	r1, [r5, #0]
 80096dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80096e0:	bd70      	pop	{r4, r5, r6, pc}

080096e2 <__multadd>:
 80096e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	690d      	ldr	r5, [r1, #16]
 80096e8:	461f      	mov	r7, r3
 80096ea:	4606      	mov	r6, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	f101 0c14 	add.w	ip, r1, #20
 80096f2:	2300      	movs	r3, #0
 80096f4:	f8dc 0000 	ldr.w	r0, [ip]
 80096f8:	b281      	uxth	r1, r0
 80096fa:	fb02 7101 	mla	r1, r2, r1, r7
 80096fe:	0c0f      	lsrs	r7, r1, #16
 8009700:	0c00      	lsrs	r0, r0, #16
 8009702:	fb02 7000 	mla	r0, r2, r0, r7
 8009706:	b289      	uxth	r1, r1
 8009708:	3301      	adds	r3, #1
 800970a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800970e:	429d      	cmp	r5, r3
 8009710:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009714:	f84c 1b04 	str.w	r1, [ip], #4
 8009718:	dcec      	bgt.n	80096f4 <__multadd+0x12>
 800971a:	b1d7      	cbz	r7, 8009752 <__multadd+0x70>
 800971c:	68a3      	ldr	r3, [r4, #8]
 800971e:	42ab      	cmp	r3, r5
 8009720:	dc12      	bgt.n	8009748 <__multadd+0x66>
 8009722:	6861      	ldr	r1, [r4, #4]
 8009724:	4630      	mov	r0, r6
 8009726:	3101      	adds	r1, #1
 8009728:	f7ff ff90 	bl	800964c <_Balloc>
 800972c:	6922      	ldr	r2, [r4, #16]
 800972e:	3202      	adds	r2, #2
 8009730:	f104 010c 	add.w	r1, r4, #12
 8009734:	4680      	mov	r8, r0
 8009736:	0092      	lsls	r2, r2, #2
 8009738:	300c      	adds	r0, #12
 800973a:	f7fe fb09 	bl	8007d50 <memcpy>
 800973e:	4621      	mov	r1, r4
 8009740:	4630      	mov	r0, r6
 8009742:	f7ff ffb7 	bl	80096b4 <_Bfree>
 8009746:	4644      	mov	r4, r8
 8009748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800974c:	3501      	adds	r5, #1
 800974e:	615f      	str	r7, [r3, #20]
 8009750:	6125      	str	r5, [r4, #16]
 8009752:	4620      	mov	r0, r4
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009758 <__hi0bits>:
 8009758:	0c02      	lsrs	r2, r0, #16
 800975a:	0412      	lsls	r2, r2, #16
 800975c:	4603      	mov	r3, r0
 800975e:	b9b2      	cbnz	r2, 800978e <__hi0bits+0x36>
 8009760:	0403      	lsls	r3, r0, #16
 8009762:	2010      	movs	r0, #16
 8009764:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009768:	bf04      	itt	eq
 800976a:	021b      	lsleq	r3, r3, #8
 800976c:	3008      	addeq	r0, #8
 800976e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009772:	bf04      	itt	eq
 8009774:	011b      	lsleq	r3, r3, #4
 8009776:	3004      	addeq	r0, #4
 8009778:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800977c:	bf04      	itt	eq
 800977e:	009b      	lsleq	r3, r3, #2
 8009780:	3002      	addeq	r0, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	db06      	blt.n	8009794 <__hi0bits+0x3c>
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	d503      	bpl.n	8009792 <__hi0bits+0x3a>
 800978a:	3001      	adds	r0, #1
 800978c:	4770      	bx	lr
 800978e:	2000      	movs	r0, #0
 8009790:	e7e8      	b.n	8009764 <__hi0bits+0xc>
 8009792:	2020      	movs	r0, #32
 8009794:	4770      	bx	lr

08009796 <__lo0bits>:
 8009796:	6803      	ldr	r3, [r0, #0]
 8009798:	f013 0207 	ands.w	r2, r3, #7
 800979c:	4601      	mov	r1, r0
 800979e:	d00b      	beq.n	80097b8 <__lo0bits+0x22>
 80097a0:	07da      	lsls	r2, r3, #31
 80097a2:	d423      	bmi.n	80097ec <__lo0bits+0x56>
 80097a4:	0798      	lsls	r0, r3, #30
 80097a6:	bf49      	itett	mi
 80097a8:	085b      	lsrmi	r3, r3, #1
 80097aa:	089b      	lsrpl	r3, r3, #2
 80097ac:	2001      	movmi	r0, #1
 80097ae:	600b      	strmi	r3, [r1, #0]
 80097b0:	bf5c      	itt	pl
 80097b2:	600b      	strpl	r3, [r1, #0]
 80097b4:	2002      	movpl	r0, #2
 80097b6:	4770      	bx	lr
 80097b8:	b298      	uxth	r0, r3
 80097ba:	b9a8      	cbnz	r0, 80097e8 <__lo0bits+0x52>
 80097bc:	0c1b      	lsrs	r3, r3, #16
 80097be:	2010      	movs	r0, #16
 80097c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097c4:	bf04      	itt	eq
 80097c6:	0a1b      	lsreq	r3, r3, #8
 80097c8:	3008      	addeq	r0, #8
 80097ca:	071a      	lsls	r2, r3, #28
 80097cc:	bf04      	itt	eq
 80097ce:	091b      	lsreq	r3, r3, #4
 80097d0:	3004      	addeq	r0, #4
 80097d2:	079a      	lsls	r2, r3, #30
 80097d4:	bf04      	itt	eq
 80097d6:	089b      	lsreq	r3, r3, #2
 80097d8:	3002      	addeq	r0, #2
 80097da:	07da      	lsls	r2, r3, #31
 80097dc:	d402      	bmi.n	80097e4 <__lo0bits+0x4e>
 80097de:	085b      	lsrs	r3, r3, #1
 80097e0:	d006      	beq.n	80097f0 <__lo0bits+0x5a>
 80097e2:	3001      	adds	r0, #1
 80097e4:	600b      	str	r3, [r1, #0]
 80097e6:	4770      	bx	lr
 80097e8:	4610      	mov	r0, r2
 80097ea:	e7e9      	b.n	80097c0 <__lo0bits+0x2a>
 80097ec:	2000      	movs	r0, #0
 80097ee:	4770      	bx	lr
 80097f0:	2020      	movs	r0, #32
 80097f2:	4770      	bx	lr

080097f4 <__i2b>:
 80097f4:	b510      	push	{r4, lr}
 80097f6:	460c      	mov	r4, r1
 80097f8:	2101      	movs	r1, #1
 80097fa:	f7ff ff27 	bl	800964c <_Balloc>
 80097fe:	2201      	movs	r2, #1
 8009800:	6144      	str	r4, [r0, #20]
 8009802:	6102      	str	r2, [r0, #16]
 8009804:	bd10      	pop	{r4, pc}

08009806 <__multiply>:
 8009806:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980a:	4614      	mov	r4, r2
 800980c:	690a      	ldr	r2, [r1, #16]
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	429a      	cmp	r2, r3
 8009812:	bfb8      	it	lt
 8009814:	460b      	movlt	r3, r1
 8009816:	4688      	mov	r8, r1
 8009818:	bfbc      	itt	lt
 800981a:	46a0      	movlt	r8, r4
 800981c:	461c      	movlt	r4, r3
 800981e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009822:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009826:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800982a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800982e:	eb07 0609 	add.w	r6, r7, r9
 8009832:	42b3      	cmp	r3, r6
 8009834:	bfb8      	it	lt
 8009836:	3101      	addlt	r1, #1
 8009838:	f7ff ff08 	bl	800964c <_Balloc>
 800983c:	f100 0514 	add.w	r5, r0, #20
 8009840:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009844:	462b      	mov	r3, r5
 8009846:	2200      	movs	r2, #0
 8009848:	4573      	cmp	r3, lr
 800984a:	d316      	bcc.n	800987a <__multiply+0x74>
 800984c:	f104 0214 	add.w	r2, r4, #20
 8009850:	f108 0114 	add.w	r1, r8, #20
 8009854:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009858:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	9b00      	ldr	r3, [sp, #0]
 8009860:	9201      	str	r2, [sp, #4]
 8009862:	4293      	cmp	r3, r2
 8009864:	d80c      	bhi.n	8009880 <__multiply+0x7a>
 8009866:	2e00      	cmp	r6, #0
 8009868:	dd03      	ble.n	8009872 <__multiply+0x6c>
 800986a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800986e:	2b00      	cmp	r3, #0
 8009870:	d05d      	beq.n	800992e <__multiply+0x128>
 8009872:	6106      	str	r6, [r0, #16]
 8009874:	b003      	add	sp, #12
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	f843 2b04 	str.w	r2, [r3], #4
 800987e:	e7e3      	b.n	8009848 <__multiply+0x42>
 8009880:	f8b2 b000 	ldrh.w	fp, [r2]
 8009884:	f1bb 0f00 	cmp.w	fp, #0
 8009888:	d023      	beq.n	80098d2 <__multiply+0xcc>
 800988a:	4689      	mov	r9, r1
 800988c:	46ac      	mov	ip, r5
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	f859 4b04 	ldr.w	r4, [r9], #4
 8009896:	f8dc a000 	ldr.w	sl, [ip]
 800989a:	b2a3      	uxth	r3, r4
 800989c:	fa1f fa8a 	uxth.w	sl, sl
 80098a0:	fb0b a303 	mla	r3, fp, r3, sl
 80098a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098a8:	f8dc 4000 	ldr.w	r4, [ip]
 80098ac:	4443      	add	r3, r8
 80098ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098b2:	fb0b 840a 	mla	r4, fp, sl, r8
 80098b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80098ba:	46e2      	mov	sl, ip
 80098bc:	b29b      	uxth	r3, r3
 80098be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098c2:	454f      	cmp	r7, r9
 80098c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098c8:	f84a 3b04 	str.w	r3, [sl], #4
 80098cc:	d82b      	bhi.n	8009926 <__multiply+0x120>
 80098ce:	f8cc 8004 	str.w	r8, [ip, #4]
 80098d2:	9b01      	ldr	r3, [sp, #4]
 80098d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80098d8:	3204      	adds	r2, #4
 80098da:	f1ba 0f00 	cmp.w	sl, #0
 80098de:	d020      	beq.n	8009922 <__multiply+0x11c>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	4689      	mov	r9, r1
 80098e4:	46a8      	mov	r8, r5
 80098e6:	f04f 0b00 	mov.w	fp, #0
 80098ea:	f8b9 c000 	ldrh.w	ip, [r9]
 80098ee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80098f2:	fb0a 440c 	mla	r4, sl, ip, r4
 80098f6:	445c      	add	r4, fp
 80098f8:	46c4      	mov	ip, r8
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009900:	f84c 3b04 	str.w	r3, [ip], #4
 8009904:	f859 3b04 	ldr.w	r3, [r9], #4
 8009908:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	fb0a b303 	mla	r3, sl, r3, fp
 8009912:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009916:	454f      	cmp	r7, r9
 8009918:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800991c:	d805      	bhi.n	800992a <__multiply+0x124>
 800991e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009922:	3504      	adds	r5, #4
 8009924:	e79b      	b.n	800985e <__multiply+0x58>
 8009926:	46d4      	mov	ip, sl
 8009928:	e7b3      	b.n	8009892 <__multiply+0x8c>
 800992a:	46e0      	mov	r8, ip
 800992c:	e7dd      	b.n	80098ea <__multiply+0xe4>
 800992e:	3e01      	subs	r6, #1
 8009930:	e799      	b.n	8009866 <__multiply+0x60>
	...

08009934 <__pow5mult>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4615      	mov	r5, r2
 800993a:	f012 0203 	ands.w	r2, r2, #3
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	d007      	beq.n	8009954 <__pow5mult+0x20>
 8009944:	3a01      	subs	r2, #1
 8009946:	4c21      	ldr	r4, [pc, #132]	; (80099cc <__pow5mult+0x98>)
 8009948:	2300      	movs	r3, #0
 800994a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800994e:	f7ff fec8 	bl	80096e2 <__multadd>
 8009952:	4607      	mov	r7, r0
 8009954:	10ad      	asrs	r5, r5, #2
 8009956:	d035      	beq.n	80099c4 <__pow5mult+0x90>
 8009958:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800995a:	b93c      	cbnz	r4, 800996c <__pow5mult+0x38>
 800995c:	2010      	movs	r0, #16
 800995e:	f7fe f9ef 	bl	8007d40 <malloc>
 8009962:	6270      	str	r0, [r6, #36]	; 0x24
 8009964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009968:	6004      	str	r4, [r0, #0]
 800996a:	60c4      	str	r4, [r0, #12]
 800996c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009974:	b94c      	cbnz	r4, 800998a <__pow5mult+0x56>
 8009976:	f240 2171 	movw	r1, #625	; 0x271
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff ff3a 	bl	80097f4 <__i2b>
 8009980:	2300      	movs	r3, #0
 8009982:	f8c8 0008 	str.w	r0, [r8, #8]
 8009986:	4604      	mov	r4, r0
 8009988:	6003      	str	r3, [r0, #0]
 800998a:	f04f 0800 	mov.w	r8, #0
 800998e:	07eb      	lsls	r3, r5, #31
 8009990:	d50a      	bpl.n	80099a8 <__pow5mult+0x74>
 8009992:	4639      	mov	r1, r7
 8009994:	4622      	mov	r2, r4
 8009996:	4630      	mov	r0, r6
 8009998:	f7ff ff35 	bl	8009806 <__multiply>
 800999c:	4639      	mov	r1, r7
 800999e:	4681      	mov	r9, r0
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff fe87 	bl	80096b4 <_Bfree>
 80099a6:	464f      	mov	r7, r9
 80099a8:	106d      	asrs	r5, r5, #1
 80099aa:	d00b      	beq.n	80099c4 <__pow5mult+0x90>
 80099ac:	6820      	ldr	r0, [r4, #0]
 80099ae:	b938      	cbnz	r0, 80099c0 <__pow5mult+0x8c>
 80099b0:	4622      	mov	r2, r4
 80099b2:	4621      	mov	r1, r4
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff ff26 	bl	8009806 <__multiply>
 80099ba:	6020      	str	r0, [r4, #0]
 80099bc:	f8c0 8000 	str.w	r8, [r0]
 80099c0:	4604      	mov	r4, r0
 80099c2:	e7e4      	b.n	800998e <__pow5mult+0x5a>
 80099c4:	4638      	mov	r0, r7
 80099c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ca:	bf00      	nop
 80099cc:	08066558 	.word	0x08066558

080099d0 <__lshift>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	6849      	ldr	r1, [r1, #4]
 80099de:	eb0a 0903 	add.w	r9, sl, r3
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	4607      	mov	r7, r0
 80099e6:	4616      	mov	r6, r2
 80099e8:	f109 0501 	add.w	r5, r9, #1
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	db32      	blt.n	8009a56 <__lshift+0x86>
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff fe2b 	bl	800964c <_Balloc>
 80099f6:	2300      	movs	r3, #0
 80099f8:	4680      	mov	r8, r0
 80099fa:	f100 0114 	add.w	r1, r0, #20
 80099fe:	461a      	mov	r2, r3
 8009a00:	4553      	cmp	r3, sl
 8009a02:	db2b      	blt.n	8009a5c <__lshift+0x8c>
 8009a04:	6920      	ldr	r0, [r4, #16]
 8009a06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a0a:	f104 0314 	add.w	r3, r4, #20
 8009a0e:	f016 021f 	ands.w	r2, r6, #31
 8009a12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a1a:	d025      	beq.n	8009a68 <__lshift+0x98>
 8009a1c:	f1c2 0e20 	rsb	lr, r2, #32
 8009a20:	2000      	movs	r0, #0
 8009a22:	681e      	ldr	r6, [r3, #0]
 8009a24:	468a      	mov	sl, r1
 8009a26:	4096      	lsls	r6, r2
 8009a28:	4330      	orrs	r0, r6
 8009a2a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a32:	459c      	cmp	ip, r3
 8009a34:	fa20 f00e 	lsr.w	r0, r0, lr
 8009a38:	d814      	bhi.n	8009a64 <__lshift+0x94>
 8009a3a:	6048      	str	r0, [r1, #4]
 8009a3c:	b108      	cbz	r0, 8009a42 <__lshift+0x72>
 8009a3e:	f109 0502 	add.w	r5, r9, #2
 8009a42:	3d01      	subs	r5, #1
 8009a44:	4638      	mov	r0, r7
 8009a46:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	f7ff fe32 	bl	80096b4 <_Bfree>
 8009a50:	4640      	mov	r0, r8
 8009a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a56:	3101      	adds	r1, #1
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	e7c7      	b.n	80099ec <__lshift+0x1c>
 8009a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a60:	3301      	adds	r3, #1
 8009a62:	e7cd      	b.n	8009a00 <__lshift+0x30>
 8009a64:	4651      	mov	r1, sl
 8009a66:	e7dc      	b.n	8009a22 <__lshift+0x52>
 8009a68:	3904      	subs	r1, #4
 8009a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a72:	459c      	cmp	ip, r3
 8009a74:	d8f9      	bhi.n	8009a6a <__lshift+0x9a>
 8009a76:	e7e4      	b.n	8009a42 <__lshift+0x72>

08009a78 <__mcmp>:
 8009a78:	6903      	ldr	r3, [r0, #16]
 8009a7a:	690a      	ldr	r2, [r1, #16]
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	b530      	push	{r4, r5, lr}
 8009a80:	d10c      	bne.n	8009a9c <__mcmp+0x24>
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	3014      	adds	r0, #20
 8009a86:	3114      	adds	r1, #20
 8009a88:	1884      	adds	r4, r0, r2
 8009a8a:	4411      	add	r1, r2
 8009a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a94:	4295      	cmp	r5, r2
 8009a96:	d003      	beq.n	8009aa0 <__mcmp+0x28>
 8009a98:	d305      	bcc.n	8009aa6 <__mcmp+0x2e>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	bd30      	pop	{r4, r5, pc}
 8009aa0:	42a0      	cmp	r0, r4
 8009aa2:	d3f3      	bcc.n	8009a8c <__mcmp+0x14>
 8009aa4:	e7fa      	b.n	8009a9c <__mcmp+0x24>
 8009aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aaa:	e7f7      	b.n	8009a9c <__mcmp+0x24>

08009aac <__mdiff>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	4614      	mov	r4, r2
 8009aba:	f7ff ffdd 	bl	8009a78 <__mcmp>
 8009abe:	1e06      	subs	r6, r0, #0
 8009ac0:	d108      	bne.n	8009ad4 <__mdiff+0x28>
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7ff fdc1 	bl	800964c <_Balloc>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad4:	bfa4      	itt	ge
 8009ad6:	4623      	movge	r3, r4
 8009ad8:	462c      	movge	r4, r5
 8009ada:	4638      	mov	r0, r7
 8009adc:	6861      	ldr	r1, [r4, #4]
 8009ade:	bfa6      	itte	ge
 8009ae0:	461d      	movge	r5, r3
 8009ae2:	2600      	movge	r6, #0
 8009ae4:	2601      	movlt	r6, #1
 8009ae6:	f7ff fdb1 	bl	800964c <_Balloc>
 8009aea:	692b      	ldr	r3, [r5, #16]
 8009aec:	60c6      	str	r6, [r0, #12]
 8009aee:	6926      	ldr	r6, [r4, #16]
 8009af0:	f105 0914 	add.w	r9, r5, #20
 8009af4:	f104 0214 	add.w	r2, r4, #20
 8009af8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009afc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b00:	f100 0514 	add.w	r5, r0, #20
 8009b04:	f04f 0e00 	mov.w	lr, #0
 8009b08:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b0c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b10:	fa1e f18a 	uxtah	r1, lr, sl
 8009b14:	b2a3      	uxth	r3, r4
 8009b16:	1ac9      	subs	r1, r1, r3
 8009b18:	0c23      	lsrs	r3, r4, #16
 8009b1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b22:	b289      	uxth	r1, r1
 8009b24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b28:	45c8      	cmp	r8, r9
 8009b2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b2e:	4694      	mov	ip, r2
 8009b30:	f845 3b04 	str.w	r3, [r5], #4
 8009b34:	d8e8      	bhi.n	8009b08 <__mdiff+0x5c>
 8009b36:	45bc      	cmp	ip, r7
 8009b38:	d304      	bcc.n	8009b44 <__mdiff+0x98>
 8009b3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009b3e:	b183      	cbz	r3, 8009b62 <__mdiff+0xb6>
 8009b40:	6106      	str	r6, [r0, #16]
 8009b42:	e7c5      	b.n	8009ad0 <__mdiff+0x24>
 8009b44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b48:	fa1e f381 	uxtah	r3, lr, r1
 8009b4c:	141a      	asrs	r2, r3, #16
 8009b4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b5c:	f845 3b04 	str.w	r3, [r5], #4
 8009b60:	e7e9      	b.n	8009b36 <__mdiff+0x8a>
 8009b62:	3e01      	subs	r6, #1
 8009b64:	e7e9      	b.n	8009b3a <__mdiff+0x8e>

08009b66 <__d2b>:
 8009b66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b6a:	460e      	mov	r6, r1
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	ec59 8b10 	vmov	r8, r9, d0
 8009b72:	4615      	mov	r5, r2
 8009b74:	f7ff fd6a 	bl	800964c <_Balloc>
 8009b78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b82:	bb34      	cbnz	r4, 8009bd2 <__d2b+0x6c>
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	f1b8 0300 	subs.w	r3, r8, #0
 8009b8a:	d027      	beq.n	8009bdc <__d2b+0x76>
 8009b8c:	a802      	add	r0, sp, #8
 8009b8e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009b92:	f7ff fe00 	bl	8009796 <__lo0bits>
 8009b96:	9900      	ldr	r1, [sp, #0]
 8009b98:	b1f0      	cbz	r0, 8009bd8 <__d2b+0x72>
 8009b9a:	9a01      	ldr	r2, [sp, #4]
 8009b9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	40c2      	lsrs	r2, r0
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	9201      	str	r2, [sp, #4]
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bf14      	ite	ne
 8009bb4:	2102      	movne	r1, #2
 8009bb6:	2101      	moveq	r1, #1
 8009bb8:	6139      	str	r1, [r7, #16]
 8009bba:	b1c4      	cbz	r4, 8009bee <__d2b+0x88>
 8009bbc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bc0:	4404      	add	r4, r0
 8009bc2:	6034      	str	r4, [r6, #0]
 8009bc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bc8:	6028      	str	r0, [r5, #0]
 8009bca:	4638      	mov	r0, r7
 8009bcc:	b003      	add	sp, #12
 8009bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bd6:	e7d5      	b.n	8009b84 <__d2b+0x1e>
 8009bd8:	6179      	str	r1, [r7, #20]
 8009bda:	e7e7      	b.n	8009bac <__d2b+0x46>
 8009bdc:	a801      	add	r0, sp, #4
 8009bde:	f7ff fdda 	bl	8009796 <__lo0bits>
 8009be2:	9b01      	ldr	r3, [sp, #4]
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	2101      	movs	r1, #1
 8009be8:	6139      	str	r1, [r7, #16]
 8009bea:	3020      	adds	r0, #32
 8009bec:	e7e5      	b.n	8009bba <__d2b+0x54>
 8009bee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009bf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bf6:	6030      	str	r0, [r6, #0]
 8009bf8:	6918      	ldr	r0, [r3, #16]
 8009bfa:	f7ff fdad 	bl	8009758 <__hi0bits>
 8009bfe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c02:	e7e1      	b.n	8009bc8 <__d2b+0x62>

08009c04 <_calloc_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	fb02 f401 	mul.w	r4, r2, r1
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	f7fe f902 	bl	8007e14 <_malloc_r>
 8009c10:	4605      	mov	r5, r0
 8009c12:	b118      	cbz	r0, 8009c1c <_calloc_r+0x18>
 8009c14:	4622      	mov	r2, r4
 8009c16:	2100      	movs	r1, #0
 8009c18:	f7fe f8a5 	bl	8007d66 <memset>
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}

08009c20 <_realloc_r>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	4607      	mov	r7, r0
 8009c24:	4614      	mov	r4, r2
 8009c26:	460e      	mov	r6, r1
 8009c28:	b921      	cbnz	r1, 8009c34 <_realloc_r+0x14>
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c30:	f7fe b8f0 	b.w	8007e14 <_malloc_r>
 8009c34:	b922      	cbnz	r2, 8009c40 <_realloc_r+0x20>
 8009c36:	f7fe f89f 	bl	8007d78 <_free_r>
 8009c3a:	4625      	mov	r5, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c40:	f000 fd1d 	bl	800a67e <_malloc_usable_size_r>
 8009c44:	42a0      	cmp	r0, r4
 8009c46:	d20f      	bcs.n	8009c68 <_realloc_r+0x48>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7fe f8e2 	bl	8007e14 <_malloc_r>
 8009c50:	4605      	mov	r5, r0
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d0f2      	beq.n	8009c3c <_realloc_r+0x1c>
 8009c56:	4631      	mov	r1, r6
 8009c58:	4622      	mov	r2, r4
 8009c5a:	f7fe f879 	bl	8007d50 <memcpy>
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7fe f889 	bl	8007d78 <_free_r>
 8009c66:	e7e9      	b.n	8009c3c <_realloc_r+0x1c>
 8009c68:	4635      	mov	r5, r6
 8009c6a:	e7e7      	b.n	8009c3c <_realloc_r+0x1c>

08009c6c <__ssputs_r>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	688e      	ldr	r6, [r1, #8]
 8009c72:	429e      	cmp	r6, r3
 8009c74:	4682      	mov	sl, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	4690      	mov	r8, r2
 8009c7a:	4699      	mov	r9, r3
 8009c7c:	d837      	bhi.n	8009cee <__ssputs_r+0x82>
 8009c7e:	898a      	ldrh	r2, [r1, #12]
 8009c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c84:	d031      	beq.n	8009cea <__ssputs_r+0x7e>
 8009c86:	6825      	ldr	r5, [r4, #0]
 8009c88:	6909      	ldr	r1, [r1, #16]
 8009c8a:	1a6f      	subs	r7, r5, r1
 8009c8c:	6965      	ldr	r5, [r4, #20]
 8009c8e:	2302      	movs	r3, #2
 8009c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c94:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c98:	f109 0301 	add.w	r3, r9, #1
 8009c9c:	443b      	add	r3, r7
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	bf38      	it	cc
 8009ca2:	461d      	movcc	r5, r3
 8009ca4:	0553      	lsls	r3, r2, #21
 8009ca6:	d530      	bpl.n	8009d0a <__ssputs_r+0x9e>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7fe f8b3 	bl	8007e14 <_malloc_r>
 8009cae:	4606      	mov	r6, r0
 8009cb0:	b950      	cbnz	r0, 8009cc8 <__ssputs_r+0x5c>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	f8ca 3000 	str.w	r3, [sl]
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc8:	463a      	mov	r2, r7
 8009cca:	6921      	ldr	r1, [r4, #16]
 8009ccc:	f7fe f840 	bl	8007d50 <memcpy>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	6126      	str	r6, [r4, #16]
 8009cde:	6165      	str	r5, [r4, #20]
 8009ce0:	443e      	add	r6, r7
 8009ce2:	1bed      	subs	r5, r5, r7
 8009ce4:	6026      	str	r6, [r4, #0]
 8009ce6:	60a5      	str	r5, [r4, #8]
 8009ce8:	464e      	mov	r6, r9
 8009cea:	454e      	cmp	r6, r9
 8009cec:	d900      	bls.n	8009cf0 <__ssputs_r+0x84>
 8009cee:	464e      	mov	r6, r9
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	f000 fca9 	bl	800a64c <memmove>
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	1b9b      	subs	r3, r3, r6
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	441e      	add	r6, r3
 8009d04:	6026      	str	r6, [r4, #0]
 8009d06:	2000      	movs	r0, #0
 8009d08:	e7dc      	b.n	8009cc4 <__ssputs_r+0x58>
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	f7ff ff88 	bl	8009c20 <_realloc_r>
 8009d10:	4606      	mov	r6, r0
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d1e2      	bne.n	8009cdc <__ssputs_r+0x70>
 8009d16:	6921      	ldr	r1, [r4, #16]
 8009d18:	4650      	mov	r0, sl
 8009d1a:	f7fe f82d 	bl	8007d78 <_free_r>
 8009d1e:	e7c8      	b.n	8009cb2 <__ssputs_r+0x46>

08009d20 <_svfiprintf_r>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	461d      	mov	r5, r3
 8009d26:	898b      	ldrh	r3, [r1, #12]
 8009d28:	061f      	lsls	r7, r3, #24
 8009d2a:	b09d      	sub	sp, #116	; 0x74
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	4616      	mov	r6, r2
 8009d32:	d50f      	bpl.n	8009d54 <_svfiprintf_r+0x34>
 8009d34:	690b      	ldr	r3, [r1, #16]
 8009d36:	b96b      	cbnz	r3, 8009d54 <_svfiprintf_r+0x34>
 8009d38:	2140      	movs	r1, #64	; 0x40
 8009d3a:	f7fe f86b 	bl	8007e14 <_malloc_r>
 8009d3e:	6020      	str	r0, [r4, #0]
 8009d40:	6120      	str	r0, [r4, #16]
 8009d42:	b928      	cbnz	r0, 8009d50 <_svfiprintf_r+0x30>
 8009d44:	230c      	movs	r3, #12
 8009d46:	f8c8 3000 	str.w	r3, [r8]
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d4e:	e0c8      	b.n	8009ee2 <_svfiprintf_r+0x1c2>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	2300      	movs	r3, #0
 8009d56:	9309      	str	r3, [sp, #36]	; 0x24
 8009d58:	2320      	movs	r3, #32
 8009d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d5e:	2330      	movs	r3, #48	; 0x30
 8009d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d64:	9503      	str	r5, [sp, #12]
 8009d66:	f04f 0b01 	mov.w	fp, #1
 8009d6a:	4637      	mov	r7, r6
 8009d6c:	463d      	mov	r5, r7
 8009d6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d72:	b10b      	cbz	r3, 8009d78 <_svfiprintf_r+0x58>
 8009d74:	2b25      	cmp	r3, #37	; 0x25
 8009d76:	d13e      	bne.n	8009df6 <_svfiprintf_r+0xd6>
 8009d78:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d7c:	d00b      	beq.n	8009d96 <_svfiprintf_r+0x76>
 8009d7e:	4653      	mov	r3, sl
 8009d80:	4632      	mov	r2, r6
 8009d82:	4621      	mov	r1, r4
 8009d84:	4640      	mov	r0, r8
 8009d86:	f7ff ff71 	bl	8009c6c <__ssputs_r>
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	f000 80a4 	beq.w	8009ed8 <_svfiprintf_r+0x1b8>
 8009d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d92:	4453      	add	r3, sl
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	783b      	ldrb	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 809d 	beq.w	8009ed8 <_svfiprintf_r+0x1b8>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da8:	9304      	str	r3, [sp, #16]
 8009daa:	9307      	str	r3, [sp, #28]
 8009dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009db0:	931a      	str	r3, [sp, #104]	; 0x68
 8009db2:	462f      	mov	r7, r5
 8009db4:	2205      	movs	r2, #5
 8009db6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009dba:	4850      	ldr	r0, [pc, #320]	; (8009efc <_svfiprintf_r+0x1dc>)
 8009dbc:	f7f6 fa18 	bl	80001f0 <memchr>
 8009dc0:	9b04      	ldr	r3, [sp, #16]
 8009dc2:	b9d0      	cbnz	r0, 8009dfa <_svfiprintf_r+0xda>
 8009dc4:	06d9      	lsls	r1, r3, #27
 8009dc6:	bf44      	itt	mi
 8009dc8:	2220      	movmi	r2, #32
 8009dca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dce:	071a      	lsls	r2, r3, #28
 8009dd0:	bf44      	itt	mi
 8009dd2:	222b      	movmi	r2, #43	; 0x2b
 8009dd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dd8:	782a      	ldrb	r2, [r5, #0]
 8009dda:	2a2a      	cmp	r2, #42	; 0x2a
 8009ddc:	d015      	beq.n	8009e0a <_svfiprintf_r+0xea>
 8009dde:	9a07      	ldr	r2, [sp, #28]
 8009de0:	462f      	mov	r7, r5
 8009de2:	2000      	movs	r0, #0
 8009de4:	250a      	movs	r5, #10
 8009de6:	4639      	mov	r1, r7
 8009de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dec:	3b30      	subs	r3, #48	; 0x30
 8009dee:	2b09      	cmp	r3, #9
 8009df0:	d94d      	bls.n	8009e8e <_svfiprintf_r+0x16e>
 8009df2:	b1b8      	cbz	r0, 8009e24 <_svfiprintf_r+0x104>
 8009df4:	e00f      	b.n	8009e16 <_svfiprintf_r+0xf6>
 8009df6:	462f      	mov	r7, r5
 8009df8:	e7b8      	b.n	8009d6c <_svfiprintf_r+0x4c>
 8009dfa:	4a40      	ldr	r2, [pc, #256]	; (8009efc <_svfiprintf_r+0x1dc>)
 8009dfc:	1a80      	subs	r0, r0, r2
 8009dfe:	fa0b f000 	lsl.w	r0, fp, r0
 8009e02:	4318      	orrs	r0, r3
 8009e04:	9004      	str	r0, [sp, #16]
 8009e06:	463d      	mov	r5, r7
 8009e08:	e7d3      	b.n	8009db2 <_svfiprintf_r+0x92>
 8009e0a:	9a03      	ldr	r2, [sp, #12]
 8009e0c:	1d11      	adds	r1, r2, #4
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	9103      	str	r1, [sp, #12]
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	db01      	blt.n	8009e1a <_svfiprintf_r+0xfa>
 8009e16:	9207      	str	r2, [sp, #28]
 8009e18:	e004      	b.n	8009e24 <_svfiprintf_r+0x104>
 8009e1a:	4252      	negs	r2, r2
 8009e1c:	f043 0302 	orr.w	r3, r3, #2
 8009e20:	9207      	str	r2, [sp, #28]
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	783b      	ldrb	r3, [r7, #0]
 8009e26:	2b2e      	cmp	r3, #46	; 0x2e
 8009e28:	d10c      	bne.n	8009e44 <_svfiprintf_r+0x124>
 8009e2a:	787b      	ldrb	r3, [r7, #1]
 8009e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2e:	d133      	bne.n	8009e98 <_svfiprintf_r+0x178>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	1d1a      	adds	r2, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	9203      	str	r2, [sp, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	bfb8      	it	lt
 8009e3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e40:	3702      	adds	r7, #2
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	4d2e      	ldr	r5, [pc, #184]	; (8009f00 <_svfiprintf_r+0x1e0>)
 8009e46:	7839      	ldrb	r1, [r7, #0]
 8009e48:	2203      	movs	r2, #3
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f7f6 f9d0 	bl	80001f0 <memchr>
 8009e50:	b138      	cbz	r0, 8009e62 <_svfiprintf_r+0x142>
 8009e52:	2340      	movs	r3, #64	; 0x40
 8009e54:	1b40      	subs	r0, r0, r5
 8009e56:	fa03 f000 	lsl.w	r0, r3, r0
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	4303      	orrs	r3, r0
 8009e5e:	3701      	adds	r7, #1
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	7839      	ldrb	r1, [r7, #0]
 8009e64:	4827      	ldr	r0, [pc, #156]	; (8009f04 <_svfiprintf_r+0x1e4>)
 8009e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e6a:	2206      	movs	r2, #6
 8009e6c:	1c7e      	adds	r6, r7, #1
 8009e6e:	f7f6 f9bf 	bl	80001f0 <memchr>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d038      	beq.n	8009ee8 <_svfiprintf_r+0x1c8>
 8009e76:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <_svfiprintf_r+0x1e8>)
 8009e78:	bb13      	cbnz	r3, 8009ec0 <_svfiprintf_r+0x1a0>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	3307      	adds	r3, #7
 8009e7e:	f023 0307 	bic.w	r3, r3, #7
 8009e82:	3308      	adds	r3, #8
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e88:	444b      	add	r3, r9
 8009e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8c:	e76d      	b.n	8009d6a <_svfiprintf_r+0x4a>
 8009e8e:	fb05 3202 	mla	r2, r5, r2, r3
 8009e92:	2001      	movs	r0, #1
 8009e94:	460f      	mov	r7, r1
 8009e96:	e7a6      	b.n	8009de6 <_svfiprintf_r+0xc6>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	3701      	adds	r7, #1
 8009e9c:	9305      	str	r3, [sp, #20]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	250a      	movs	r5, #10
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea8:	3a30      	subs	r2, #48	; 0x30
 8009eaa:	2a09      	cmp	r2, #9
 8009eac:	d903      	bls.n	8009eb6 <_svfiprintf_r+0x196>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0c8      	beq.n	8009e44 <_svfiprintf_r+0x124>
 8009eb2:	9105      	str	r1, [sp, #20]
 8009eb4:	e7c6      	b.n	8009e44 <_svfiprintf_r+0x124>
 8009eb6:	fb05 2101 	mla	r1, r5, r1, r2
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4607      	mov	r7, r0
 8009ebe:	e7f0      	b.n	8009ea2 <_svfiprintf_r+0x182>
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	4b11      	ldr	r3, [pc, #68]	; (8009f0c <_svfiprintf_r+0x1ec>)
 8009ec8:	a904      	add	r1, sp, #16
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7fe f890 	bl	8007ff0 <_printf_float>
 8009ed0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ed4:	4681      	mov	r9, r0
 8009ed6:	d1d6      	bne.n	8009e86 <_svfiprintf_r+0x166>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	065b      	lsls	r3, r3, #25
 8009edc:	f53f af35 	bmi.w	8009d4a <_svfiprintf_r+0x2a>
 8009ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee2:	b01d      	add	sp, #116	; 0x74
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	ab03      	add	r3, sp, #12
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	4622      	mov	r2, r4
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <_svfiprintf_r+0x1ec>)
 8009ef0:	a904      	add	r1, sp, #16
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f7fe fb32 	bl	800855c <_printf_i>
 8009ef8:	e7ea      	b.n	8009ed0 <_svfiprintf_r+0x1b0>
 8009efa:	bf00      	nop
 8009efc:	08066564 	.word	0x08066564
 8009f00:	0806656a 	.word	0x0806656a
 8009f04:	0806656e 	.word	0x0806656e
 8009f08:	08007ff1 	.word	0x08007ff1
 8009f0c:	08009c6d 	.word	0x08009c6d

08009f10 <__sfputc_r>:
 8009f10:	6893      	ldr	r3, [r2, #8]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	b410      	push	{r4}
 8009f18:	6093      	str	r3, [r2, #8]
 8009f1a:	da08      	bge.n	8009f2e <__sfputc_r+0x1e>
 8009f1c:	6994      	ldr	r4, [r2, #24]
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	db01      	blt.n	8009f26 <__sfputc_r+0x16>
 8009f22:	290a      	cmp	r1, #10
 8009f24:	d103      	bne.n	8009f2e <__sfputc_r+0x1e>
 8009f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f2a:	f000 b975 	b.w	800a218 <__swbuf_r>
 8009f2e:	6813      	ldr	r3, [r2, #0]
 8009f30:	1c58      	adds	r0, r3, #1
 8009f32:	6010      	str	r0, [r2, #0]
 8009f34:	7019      	strb	r1, [r3, #0]
 8009f36:	4608      	mov	r0, r1
 8009f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <__sfputs_r>:
 8009f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f40:	4606      	mov	r6, r0
 8009f42:	460f      	mov	r7, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	18d5      	adds	r5, r2, r3
 8009f48:	42ac      	cmp	r4, r5
 8009f4a:	d101      	bne.n	8009f50 <__sfputs_r+0x12>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e007      	b.n	8009f60 <__sfputs_r+0x22>
 8009f50:	463a      	mov	r2, r7
 8009f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ffda 	bl	8009f10 <__sfputc_r>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d1f3      	bne.n	8009f48 <__sfputs_r+0xa>
 8009f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f64 <_vfiprintf_r>:
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	b09d      	sub	sp, #116	; 0x74
 8009f6c:	4617      	mov	r7, r2
 8009f6e:	461d      	mov	r5, r3
 8009f70:	4606      	mov	r6, r0
 8009f72:	b118      	cbz	r0, 8009f7c <_vfiprintf_r+0x18>
 8009f74:	6983      	ldr	r3, [r0, #24]
 8009f76:	b90b      	cbnz	r3, 8009f7c <_vfiprintf_r+0x18>
 8009f78:	f7ff face 	bl	8009518 <__sinit>
 8009f7c:	4b7c      	ldr	r3, [pc, #496]	; (800a170 <_vfiprintf_r+0x20c>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d158      	bne.n	800a034 <_vfiprintf_r+0xd0>
 8009f82:	6874      	ldr	r4, [r6, #4]
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	0718      	lsls	r0, r3, #28
 8009f88:	d55e      	bpl.n	800a048 <_vfiprintf_r+0xe4>
 8009f8a:	6923      	ldr	r3, [r4, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05b      	beq.n	800a048 <_vfiprintf_r+0xe4>
 8009f90:	2300      	movs	r3, #0
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	2320      	movs	r3, #32
 8009f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9a:	2330      	movs	r3, #48	; 0x30
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fa0:	9503      	str	r5, [sp, #12]
 8009fa2:	f04f 0b01 	mov.w	fp, #1
 8009fa6:	46b8      	mov	r8, r7
 8009fa8:	4645      	mov	r5, r8
 8009faa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fae:	b10b      	cbz	r3, 8009fb4 <_vfiprintf_r+0x50>
 8009fb0:	2b25      	cmp	r3, #37	; 0x25
 8009fb2:	d154      	bne.n	800a05e <_vfiprintf_r+0xfa>
 8009fb4:	ebb8 0a07 	subs.w	sl, r8, r7
 8009fb8:	d00b      	beq.n	8009fd2 <_vfiprintf_r+0x6e>
 8009fba:	4653      	mov	r3, sl
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff ffbc 	bl	8009f3e <__sfputs_r>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	f000 80c2 	beq.w	800a150 <_vfiprintf_r+0x1ec>
 8009fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fce:	4453      	add	r3, sl
 8009fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd2:	f898 3000 	ldrb.w	r3, [r8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80ba 	beq.w	800a150 <_vfiprintf_r+0x1ec>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	9307      	str	r3, [sp, #28]
 8009fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fee:	931a      	str	r3, [sp, #104]	; 0x68
 8009ff0:	46a8      	mov	r8, r5
 8009ff2:	2205      	movs	r2, #5
 8009ff4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009ff8:	485e      	ldr	r0, [pc, #376]	; (800a174 <_vfiprintf_r+0x210>)
 8009ffa:	f7f6 f8f9 	bl	80001f0 <memchr>
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	bb78      	cbnz	r0, 800a062 <_vfiprintf_r+0xfe>
 800a002:	06d9      	lsls	r1, r3, #27
 800a004:	bf44      	itt	mi
 800a006:	2220      	movmi	r2, #32
 800a008:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a00c:	071a      	lsls	r2, r3, #28
 800a00e:	bf44      	itt	mi
 800a010:	222b      	movmi	r2, #43	; 0x2b
 800a012:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a016:	782a      	ldrb	r2, [r5, #0]
 800a018:	2a2a      	cmp	r2, #42	; 0x2a
 800a01a:	d02a      	beq.n	800a072 <_vfiprintf_r+0x10e>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	46a8      	mov	r8, r5
 800a020:	2000      	movs	r0, #0
 800a022:	250a      	movs	r5, #10
 800a024:	4641      	mov	r1, r8
 800a026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02a:	3b30      	subs	r3, #48	; 0x30
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d969      	bls.n	800a104 <_vfiprintf_r+0x1a0>
 800a030:	b360      	cbz	r0, 800a08c <_vfiprintf_r+0x128>
 800a032:	e024      	b.n	800a07e <_vfiprintf_r+0x11a>
 800a034:	4b50      	ldr	r3, [pc, #320]	; (800a178 <_vfiprintf_r+0x214>)
 800a036:	429c      	cmp	r4, r3
 800a038:	d101      	bne.n	800a03e <_vfiprintf_r+0xda>
 800a03a:	68b4      	ldr	r4, [r6, #8]
 800a03c:	e7a2      	b.n	8009f84 <_vfiprintf_r+0x20>
 800a03e:	4b4f      	ldr	r3, [pc, #316]	; (800a17c <_vfiprintf_r+0x218>)
 800a040:	429c      	cmp	r4, r3
 800a042:	bf08      	it	eq
 800a044:	68f4      	ldreq	r4, [r6, #12]
 800a046:	e79d      	b.n	8009f84 <_vfiprintf_r+0x20>
 800a048:	4621      	mov	r1, r4
 800a04a:	4630      	mov	r0, r6
 800a04c:	f000 f948 	bl	800a2e0 <__swsetup_r>
 800a050:	2800      	cmp	r0, #0
 800a052:	d09d      	beq.n	8009f90 <_vfiprintf_r+0x2c>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a058:	b01d      	add	sp, #116	; 0x74
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	46a8      	mov	r8, r5
 800a060:	e7a2      	b.n	8009fa8 <_vfiprintf_r+0x44>
 800a062:	4a44      	ldr	r2, [pc, #272]	; (800a174 <_vfiprintf_r+0x210>)
 800a064:	1a80      	subs	r0, r0, r2
 800a066:	fa0b f000 	lsl.w	r0, fp, r0
 800a06a:	4318      	orrs	r0, r3
 800a06c:	9004      	str	r0, [sp, #16]
 800a06e:	4645      	mov	r5, r8
 800a070:	e7be      	b.n	8009ff0 <_vfiprintf_r+0x8c>
 800a072:	9a03      	ldr	r2, [sp, #12]
 800a074:	1d11      	adds	r1, r2, #4
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	9103      	str	r1, [sp, #12]
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	db01      	blt.n	800a082 <_vfiprintf_r+0x11e>
 800a07e:	9207      	str	r2, [sp, #28]
 800a080:	e004      	b.n	800a08c <_vfiprintf_r+0x128>
 800a082:	4252      	negs	r2, r2
 800a084:	f043 0302 	orr.w	r3, r3, #2
 800a088:	9207      	str	r2, [sp, #28]
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	f898 3000 	ldrb.w	r3, [r8]
 800a090:	2b2e      	cmp	r3, #46	; 0x2e
 800a092:	d10e      	bne.n	800a0b2 <_vfiprintf_r+0x14e>
 800a094:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a098:	2b2a      	cmp	r3, #42	; 0x2a
 800a09a:	d138      	bne.n	800a10e <_vfiprintf_r+0x1aa>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	9203      	str	r2, [sp, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfb8      	it	lt
 800a0a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0ac:	f108 0802 	add.w	r8, r8, #2
 800a0b0:	9305      	str	r3, [sp, #20]
 800a0b2:	4d33      	ldr	r5, [pc, #204]	; (800a180 <_vfiprintf_r+0x21c>)
 800a0b4:	f898 1000 	ldrb.w	r1, [r8]
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7f6 f898 	bl	80001f0 <memchr>
 800a0c0:	b140      	cbz	r0, 800a0d4 <_vfiprintf_r+0x170>
 800a0c2:	2340      	movs	r3, #64	; 0x40
 800a0c4:	1b40      	subs	r0, r0, r5
 800a0c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	4303      	orrs	r3, r0
 800a0ce:	f108 0801 	add.w	r8, r8, #1
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	f898 1000 	ldrb.w	r1, [r8]
 800a0d8:	482a      	ldr	r0, [pc, #168]	; (800a184 <_vfiprintf_r+0x220>)
 800a0da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0de:	2206      	movs	r2, #6
 800a0e0:	f108 0701 	add.w	r7, r8, #1
 800a0e4:	f7f6 f884 	bl	80001f0 <memchr>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d037      	beq.n	800a15c <_vfiprintf_r+0x1f8>
 800a0ec:	4b26      	ldr	r3, [pc, #152]	; (800a188 <_vfiprintf_r+0x224>)
 800a0ee:	bb1b      	cbnz	r3, 800a138 <_vfiprintf_r+0x1d4>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	f023 0307 	bic.w	r3, r3, #7
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	444b      	add	r3, r9
 800a100:	9309      	str	r3, [sp, #36]	; 0x24
 800a102:	e750      	b.n	8009fa6 <_vfiprintf_r+0x42>
 800a104:	fb05 3202 	mla	r2, r5, r2, r3
 800a108:	2001      	movs	r0, #1
 800a10a:	4688      	mov	r8, r1
 800a10c:	e78a      	b.n	800a024 <_vfiprintf_r+0xc0>
 800a10e:	2300      	movs	r3, #0
 800a110:	f108 0801 	add.w	r8, r8, #1
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	4619      	mov	r1, r3
 800a118:	250a      	movs	r5, #10
 800a11a:	4640      	mov	r0, r8
 800a11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a120:	3a30      	subs	r2, #48	; 0x30
 800a122:	2a09      	cmp	r2, #9
 800a124:	d903      	bls.n	800a12e <_vfiprintf_r+0x1ca>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0c3      	beq.n	800a0b2 <_vfiprintf_r+0x14e>
 800a12a:	9105      	str	r1, [sp, #20]
 800a12c:	e7c1      	b.n	800a0b2 <_vfiprintf_r+0x14e>
 800a12e:	fb05 2101 	mla	r1, r5, r1, r2
 800a132:	2301      	movs	r3, #1
 800a134:	4680      	mov	r8, r0
 800a136:	e7f0      	b.n	800a11a <_vfiprintf_r+0x1b6>
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4622      	mov	r2, r4
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <_vfiprintf_r+0x228>)
 800a140:	a904      	add	r1, sp, #16
 800a142:	4630      	mov	r0, r6
 800a144:	f7fd ff54 	bl	8007ff0 <_printf_float>
 800a148:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a14c:	4681      	mov	r9, r0
 800a14e:	d1d5      	bne.n	800a0fc <_vfiprintf_r+0x198>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	065b      	lsls	r3, r3, #25
 800a154:	f53f af7e 	bmi.w	800a054 <_vfiprintf_r+0xf0>
 800a158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15a:	e77d      	b.n	800a058 <_vfiprintf_r+0xf4>
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	4622      	mov	r2, r4
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <_vfiprintf_r+0x228>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	4630      	mov	r0, r6
 800a168:	f7fe f9f8 	bl	800855c <_printf_i>
 800a16c:	e7ec      	b.n	800a148 <_vfiprintf_r+0x1e4>
 800a16e:	bf00      	nop
 800a170:	08066428 	.word	0x08066428
 800a174:	08066564 	.word	0x08066564
 800a178:	08066448 	.word	0x08066448
 800a17c:	08066408 	.word	0x08066408
 800a180:	0806656a 	.word	0x0806656a
 800a184:	0806656e 	.word	0x0806656e
 800a188:	08007ff1 	.word	0x08007ff1
 800a18c:	08009f3f 	.word	0x08009f3f

0800a190 <__sread>:
 800a190:	b510      	push	{r4, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a198:	f000 fa7a 	bl	800a690 <_read_r>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	bfab      	itete	ge
 800a1a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1a4:	181b      	addge	r3, r3, r0
 800a1a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1aa:	bfac      	ite	ge
 800a1ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1ae:	81a3      	strhlt	r3, [r4, #12]
 800a1b0:	bd10      	pop	{r4, pc}

0800a1b2 <__swrite>:
 800a1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	898b      	ldrh	r3, [r1, #12]
 800a1ba:	05db      	lsls	r3, r3, #23
 800a1bc:	4605      	mov	r5, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	4616      	mov	r6, r2
 800a1c2:	d505      	bpl.n	800a1d0 <__swrite+0x1e>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	f000 f9b6 	bl	800a53c <_lseek_r>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	f000 b869 	b.w	800a2bc <_write_r>

0800a1ea <__sseek>:
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f2:	f000 f9a3 	bl	800a53c <_lseek_r>
 800a1f6:	1c43      	adds	r3, r0, #1
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	bf15      	itete	ne
 800a1fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a206:	81a3      	strheq	r3, [r4, #12]
 800a208:	bf18      	it	ne
 800a20a:	81a3      	strhne	r3, [r4, #12]
 800a20c:	bd10      	pop	{r4, pc}

0800a20e <__sclose>:
 800a20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a212:	f000 b8d3 	b.w	800a3bc <_close_r>
	...

0800a218 <__swbuf_r>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	460e      	mov	r6, r1
 800a21c:	4614      	mov	r4, r2
 800a21e:	4605      	mov	r5, r0
 800a220:	b118      	cbz	r0, 800a22a <__swbuf_r+0x12>
 800a222:	6983      	ldr	r3, [r0, #24]
 800a224:	b90b      	cbnz	r3, 800a22a <__swbuf_r+0x12>
 800a226:	f7ff f977 	bl	8009518 <__sinit>
 800a22a:	4b21      	ldr	r3, [pc, #132]	; (800a2b0 <__swbuf_r+0x98>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d12a      	bne.n	800a286 <__swbuf_r+0x6e>
 800a230:	686c      	ldr	r4, [r5, #4]
 800a232:	69a3      	ldr	r3, [r4, #24]
 800a234:	60a3      	str	r3, [r4, #8]
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	071a      	lsls	r2, r3, #28
 800a23a:	d52e      	bpl.n	800a29a <__swbuf_r+0x82>
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	b363      	cbz	r3, 800a29a <__swbuf_r+0x82>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	1ac0      	subs	r0, r0, r3
 800a246:	6963      	ldr	r3, [r4, #20]
 800a248:	b2f6      	uxtb	r6, r6
 800a24a:	4283      	cmp	r3, r0
 800a24c:	4637      	mov	r7, r6
 800a24e:	dc04      	bgt.n	800a25a <__swbuf_r+0x42>
 800a250:	4621      	mov	r1, r4
 800a252:	4628      	mov	r0, r5
 800a254:	f000 f948 	bl	800a4e8 <_fflush_r>
 800a258:	bb28      	cbnz	r0, 800a2a6 <__swbuf_r+0x8e>
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	60a3      	str	r3, [r4, #8]
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	6022      	str	r2, [r4, #0]
 800a266:	701e      	strb	r6, [r3, #0]
 800a268:	6963      	ldr	r3, [r4, #20]
 800a26a:	3001      	adds	r0, #1
 800a26c:	4283      	cmp	r3, r0
 800a26e:	d004      	beq.n	800a27a <__swbuf_r+0x62>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	07db      	lsls	r3, r3, #31
 800a274:	d519      	bpl.n	800a2aa <__swbuf_r+0x92>
 800a276:	2e0a      	cmp	r6, #10
 800a278:	d117      	bne.n	800a2aa <__swbuf_r+0x92>
 800a27a:	4621      	mov	r1, r4
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 f933 	bl	800a4e8 <_fflush_r>
 800a282:	b190      	cbz	r0, 800a2aa <__swbuf_r+0x92>
 800a284:	e00f      	b.n	800a2a6 <__swbuf_r+0x8e>
 800a286:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <__swbuf_r+0x9c>)
 800a288:	429c      	cmp	r4, r3
 800a28a:	d101      	bne.n	800a290 <__swbuf_r+0x78>
 800a28c:	68ac      	ldr	r4, [r5, #8]
 800a28e:	e7d0      	b.n	800a232 <__swbuf_r+0x1a>
 800a290:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <__swbuf_r+0xa0>)
 800a292:	429c      	cmp	r4, r3
 800a294:	bf08      	it	eq
 800a296:	68ec      	ldreq	r4, [r5, #12]
 800a298:	e7cb      	b.n	800a232 <__swbuf_r+0x1a>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4628      	mov	r0, r5
 800a29e:	f000 f81f 	bl	800a2e0 <__swsetup_r>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d0cc      	beq.n	800a240 <__swbuf_r+0x28>
 800a2a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	08066428 	.word	0x08066428
 800a2b4:	08066448 	.word	0x08066448
 800a2b8:	08066408 	.word	0x08066408

0800a2bc <_write_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4c07      	ldr	r4, [pc, #28]	; (800a2dc <_write_r+0x20>)
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	6022      	str	r2, [r4, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f7f7 fd31 	bl	8001d32 <_write>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_write_r+0x1e>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_write_r+0x1e>
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	20007054 	.word	0x20007054

0800a2e0 <__swsetup_r>:
 800a2e0:	4b32      	ldr	r3, [pc, #200]	; (800a3ac <__swsetup_r+0xcc>)
 800a2e2:	b570      	push	{r4, r5, r6, lr}
 800a2e4:	681d      	ldr	r5, [r3, #0]
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	b125      	cbz	r5, 800a2f6 <__swsetup_r+0x16>
 800a2ec:	69ab      	ldr	r3, [r5, #24]
 800a2ee:	b913      	cbnz	r3, 800a2f6 <__swsetup_r+0x16>
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f7ff f911 	bl	8009518 <__sinit>
 800a2f6:	4b2e      	ldr	r3, [pc, #184]	; (800a3b0 <__swsetup_r+0xd0>)
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	d10f      	bne.n	800a31c <__swsetup_r+0x3c>
 800a2fc:	686c      	ldr	r4, [r5, #4]
 800a2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a302:	b29a      	uxth	r2, r3
 800a304:	0715      	lsls	r5, r2, #28
 800a306:	d42c      	bmi.n	800a362 <__swsetup_r+0x82>
 800a308:	06d0      	lsls	r0, r2, #27
 800a30a:	d411      	bmi.n	800a330 <__swsetup_r+0x50>
 800a30c:	2209      	movs	r2, #9
 800a30e:	6032      	str	r2, [r6, #0]
 800a310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a31a:	e03e      	b.n	800a39a <__swsetup_r+0xba>
 800a31c:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <__swsetup_r+0xd4>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	d101      	bne.n	800a326 <__swsetup_r+0x46>
 800a322:	68ac      	ldr	r4, [r5, #8]
 800a324:	e7eb      	b.n	800a2fe <__swsetup_r+0x1e>
 800a326:	4b24      	ldr	r3, [pc, #144]	; (800a3b8 <__swsetup_r+0xd8>)
 800a328:	429c      	cmp	r4, r3
 800a32a:	bf08      	it	eq
 800a32c:	68ec      	ldreq	r4, [r5, #12]
 800a32e:	e7e6      	b.n	800a2fe <__swsetup_r+0x1e>
 800a330:	0751      	lsls	r1, r2, #29
 800a332:	d512      	bpl.n	800a35a <__swsetup_r+0x7a>
 800a334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a336:	b141      	cbz	r1, 800a34a <__swsetup_r+0x6a>
 800a338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a33c:	4299      	cmp	r1, r3
 800a33e:	d002      	beq.n	800a346 <__swsetup_r+0x66>
 800a340:	4630      	mov	r0, r6
 800a342:	f7fd fd19 	bl	8007d78 <_free_r>
 800a346:	2300      	movs	r3, #0
 800a348:	6363      	str	r3, [r4, #52]	; 0x34
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	2300      	movs	r3, #0
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f043 0308 	orr.w	r3, r3, #8
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	b94b      	cbnz	r3, 800a37a <__swsetup_r+0x9a>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a370:	d003      	beq.n	800a37a <__swsetup_r+0x9a>
 800a372:	4621      	mov	r1, r4
 800a374:	4630      	mov	r0, r6
 800a376:	f000 f917 	bl	800a5a8 <__smakebuf_r>
 800a37a:	89a2      	ldrh	r2, [r4, #12]
 800a37c:	f012 0301 	ands.w	r3, r2, #1
 800a380:	d00c      	beq.n	800a39c <__swsetup_r+0xbc>
 800a382:	2300      	movs	r3, #0
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	6963      	ldr	r3, [r4, #20]
 800a388:	425b      	negs	r3, r3
 800a38a:	61a3      	str	r3, [r4, #24]
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	b953      	cbnz	r3, 800a3a6 <__swsetup_r+0xc6>
 800a390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a394:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a398:	d1ba      	bne.n	800a310 <__swsetup_r+0x30>
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	0792      	lsls	r2, r2, #30
 800a39e:	bf58      	it	pl
 800a3a0:	6963      	ldrpl	r3, [r4, #20]
 800a3a2:	60a3      	str	r3, [r4, #8]
 800a3a4:	e7f2      	b.n	800a38c <__swsetup_r+0xac>
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	e7f7      	b.n	800a39a <__swsetup_r+0xba>
 800a3aa:	bf00      	nop
 800a3ac:	20000894 	.word	0x20000894
 800a3b0:	08066428 	.word	0x08066428
 800a3b4:	08066448 	.word	0x08066448
 800a3b8:	08066408 	.word	0x08066408

0800a3bc <_close_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4c06      	ldr	r4, [pc, #24]	; (800a3d8 <_close_r+0x1c>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	f7f7 fccf 	bl	8001d6a <_close>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_close_r+0x1a>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_close_r+0x1a>
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	20007054 	.word	0x20007054

0800a3dc <__sflush_r>:
 800a3dc:	898a      	ldrh	r2, [r1, #12]
 800a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	0710      	lsls	r0, r2, #28
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	d458      	bmi.n	800a49c <__sflush_r+0xc0>
 800a3ea:	684b      	ldr	r3, [r1, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dc05      	bgt.n	800a3fc <__sflush_r+0x20>
 800a3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dc02      	bgt.n	800a3fc <__sflush_r+0x20>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	d0f9      	beq.n	800a3f6 <__sflush_r+0x1a>
 800a402:	2300      	movs	r3, #0
 800a404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a408:	682f      	ldr	r7, [r5, #0]
 800a40a:	6a21      	ldr	r1, [r4, #32]
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	d032      	beq.n	800a476 <__sflush_r+0x9a>
 800a410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	075a      	lsls	r2, r3, #29
 800a416:	d505      	bpl.n	800a424 <__sflush_r+0x48>
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	1ac0      	subs	r0, r0, r3
 800a41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a41e:	b10b      	cbz	r3, 800a424 <__sflush_r+0x48>
 800a420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a422:	1ac0      	subs	r0, r0, r3
 800a424:	2300      	movs	r3, #0
 800a426:	4602      	mov	r2, r0
 800a428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a42a:	6a21      	ldr	r1, [r4, #32]
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b0      	blx	r6
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	d106      	bne.n	800a444 <__sflush_r+0x68>
 800a436:	6829      	ldr	r1, [r5, #0]
 800a438:	291d      	cmp	r1, #29
 800a43a:	d848      	bhi.n	800a4ce <__sflush_r+0xf2>
 800a43c:	4a29      	ldr	r2, [pc, #164]	; (800a4e4 <__sflush_r+0x108>)
 800a43e:	40ca      	lsrs	r2, r1
 800a440:	07d6      	lsls	r6, r2, #31
 800a442:	d544      	bpl.n	800a4ce <__sflush_r+0xf2>
 800a444:	2200      	movs	r2, #0
 800a446:	6062      	str	r2, [r4, #4]
 800a448:	04d9      	lsls	r1, r3, #19
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	6022      	str	r2, [r4, #0]
 800a44e:	d504      	bpl.n	800a45a <__sflush_r+0x7e>
 800a450:	1c42      	adds	r2, r0, #1
 800a452:	d101      	bne.n	800a458 <__sflush_r+0x7c>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b903      	cbnz	r3, 800a45a <__sflush_r+0x7e>
 800a458:	6560      	str	r0, [r4, #84]	; 0x54
 800a45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a45c:	602f      	str	r7, [r5, #0]
 800a45e:	2900      	cmp	r1, #0
 800a460:	d0c9      	beq.n	800a3f6 <__sflush_r+0x1a>
 800a462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a466:	4299      	cmp	r1, r3
 800a468:	d002      	beq.n	800a470 <__sflush_r+0x94>
 800a46a:	4628      	mov	r0, r5
 800a46c:	f7fd fc84 	bl	8007d78 <_free_r>
 800a470:	2000      	movs	r0, #0
 800a472:	6360      	str	r0, [r4, #52]	; 0x34
 800a474:	e7c0      	b.n	800a3f8 <__sflush_r+0x1c>
 800a476:	2301      	movs	r3, #1
 800a478:	4628      	mov	r0, r5
 800a47a:	47b0      	blx	r6
 800a47c:	1c41      	adds	r1, r0, #1
 800a47e:	d1c8      	bne.n	800a412 <__sflush_r+0x36>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0c5      	beq.n	800a412 <__sflush_r+0x36>
 800a486:	2b1d      	cmp	r3, #29
 800a488:	d001      	beq.n	800a48e <__sflush_r+0xb2>
 800a48a:	2b16      	cmp	r3, #22
 800a48c:	d101      	bne.n	800a492 <__sflush_r+0xb6>
 800a48e:	602f      	str	r7, [r5, #0]
 800a490:	e7b1      	b.n	800a3f6 <__sflush_r+0x1a>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	e7ad      	b.n	800a3f8 <__sflush_r+0x1c>
 800a49c:	690f      	ldr	r7, [r1, #16]
 800a49e:	2f00      	cmp	r7, #0
 800a4a0:	d0a9      	beq.n	800a3f6 <__sflush_r+0x1a>
 800a4a2:	0793      	lsls	r3, r2, #30
 800a4a4:	680e      	ldr	r6, [r1, #0]
 800a4a6:	bf08      	it	eq
 800a4a8:	694b      	ldreq	r3, [r1, #20]
 800a4aa:	600f      	str	r7, [r1, #0]
 800a4ac:	bf18      	it	ne
 800a4ae:	2300      	movne	r3, #0
 800a4b0:	eba6 0807 	sub.w	r8, r6, r7
 800a4b4:	608b      	str	r3, [r1, #8]
 800a4b6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ba:	dd9c      	ble.n	800a3f6 <__sflush_r+0x1a>
 800a4bc:	4643      	mov	r3, r8
 800a4be:	463a      	mov	r2, r7
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b0      	blx	r6
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	dc06      	bgt.n	800a4da <__sflush_r+0xfe>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d8:	e78e      	b.n	800a3f8 <__sflush_r+0x1c>
 800a4da:	4407      	add	r7, r0
 800a4dc:	eba8 0800 	sub.w	r8, r8, r0
 800a4e0:	e7e9      	b.n	800a4b6 <__sflush_r+0xda>
 800a4e2:	bf00      	nop
 800a4e4:	20400001 	.word	0x20400001

0800a4e8 <_fflush_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	690b      	ldr	r3, [r1, #16]
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	b1db      	cbz	r3, 800a52a <_fflush_r+0x42>
 800a4f2:	b118      	cbz	r0, 800a4fc <_fflush_r+0x14>
 800a4f4:	6983      	ldr	r3, [r0, #24]
 800a4f6:	b90b      	cbnz	r3, 800a4fc <_fflush_r+0x14>
 800a4f8:	f7ff f80e 	bl	8009518 <__sinit>
 800a4fc:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <_fflush_r+0x48>)
 800a4fe:	429c      	cmp	r4, r3
 800a500:	d109      	bne.n	800a516 <_fflush_r+0x2e>
 800a502:	686c      	ldr	r4, [r5, #4]
 800a504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a508:	b17b      	cbz	r3, 800a52a <_fflush_r+0x42>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a512:	f7ff bf63 	b.w	800a3dc <__sflush_r>
 800a516:	4b07      	ldr	r3, [pc, #28]	; (800a534 <_fflush_r+0x4c>)
 800a518:	429c      	cmp	r4, r3
 800a51a:	d101      	bne.n	800a520 <_fflush_r+0x38>
 800a51c:	68ac      	ldr	r4, [r5, #8]
 800a51e:	e7f1      	b.n	800a504 <_fflush_r+0x1c>
 800a520:	4b05      	ldr	r3, [pc, #20]	; (800a538 <_fflush_r+0x50>)
 800a522:	429c      	cmp	r4, r3
 800a524:	bf08      	it	eq
 800a526:	68ec      	ldreq	r4, [r5, #12]
 800a528:	e7ec      	b.n	800a504 <_fflush_r+0x1c>
 800a52a:	2000      	movs	r0, #0
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	bf00      	nop
 800a530:	08066428 	.word	0x08066428
 800a534:	08066448 	.word	0x08066448
 800a538:	08066408 	.word	0x08066408

0800a53c <_lseek_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4c07      	ldr	r4, [pc, #28]	; (800a55c <_lseek_r+0x20>)
 800a540:	4605      	mov	r5, r0
 800a542:	4608      	mov	r0, r1
 800a544:	4611      	mov	r1, r2
 800a546:	2200      	movs	r2, #0
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	f7f7 fc34 	bl	8001db8 <_lseek>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_lseek_r+0x1e>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	b103      	cbz	r3, 800a55a <_lseek_r+0x1e>
 800a558:	602b      	str	r3, [r5, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	20007054 	.word	0x20007054

0800a560 <__swhatbuf_r>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	460e      	mov	r6, r1
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	2900      	cmp	r1, #0
 800a56a:	b096      	sub	sp, #88	; 0x58
 800a56c:	4614      	mov	r4, r2
 800a56e:	461d      	mov	r5, r3
 800a570:	da07      	bge.n	800a582 <__swhatbuf_r+0x22>
 800a572:	2300      	movs	r3, #0
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	89b3      	ldrh	r3, [r6, #12]
 800a578:	061a      	lsls	r2, r3, #24
 800a57a:	d410      	bmi.n	800a59e <__swhatbuf_r+0x3e>
 800a57c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a580:	e00e      	b.n	800a5a0 <__swhatbuf_r+0x40>
 800a582:	466a      	mov	r2, sp
 800a584:	f000 f8a4 	bl	800a6d0 <_fstat_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	dbf2      	blt.n	800a572 <__swhatbuf_r+0x12>
 800a58c:	9a01      	ldr	r2, [sp, #4]
 800a58e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a596:	425a      	negs	r2, r3
 800a598:	415a      	adcs	r2, r3
 800a59a:	602a      	str	r2, [r5, #0]
 800a59c:	e7ee      	b.n	800a57c <__swhatbuf_r+0x1c>
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	b016      	add	sp, #88	; 0x58
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}

0800a5a8 <__smakebuf_r>:
 800a5a8:	898b      	ldrh	r3, [r1, #12]
 800a5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5ac:	079d      	lsls	r5, r3, #30
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	d507      	bpl.n	800a5c4 <__smakebuf_r+0x1c>
 800a5b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	2301      	movs	r3, #1
 800a5be:	6163      	str	r3, [r4, #20]
 800a5c0:	b002      	add	sp, #8
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	ab01      	add	r3, sp, #4
 800a5c6:	466a      	mov	r2, sp
 800a5c8:	f7ff ffca 	bl	800a560 <__swhatbuf_r>
 800a5cc:	9900      	ldr	r1, [sp, #0]
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7fd fc1f 	bl	8007e14 <_malloc_r>
 800a5d6:	b948      	cbnz	r0, 800a5ec <__smakebuf_r+0x44>
 800a5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5dc:	059a      	lsls	r2, r3, #22
 800a5de:	d4ef      	bmi.n	800a5c0 <__smakebuf_r+0x18>
 800a5e0:	f023 0303 	bic.w	r3, r3, #3
 800a5e4:	f043 0302 	orr.w	r3, r3, #2
 800a5e8:	81a3      	strh	r3, [r4, #12]
 800a5ea:	e7e3      	b.n	800a5b4 <__smakebuf_r+0xc>
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <__smakebuf_r+0x7c>)
 800a5ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	6020      	str	r0, [r4, #0]
 800a5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f8:	81a3      	strh	r3, [r4, #12]
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	6163      	str	r3, [r4, #20]
 800a5fe:	9b01      	ldr	r3, [sp, #4]
 800a600:	6120      	str	r0, [r4, #16]
 800a602:	b15b      	cbz	r3, 800a61c <__smakebuf_r+0x74>
 800a604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a608:	4630      	mov	r0, r6
 800a60a:	f000 f873 	bl	800a6f4 <_isatty_r>
 800a60e:	b128      	cbz	r0, 800a61c <__smakebuf_r+0x74>
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	f023 0303 	bic.w	r3, r3, #3
 800a616:	f043 0301 	orr.w	r3, r3, #1
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	431d      	orrs	r5, r3
 800a620:	81a5      	strh	r5, [r4, #12]
 800a622:	e7cd      	b.n	800a5c0 <__smakebuf_r+0x18>
 800a624:	080094e1 	.word	0x080094e1

0800a628 <__ascii_mbtowc>:
 800a628:	b082      	sub	sp, #8
 800a62a:	b901      	cbnz	r1, 800a62e <__ascii_mbtowc+0x6>
 800a62c:	a901      	add	r1, sp, #4
 800a62e:	b142      	cbz	r2, 800a642 <__ascii_mbtowc+0x1a>
 800a630:	b14b      	cbz	r3, 800a646 <__ascii_mbtowc+0x1e>
 800a632:	7813      	ldrb	r3, [r2, #0]
 800a634:	600b      	str	r3, [r1, #0]
 800a636:	7812      	ldrb	r2, [r2, #0]
 800a638:	1c10      	adds	r0, r2, #0
 800a63a:	bf18      	it	ne
 800a63c:	2001      	movne	r0, #1
 800a63e:	b002      	add	sp, #8
 800a640:	4770      	bx	lr
 800a642:	4610      	mov	r0, r2
 800a644:	e7fb      	b.n	800a63e <__ascii_mbtowc+0x16>
 800a646:	f06f 0001 	mvn.w	r0, #1
 800a64a:	e7f8      	b.n	800a63e <__ascii_mbtowc+0x16>

0800a64c <memmove>:
 800a64c:	4288      	cmp	r0, r1
 800a64e:	b510      	push	{r4, lr}
 800a650:	eb01 0302 	add.w	r3, r1, r2
 800a654:	d807      	bhi.n	800a666 <memmove+0x1a>
 800a656:	1e42      	subs	r2, r0, #1
 800a658:	4299      	cmp	r1, r3
 800a65a:	d00a      	beq.n	800a672 <memmove+0x26>
 800a65c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a660:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a664:	e7f8      	b.n	800a658 <memmove+0xc>
 800a666:	4283      	cmp	r3, r0
 800a668:	d9f5      	bls.n	800a656 <memmove+0xa>
 800a66a:	1881      	adds	r1, r0, r2
 800a66c:	1ad2      	subs	r2, r2, r3
 800a66e:	42d3      	cmn	r3, r2
 800a670:	d100      	bne.n	800a674 <memmove+0x28>
 800a672:	bd10      	pop	{r4, pc}
 800a674:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a678:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a67c:	e7f7      	b.n	800a66e <memmove+0x22>

0800a67e <_malloc_usable_size_r>:
 800a67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a682:	1f18      	subs	r0, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfbc      	itt	lt
 800a688:	580b      	ldrlt	r3, [r1, r0]
 800a68a:	18c0      	addlt	r0, r0, r3
 800a68c:	4770      	bx	lr
	...

0800a690 <_read_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4c07      	ldr	r4, [pc, #28]	; (800a6b0 <_read_r+0x20>)
 800a694:	4605      	mov	r5, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	6022      	str	r2, [r4, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f7 fb2a 	bl	8001cf8 <_read>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_read_r+0x1e>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_read_r+0x1e>
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20007054 	.word	0x20007054

0800a6b4 <__ascii_wctomb>:
 800a6b4:	b149      	cbz	r1, 800a6ca <__ascii_wctomb+0x16>
 800a6b6:	2aff      	cmp	r2, #255	; 0xff
 800a6b8:	bf85      	ittet	hi
 800a6ba:	238a      	movhi	r3, #138	; 0x8a
 800a6bc:	6003      	strhi	r3, [r0, #0]
 800a6be:	700a      	strbls	r2, [r1, #0]
 800a6c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a6c4:	bf98      	it	ls
 800a6c6:	2001      	movls	r0, #1
 800a6c8:	4770      	bx	lr
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <_fstat_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4c07      	ldr	r4, [pc, #28]	; (800a6f0 <_fstat_r+0x20>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	f7f7 fb50 	bl	8001d82 <_fstat>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d102      	bne.n	800a6ec <_fstat_r+0x1c>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	b103      	cbz	r3, 800a6ec <_fstat_r+0x1c>
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	bd38      	pop	{r3, r4, r5, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20007054 	.word	0x20007054

0800a6f4 <_isatty_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4c06      	ldr	r4, [pc, #24]	; (800a710 <_isatty_r+0x1c>)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	f7f7 fb4f 	bl	8001da2 <_isatty>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_isatty_r+0x1a>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_isatty_r+0x1a>
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	20007054 	.word	0x20007054

0800a714 <_init>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	bf00      	nop
 800a718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a71a:	bc08      	pop	{r3}
 800a71c:	469e      	mov	lr, r3
 800a71e:	4770      	bx	lr

0800a720 <_fini>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	bf00      	nop
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr
